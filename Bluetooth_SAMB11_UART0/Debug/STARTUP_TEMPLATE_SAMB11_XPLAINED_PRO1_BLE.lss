
STARTUP_TEMPLATE_SAMB11_XPLAINED_PRO1_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a358  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  10012358  10012358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ca8  100123d0  100123d0  000123d0  2**2
                  ALLOC
  3 .stack        00000800  10015078  10015078  000123d0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000123d0  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000123f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002f3da  00000000  00000000  000124ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003569  00000000  00000000  00041886  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007d4c  00000000  00000000  00044def  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000810  00000000  00000000  0004cb3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000848  00000000  00000000  0004d34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d912  00000000  00000000  0004db93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cde7  00000000  00000000  0006b4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010c169  00000000  00000000  0007828c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001fc4  00000000  00000000  001843f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10012358 	.word	0x10012358
10008068:	10012358 	.word	0x10012358
1000806c:	100123d0 	.word	0x100123d0
10008070:	10015078 	.word	0x10015078
10008074:	100123d0 	.word	0x100123d0
10008078:	1001235c 	.word	0x1001235c
1000807c:	100123d4 	.word	0x100123d4
10008080:	100102ed 	.word	0x100102ed
10008084:	1000ba35 	.word	0x1000ba35

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100123d0 	.word	0x100123d0
100080a8:	00000000 	.word	0x00000000
100080ac:	10012358 	.word	0x10012358

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100123d4 	.word	0x100123d4
100080dc:	10012358 	.word	0x10012358
100080e0:	10012358 	.word	0x10012358
100080e4:	00000000 	.word	0x00000000

100080e8 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
100080e8:	b510      	push	{r4, lr}
100080ea:	b086      	sub	sp, #24
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);
100080ec:	a801      	add	r0, sp, #4
100080ee:	4b0c      	ldr	r3, [pc, #48]	; (10008120 <at30tse_init+0x38>)
100080f0:	4798      	blx	r3

	conf.pin_number_pad0 = AT30TSE_PIN_PAD0;
100080f2:	2308      	movs	r3, #8
100080f4:	9302      	str	r3, [sp, #8]
	conf.pin_number_pad1 = AT30TSE_PIN_PAD1;
100080f6:	3301      	adds	r3, #1
100080f8:	9304      	str	r3, [sp, #16]
	
	conf.pinmux_sel_pad0 = AT30TSE_MUX_PAD0;
100080fa:	3b07      	subs	r3, #7
100080fc:	9303      	str	r3, [sp, #12]
	conf.pinmux_sel_pad1 = AT30TSE_MUX_PAD1;
100080fe:	9305      	str	r3, [sp, #20]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_I2C_MODULE, &conf);
10008100:	4c08      	ldr	r4, [pc, #32]	; (10008124 <at30tse_init+0x3c>)
10008102:	aa01      	add	r2, sp, #4
10008104:	4908      	ldr	r1, [pc, #32]	; (10008128 <at30tse_init+0x40>)
10008106:	0020      	movs	r0, r4
10008108:	4b08      	ldr	r3, [pc, #32]	; (1000812c <at30tse_init+0x44>)
1000810a:	4798      	blx	r3
	i2c_enable(dev_inst_at30tse75x.hw);
1000810c:	6822      	ldr	r2, [r4, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000810e:	2128      	movs	r1, #40	; 0x28
10008110:	5c53      	ldrb	r3, [r2, r1]
10008112:	07db      	lsls	r3, r3, #31
10008114:	d4fc      	bmi.n	10008110 <at30tse_init+0x28>
static inline void i2c_enable(I2C *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_I2C_MODULE_ENABLE_ENABLE_Pos);
10008116:	2301      	movs	r3, #1
10008118:	7513      	strb	r3, [r2, #20]
}
1000811a:	b006      	add	sp, #24
1000811c:	bd10      	pop	{r4, pc}
1000811e:	46c0      	nop			; (mov r8, r8)
10008120:	100085ed 	.word	0x100085ed
10008124:	10013eb0 	.word	0x10013eb0
10008128:	40003000 	.word	0x40003000
1000812c:	10008605 	.word	0x10008605

10008130 <at30tse_write_register>:
 * \param[in] reg_type Type of the register (Volatile or Non-volatile).
 * \param[in] reg_size Register size.
 * \param[in] reg_value Value to be written to reg.
 */
void at30tse_write_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size, uint16_t reg_value)
{
10008130:	b510      	push	{r4, lr}
10008132:	b084      	sub	sp, #16
	uint8_t data[3];
	data[0] = reg | reg_type;
10008134:	ac03      	add	r4, sp, #12
10008136:	4301      	orrs	r1, r0
10008138:	7021      	strb	r1, [r4, #0]
	data[1] = 0x00FF & (reg_value >> 8);
1000813a:	0a19      	lsrs	r1, r3, #8
1000813c:	7061      	strb	r1, [r4, #1]
	data[2] = 0x00FF & reg_value;
1000813e:	70a3      	strb	r3, [r4, #2]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet transfer = {
10008140:	a901      	add	r1, sp, #4
10008142:	2348      	movs	r3, #72	; 0x48
10008144:	800b      	strh	r3, [r1, #0]
10008146:	3201      	adds	r2, #1
10008148:	804a      	strh	r2, [r1, #2]
1000814a:	604c      	str	r4, [r1, #4]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = 1 + reg_size,
		.data        = data,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait(&dev_inst_at30tse75x, &transfer);
1000814c:	4802      	ldr	r0, [pc, #8]	; (10008158 <at30tse_write_register+0x28>)
1000814e:	4b03      	ldr	r3, [pc, #12]	; (1000815c <at30tse_write_register+0x2c>)
10008150:	4798      	blx	r3
}
10008152:	b004      	add	sp, #16
10008154:	bd10      	pop	{r4, pc}
10008156:	46c0      	nop			; (mov r8, r8)
10008158:	10013eb0 	.word	0x10013eb0
1000815c:	100086e9 	.word	0x100086e9

10008160 <at30tse_write_config_register>:
 * \brief Writes the configuration register reg with the value passed
 *
 * \param[in] value Register value to be written.
 */
void at30tse_write_config_register(uint16_t value)
{
10008160:	b570      	push	{r4, r5, r6, lr}
10008162:	0004      	movs	r4, r0
	at30tse_write_register(AT30TSE_CONFIG_REG,
10008164:	0003      	movs	r3, r0
10008166:	2201      	movs	r2, #1
10008168:	2100      	movs	r1, #0
1000816a:	2001      	movs	r0, #1
1000816c:	4d03      	ldr	r5, [pc, #12]	; (1000817c <at30tse_write_config_register+0x1c>)
1000816e:	47a8      	blx	r5
							AT30TSE_NON_VOLATILE_REG,
							AT30TSE_CONFIG_REG_SIZE-1,
							value);

	resolution = ( value >> AT30TSE_CONFIG_RES_Pos ) & ( AT30TSE_CONFIG_RES_Msk >> AT30TSE_CONFIG_RES_Pos);
10008170:	0464      	lsls	r4, r4, #17
10008172:	0fa4      	lsrs	r4, r4, #30
10008174:	4b02      	ldr	r3, [pc, #8]	; (10008180 <at30tse_write_config_register+0x20>)
10008176:	701c      	strb	r4, [r3, #0]

}
10008178:	bd70      	pop	{r4, r5, r6, pc}
1000817a:	46c0      	nop			; (mov r8, r8)
1000817c:	10008131 	.word	0x10008131
10008180:	100123ec 	.word	0x100123ec

10008184 <dma_isr_handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
static void dma_isr_handler( void )
{
10008184:	b5f0      	push	{r4, r5, r6, r7, lr}
10008186:	4647      	mov	r7, r8
10008188:	b480      	push	{r7}
1000818a:	b082      	sub	sp, #8
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;

	/* Get active channel */
	active_channel =  PROV_DMA_CTRL0->CORE_INT_STATUS.reg & 
1000818c:	2380      	movs	r3, #128	; 0x80
1000818e:	011b      	lsls	r3, r3, #4
10008190:	4a3a      	ldr	r2, [pc, #232]	; (1000827c <dma_isr_handler+0xf8>)
10008192:	5cd4      	ldrb	r4, [r2, r3]
{
	uint8_t active_channel;
	static uint8_t channel_index; //
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;
10008194:	2600      	movs	r6, #0
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
10008196:	230f      	movs	r3, #15
10008198:	401c      	ands	r4, r3
1000819a:	9401      	str	r4, [sp, #4]
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
1000819c:	4b38      	ldr	r3, [pc, #224]	; (10008280 <dma_isr_handler+0xfc>)
1000819e:	4698      	mov	r8, r3
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
100081a0:	2501      	movs	r5, #1
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
100081a2:	9a01      	ldr	r2, [sp, #4]
 * \param[in]  channel  Channel active
 *
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;
100081a4:	2100      	movs	r1, #0
100081a6:	e000      	b.n	100081aa <dma_isr_handler+0x26>

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
		index++;
100081a8:	0019      	movs	r1, r3
{
	uint8_t index = 0;

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
100081aa:	0852      	lsrs	r2, r2, #1
		index++;
100081ac:	1c4b      	adds	r3, r1, #1
100081ae:	b2db      	uxtb	r3, r3
	} while (channel);
100081b0:	2a00      	cmp	r2, #0
100081b2:	d1f9      	bne.n	100081a8 <dma_isr_handler+0x24>
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
100081b4:	0089      	lsls	r1, r1, #2
100081b6:	4643      	mov	r3, r8
100081b8:	58c8      	ldr	r0, [r1, r3]
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100081ba:	7803      	ldrb	r3, [r0, #0]
100081bc:	021b      	lsls	r3, r3, #8
100081be:	4a31      	ldr	r2, [pc, #196]	; (10008284 <dma_isr_handler+0x100>)
100081c0:	589c      	ldr	r4, [r3, r2]
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
100081c2:	b2e1      	uxtb	r1, r4
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100081c4:	4a30      	ldr	r2, [pc, #192]	; (10008288 <dma_isr_handler+0x104>)
100081c6:	589a      	ldr	r2, [r3, r2]
100081c8:	6282      	str	r2, [r0, #40]	; 0x28
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
100081ca:	22ff      	movs	r2, #255	; 0xff
100081cc:	4022      	ands	r2, r4
100081ce:	4215      	tst	r5, r2
100081d0:	d003      	beq.n	100081da <dma_isr_handler+0x56>
			/* Transfer complete flag */
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
100081d2:	2600      	movs	r6, #0
100081d4:	2225      	movs	r2, #37	; 0x25
100081d6:	5486      	strb	r6, [r0, r2]
100081d8:	e02f      	b.n	1000823a <dma_isr_handler+0xb6>
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
100081da:	0797      	lsls	r7, r2, #30
100081dc:	d504      	bpl.n	100081e8 <dma_isr_handler+0x64>
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100081de:	2610      	movs	r6, #16
100081e0:	2225      	movs	r2, #37	; 0x25
100081e2:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
100081e4:	002e      	movs	r6, r5
100081e6:	e028      	b.n	1000823a <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
100081e8:	0757      	lsls	r7, r2, #29
100081ea:	d504      	bpl.n	100081f6 <dma_isr_handler+0x72>
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100081ec:	2610      	movs	r6, #16
100081ee:	2225      	movs	r2, #37	; 0x25
100081f0:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
100081f2:	3e0e      	subs	r6, #14
100081f4:	e021      	b.n	1000823a <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
100081f6:	0717      	lsls	r7, r2, #28
100081f8:	d504      	bpl.n	10008204 <dma_isr_handler+0x80>
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
100081fa:	2610      	movs	r6, #16
100081fc:	2225      	movs	r2, #37	; 0x25
100081fe:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
10008200:	3e0d      	subs	r6, #13
10008202:	e01a      	b.n	1000823a <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
10008204:	06d7      	lsls	r7, r2, #27
10008206:	d504      	bpl.n	10008212 <dma_isr_handler+0x8e>
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008208:	2610      	movs	r6, #16
1000820a:	2225      	movs	r2, #37	; 0x25
1000820c:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
1000820e:	3e0c      	subs	r6, #12
10008210:	e013      	b.n	1000823a <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
10008212:	0697      	lsls	r7, r2, #26
10008214:	d504      	bpl.n	10008220 <dma_isr_handler+0x9c>
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008216:	2610      	movs	r6, #16
10008218:	2225      	movs	r2, #37	; 0x25
1000821a:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
1000821c:	3e0b      	subs	r6, #11
1000821e:	e00c      	b.n	1000823a <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
10008220:	0652      	lsls	r2, r2, #25
10008222:	d504      	bpl.n	1000822e <dma_isr_handler+0xaa>
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008224:	2610      	movs	r6, #16
10008226:	2225      	movs	r2, #37	; 0x25
10008228:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
1000822a:	3e0a      	subs	r6, #10
1000822c:	e005      	b.n	1000823a <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
1000822e:	0622      	lsls	r2, r4, #24
10008230:	d503      	bpl.n	1000823a <dma_isr_handler+0xb6>
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008232:	2610      	movs	r6, #16
10008234:	2225      	movs	r2, #37	; 0x25
10008236:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
10008238:	3e09      	subs	r6, #9
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		}
		
		if (isr) {
1000823a:	2900      	cmp	r1, #0
1000823c:	d00e      	beq.n	1000825c <dma_isr_handler+0xd8>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000823e:	4913      	ldr	r1, [pc, #76]	; (1000828c <dma_isr_handler+0x108>)
10008240:	002a      	movs	r2, r5
10008242:	40b2      	lsls	r2, r6
10008244:	505a      	str	r2, [r3, r1]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
10008246:	2324      	movs	r3, #36	; 0x24
10008248:	5cc3      	ldrb	r3, [r0, r3]
1000824a:	4133      	asrs	r3, r6
1000824c:	421d      	tst	r5, r3
1000824e:	d005      	beq.n	1000825c <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
10008250:	00b3      	lsls	r3, r6, #2
10008252:	18c3      	adds	r3, r0, r3
10008254:	685b      	ldr	r3, [r3, #4]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
10008256:	2b00      	cmp	r3, #0
10008258:	d000      	beq.n	1000825c <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
				resource->callback[isr_flag](resource);
1000825a:	4798      	blx	r3
			}
		}
		isr &= ~(1<<isr_flag);
	} while (isr);
1000825c:	002b      	movs	r3, r5
1000825e:	40b3      	lsls	r3, r6
10008260:	439c      	bics	r4, r3
10008262:	b263      	sxtb	r3, r4
10008264:	2b00      	cmp	r3, #0
10008266:	d19c      	bne.n	100081a2 <dma_isr_handler+0x1e>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10008268:	2180      	movs	r1, #128	; 0x80
1000826a:	0209      	lsls	r1, r1, #8
1000826c:	3381      	adds	r3, #129	; 0x81
1000826e:	33ff      	adds	r3, #255	; 0xff
10008270:	4a07      	ldr	r2, [pc, #28]	; (10008290 <dma_isr_handler+0x10c>)
10008272:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(PROV_DMA_CTRL0_IRQn);
}
10008274:	b002      	add	sp, #8
10008276:	bc04      	pop	{r2}
10008278:	4690      	mov	r8, r2
1000827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000827c:	40002000 	.word	0x40002000
10008280:	100123f0 	.word	0x100123f0
10008284:	400020ac 	.word	0x400020ac
10008288:	40002050 	.word	0x40002050
1000828c:	400020a4 	.word	0x400020a4
10008290:	e000e100 	.word	0xe000e100

10008294 <dma_get_config_defaults>:
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	/* DMA source configuration */
	config->src.max_burst = 1;
10008294:	2201      	movs	r2, #1
10008296:	7002      	strb	r2, [r0, #0]
	config->src.tokens = 1;
10008298:	7042      	strb	r2, [r0, #1]
	config->src.enable_inc_addr = true;
1000829a:	7082      	strb	r2, [r0, #2]
	config->src.periph = MEMORY_DMA_PERIPHERAL;
1000829c:	2300      	movs	r3, #0
1000829e:	70c3      	strb	r3, [r0, #3]
	config->src.periph_delay = 0;
100082a0:	7103      	strb	r3, [r0, #4]
	config->src.enable_proi_top = false;
100082a2:	7143      	strb	r3, [r0, #5]
	config->src.proi_top_index = 0;
100082a4:	7183      	strb	r3, [r0, #6]
	config->src.enable_proi_high = false;
100082a6:	71c3      	strb	r3, [r0, #7]
	config->src.proi_high_index = 0;
100082a8:	7203      	strb	r3, [r0, #8]
	/* DMA destination configuration */
	config->des.max_burst = 1;
100082aa:	7242      	strb	r2, [r0, #9]
	config->des.tokens = 1;
100082ac:	7282      	strb	r2, [r0, #10]
	config->des.enable_inc_addr = true;
100082ae:	72c2      	strb	r2, [r0, #11]
	config->des.periph = MEMORY_DMA_PERIPHERAL;
100082b0:	7303      	strb	r3, [r0, #12]
	config->des.periph_delay = 0;
100082b2:	7343      	strb	r3, [r0, #13]
	config->des.enable_proi_top = false;
100082b4:	7383      	strb	r3, [r0, #14]
	config->des.proi_top_index = 0;
100082b6:	73c3      	strb	r3, [r0, #15]
	config->des.enable_proi_high = false;
100082b8:	7403      	strb	r3, [r0, #16]
	config->des.proi_high_index = 0;
100082ba:	7443      	strb	r3, [r0, #17]
	/* DMA channel configuration */
	config->enable_joint_mode = false;
100082bc:	7483      	strb	r3, [r0, #18]
	config->swap = DMA_ENDIAN_NO_SWAP;
100082be:	74c3      	strb	r3, [r0, #19]
}
100082c0:	4770      	bx	lr
100082c2:	46c0      	nop			; (mov r8, r8)

100082c4 <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
100082c4:	b510      	push	{r4, lr}
 *
 * \return Status of the DMA resource.
 */
static inline enum status_code dma_get_job_status(struct dma_resource *resource)
{
	return resource->job_status;
100082c6:	2325      	movs	r3, #37	; 0x25
100082c8:	5cc3      	ldrb	r3, [r0, r3]
100082ca:	b2db      	uxtb	r3, r3
	struct dma_descriptor *desc = resource->descriptor;

	/* Check if channel is busy */
	if (dma_get_job_status(resource) == STATUS_BUSY) {
100082cc:	2b05      	cmp	r3, #5
100082ce:	d042      	beq.n	10008356 <dma_add_descriptor+0x92>
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
	struct dma_descriptor *desc = resource->descriptor;
100082d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (dma_get_job_status(resource) == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
100082d2:	2a00      	cmp	r2, #0
100082d4:	d007      	beq.n	100082e6 <dma_add_descriptor+0x22>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
100082d6:	2303      	movs	r3, #3
100082d8:	68d4      	ldr	r4, [r2, #12]
100082da:	439c      	bics	r4, r3
100082dc:	0023      	movs	r3, r4
100082de:	2403      	movs	r4, #3
100082e0:	2b00      	cmp	r3, #0
100082e2:	d11f      	bne.n	10008324 <dma_add_descriptor+0x60>
100082e4:	e02d      	b.n	10008342 <dma_add_descriptor+0x7e>
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
100082e6:	62c1      	str	r1, [r0, #44]	; 0x2c
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100082e8:	7803      	ldrb	r3, [r0, #0]
100082ea:	021b      	lsls	r3, r3, #8
100082ec:	4a1b      	ldr	r2, [pc, #108]	; (1000835c <dma_add_descriptor+0x98>)
100082ee:	4694      	mov	ip, r2
100082f0:	4463      	add	r3, ip
100082f2:	680a      	ldr	r2, [r1, #0]
100082f4:	601a      	str	r2, [r3, #0]
100082f6:	7803      	ldrb	r3, [r0, #0]
100082f8:	021b      	lsls	r3, r3, #8
100082fa:	4a19      	ldr	r2, [pc, #100]	; (10008360 <dma_add_descriptor+0x9c>)
100082fc:	4694      	mov	ip, r2
100082fe:	4463      	add	r3, ip
10008300:	684a      	ldr	r2, [r1, #4]
10008302:	601a      	str	r2, [r3, #0]
	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG0.reg, descriptor->read_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
10008304:	688a      	ldr	r2, [r1, #8]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008306:	7803      	ldrb	r3, [r0, #0]
10008308:	021b      	lsls	r3, r3, #8
1000830a:	4916      	ldr	r1, [pc, #88]	; (10008364 <dma_add_descriptor+0xa0>)
1000830c:	468c      	mov	ip, r1
1000830e:	4463      	add	r3, ip
10008310:	601a      	str	r2, [r3, #0]
10008312:	7803      	ldrb	r3, [r0, #0]
10008314:	021b      	lsls	r3, r3, #8
10008316:	4a14      	ldr	r2, [pc, #80]	; (10008368 <dma_add_descriptor+0xa4>)
10008318:	4694      	mov	ip, r2
1000831a:	4463      	add	r3, ip
1000831c:	2203      	movs	r2, #3
1000831e:	601a      	str	r2, [r3, #0]
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008320:	2300      	movs	r3, #0
10008322:	e018      	b.n	10008356 <dma_add_descriptor+0x92>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
			desc = (struct dma_descriptor*)((uint32_t)desc->next);
10008324:	68d2      	ldr	r2, [r2, #12]
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
10008326:	68d3      	ldr	r3, [r2, #12]
10008328:	43a3      	bics	r3, r4
1000832a:	d1fb      	bne.n	10008324 <dma_add_descriptor+0x60>
		}
		if (resource->descriptor->cmd.next_addr == 0x0) {
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
1000832c:	60d1      	str	r1, [r2, #12]
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
1000832e:	2303      	movs	r3, #3
10008330:	68ca      	ldr	r2, [r1, #12]
10008332:	439a      	bics	r2, r3
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008334:	2300      	movs	r3, #0
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
10008336:	2a00      	cmp	r2, #0
10008338:	d00d      	beq.n	10008356 <dma_add_descriptor+0x92>
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
1000833a:	3303      	adds	r3, #3
1000833c:	60cb      	str	r3, [r1, #12]
		}
	}

	return STATUS_OK;
1000833e:	2300      	movs	r3, #0
10008340:	e009      	b.n	10008356 <dma_add_descriptor+0x92>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008342:	7803      	ldrb	r3, [r0, #0]
10008344:	021b      	lsls	r3, r3, #8
10008346:	4808      	ldr	r0, [pc, #32]	; (10008368 <dma_add_descriptor+0xa4>)
10008348:	4684      	mov	ip, r0
1000834a:	4463      	add	r3, ip
1000834c:	2003      	movs	r0, #3
1000834e:	000c      	movs	r4, r1
10008350:	4384      	bics	r4, r0
10008352:	601c      	str	r4, [r3, #0]
10008354:	e7ea      	b.n	1000832c <dma_add_descriptor+0x68>
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
}
10008356:	0018      	movs	r0, r3
10008358:	bd10      	pop	{r4, pc}
1000835a:	46c0      	nop			; (mov r8, r8)
1000835c:	40002000 	.word	0x40002000
10008360:	40002004 	.word	0x40002004
10008364:	40002008 	.word	0x40002008
10008368:	4000200c 	.word	0x4000200c

1000836c <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
1000836c:	b082      	sub	sp, #8
1000836e:	0002      	movs	r2, r0
	volatile uint32_t regval;

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
10008370:	2325      	movs	r3, #37	; 0x25
10008372:	5cc3      	ldrb	r3, [r0, r3]
10008374:	b2d8      	uxtb	r0, r3
10008376:	2805      	cmp	r0, #5
10008378:	d027      	beq.n	100083ca <dma_start_transfer_job+0x5e>
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
1000837a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
1000837c:	689b      	ldr	r3, [r3, #8]
		return STATUS_ERR_INVALID_ARG;
1000837e:	2017      	movs	r0, #23
	if (resource->job_status == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
10008380:	2b00      	cmp	r3, #0
10008382:	d022      	beq.n	100083ca <dma_start_transfer_job+0x5e>
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
10008384:	7813      	ldrb	r3, [r2, #0]
10008386:	021b      	lsls	r3, r3, #8
10008388:	4911      	ldr	r1, [pc, #68]	; (100083d0 <dma_start_transfer_job+0x64>)
1000838a:	5859      	ldr	r1, [r3, r1]
	if (resource->descriptor->buffer_size == 0) {
		return STATUS_ERR_INVALID_ARG;
	}
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
1000838c:	9101      	str	r1, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
1000838e:	9801      	ldr	r0, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008390:	4910      	ldr	r1, [pc, #64]	; (100083d4 <dma_start_transfer_job+0x68>)
10008392:	5058      	str	r0, [r3, r1]
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
10008394:	2324      	movs	r3, #36	; 0x24
10008396:	5cd3      	ldrb	r3, [r2, r3]
10008398:	9301      	str	r3, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
1000839a:	9901      	ldr	r1, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000839c:	7813      	ldrb	r3, [r2, #0]
1000839e:	021b      	lsls	r3, r3, #8
100083a0:	480d      	ldr	r0, [pc, #52]	; (100083d8 <dma_start_transfer_job+0x6c>)
100083a2:	4684      	mov	ip, r0
100083a4:	4463      	add	r3, ip
100083a6:	6019      	str	r1, [r3, #0]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
	/* Set job status */
	resource->job_status = STATUS_BUSY;
100083a8:	2105      	movs	r1, #5
100083aa:	2325      	movs	r3, #37	; 0x25
100083ac:	54d1      	strb	r1, [r2, r3]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083ae:	7813      	ldrb	r3, [r2, #0]
100083b0:	021b      	lsls	r3, r3, #8
100083b2:	490a      	ldr	r1, [pc, #40]	; (100083dc <dma_start_transfer_job+0x70>)
100083b4:	468c      	mov	ip, r1
100083b6:	4463      	add	r3, ip
100083b8:	2101      	movs	r1, #1
100083ba:	6019      	str	r1, [r3, #0]
100083bc:	7813      	ldrb	r3, [r2, #0]
100083be:	021b      	lsls	r3, r3, #8
100083c0:	4a07      	ldr	r2, [pc, #28]	; (100083e0 <dma_start_transfer_job+0x74>)
100083c2:	4694      	mov	ip, r2
100083c4:	4463      	add	r3, ip
100083c6:	6019      	str	r1, [r3, #0]
	/* Enable the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_ENABLE_REG.reg, 1);
	/* Start the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_START_REG.reg, 1);

	return STATUS_OK;
100083c8:	2000      	movs	r0, #0
}
100083ca:	b002      	add	sp, #8
100083cc:	4770      	bx	lr
100083ce:	46c0      	nop			; (mov r8, r8)
100083d0:	400020ac 	.word	0x400020ac
100083d4:	400020a4 	.word	0x400020a4
100083d8:	400020a8 	.word	0x400020a8
100083dc:	40002040 	.word	0x40002040
100083e0:	40002044 	.word	0x40002044

100083e4 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
100083e4:	b570      	push	{r4, r5, r6, lr}
100083e6:	0005      	movs	r5, r0
100083e8:	000c      	movs	r4, r1
	uint8_t new_channel;

	if (!_dma_inst._dma_init) {
100083ea:	4b5c      	ldr	r3, [pc, #368]	; (1000855c <dma_allocate+0x178>)
100083ec:	781b      	ldrb	r3, [r3, #0]
100083ee:	2b00      	cmp	r3, #0
100083f0:	d112      	bne.n	10008418 <dma_allocate+0x34>
		/* Perform a reset before enable DMA controller */
		system_peripheral_reset(PERIPHERAL_DMA);
100083f2:	2043      	movs	r0, #67	; 0x43
100083f4:	4b5a      	ldr	r3, [pc, #360]	; (10008560 <dma_allocate+0x17c>)
100083f6:	4798      	blx	r3
		/* Select Mux 15 as PROV_DMA_CTRL0 interrupt source */
		LPMCU_MISC_REGS0->IRQ_MUX_IO_SEL_3.bit.MUX_15 = LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_16_Val;
100083f8:	495a      	ldr	r1, [pc, #360]	; (10008564 <dma_allocate+0x180>)
100083fa:	22cc      	movs	r2, #204	; 0xcc
100083fc:	5888      	ldr	r0, [r1, r2]
100083fe:	4b5a      	ldr	r3, [pc, #360]	; (10008568 <dma_allocate+0x184>)
10008400:	4003      	ands	r3, r0
10008402:	2080      	movs	r0, #128	; 0x80
10008404:	0540      	lsls	r0, r0, #21
10008406:	4303      	orrs	r3, r0
10008408:	508b      	str	r3, [r1, r2]
		system_register_isr(31, (uint32_t)dma_isr_handler);
1000840a:	4958      	ldr	r1, [pc, #352]	; (1000856c <dma_allocate+0x188>)
1000840c:	201f      	movs	r0, #31
1000840e:	4b58      	ldr	r3, [pc, #352]	; (10008570 <dma_allocate+0x18c>)
10008410:	4798      	blx	r3
		
		_dma_inst._dma_init = true;
10008412:	2201      	movs	r2, #1
10008414:	4b51      	ldr	r3, [pc, #324]	; (1000855c <dma_allocate+0x178>)
10008416:	701a      	strb	r2, [r3, #0]
{
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;
10008418:	4b50      	ldr	r3, [pc, #320]	; (1000855c <dma_allocate+0x178>)
1000841a:	685b      	ldr	r3, [r3, #4]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
		if (!(tmp & 0x00000001)) {
1000841c:	07da      	lsls	r2, r3, #31
1000841e:	d500      	bpl.n	10008422 <dma_allocate+0x3e>
10008420:	e096      	b.n	10008550 <dma_allocate+0x16c>
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
10008422:	2300      	movs	r3, #0
10008424:	e000      	b.n	10008428 <dma_allocate+0x44>
		if (!(tmp & 0x00000001)) {
10008426:	2301      	movs	r3, #1
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
10008428:	4a4c      	ldr	r2, [pc, #304]	; (1000855c <dma_allocate+0x178>)
1000842a:	6850      	ldr	r0, [r2, #4]
1000842c:	2101      	movs	r1, #1
1000842e:	4099      	lsls	r1, r3
10008430:	4301      	orrs	r1, r0
10008432:	6051      	str	r1, [r2, #4]
			_dma_inst.free_channels--;
10008434:	7a11      	ldrb	r1, [r2, #8]
10008436:	3901      	subs	r1, #1
10008438:	7211      	strb	r1, [r2, #8]
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
1000843a:	2014      	movs	r0, #20
		_dma_inst._dma_init = true;
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
1000843c:	2bff      	cmp	r3, #255	; 0xff
1000843e:	d100      	bne.n	10008442 <dma_allocate+0x5e>
10008440:	e08a      	b.n	10008558 <dma_allocate+0x174>
		return STATUS_ERR_NOT_FOUND;
	}
	
	/* Set the channel */
	resource->channel_id = new_channel;
10008442:	702b      	strb	r3, [r5, #0]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008444:	021b      	lsls	r3, r3, #8
10008446:	4a4b      	ldr	r2, [pc, #300]	; (10008574 <dma_allocate+0x190>)
10008448:	1898      	adds	r0, r3, r2
1000844a:	7823      	ldrb	r3, [r4, #0]
1000844c:	267f      	movs	r6, #127	; 0x7f
1000844e:	4033      	ands	r3, r6
10008450:	78a2      	ldrb	r2, [r4, #2]
10008452:	07d2      	lsls	r2, r2, #31
10008454:	4313      	orrs	r3, r2
10008456:	7862      	ldrb	r2, [r4, #1]
10008458:	0412      	lsls	r2, r2, #16
1000845a:	21fc      	movs	r1, #252	; 0xfc
1000845c:	0389      	lsls	r1, r1, #14
1000845e:	400a      	ands	r2, r1
10008460:	4313      	orrs	r3, r2
10008462:	6003      	str	r3, [r0, #0]
10008464:	7828      	ldrb	r0, [r5, #0]
10008466:	0200      	lsls	r0, r0, #8
10008468:	4b43      	ldr	r3, [pc, #268]	; (10008578 <dma_allocate+0x194>)
1000846a:	469c      	mov	ip, r3
1000846c:	4460      	add	r0, ip
1000846e:	7a63      	ldrb	r3, [r4, #9]
10008470:	4033      	ands	r3, r6
10008472:	7ae2      	ldrb	r2, [r4, #11]
10008474:	07d2      	lsls	r2, r2, #31
10008476:	4313      	orrs	r3, r2
10008478:	7aa2      	ldrb	r2, [r4, #10]
1000847a:	0412      	lsls	r2, r2, #16
1000847c:	4011      	ands	r1, r2
1000847e:	4319      	orrs	r1, r3
10008480:	6001      	str	r1, [r0, #0]
10008482:	782b      	ldrb	r3, [r5, #0]
10008484:	021b      	lsls	r3, r3, #8
10008486:	4a3d      	ldr	r2, [pc, #244]	; (1000857c <dma_allocate+0x198>)
10008488:	4694      	mov	ip, r2
1000848a:	4463      	add	r3, ip
1000848c:	7ce2      	ldrb	r2, [r4, #19]
1000848e:	0712      	lsls	r2, r2, #28
10008490:	21c0      	movs	r1, #192	; 0xc0
10008492:	0589      	lsls	r1, r1, #22
10008494:	400a      	ands	r2, r1
10008496:	7ca1      	ldrb	r1, [r4, #18]
10008498:	0409      	lsls	r1, r1, #16
1000849a:	430a      	orrs	r2, r1
1000849c:	601a      	str	r2, [r3, #0]
1000849e:	782b      	ldrb	r3, [r5, #0]
100084a0:	021b      	lsls	r3, r3, #8
100084a2:	4a37      	ldr	r2, [pc, #220]	; (10008580 <dma_allocate+0x19c>)
100084a4:	4694      	mov	ip, r2
100084a6:	4463      	add	r3, ip
100084a8:	7926      	ldrb	r6, [r4, #4]
100084aa:	0236      	lsls	r6, r6, #8
100084ac:	21e0      	movs	r1, #224	; 0xe0
100084ae:	00c9      	lsls	r1, r1, #3
100084b0:	400e      	ands	r6, r1
100084b2:	7b22      	ldrb	r2, [r4, #12]
100084b4:	0412      	lsls	r2, r2, #16
100084b6:	20f8      	movs	r0, #248	; 0xf8
100084b8:	0340      	lsls	r0, r0, #13
100084ba:	4002      	ands	r2, r0
100084bc:	4332      	orrs	r2, r6
100084be:	78e0      	ldrb	r0, [r4, #3]
100084c0:	261f      	movs	r6, #31
100084c2:	4030      	ands	r0, r6
100084c4:	4302      	orrs	r2, r0
100084c6:	0016      	movs	r6, r2
100084c8:	7b62      	ldrb	r2, [r4, #13]
100084ca:	0612      	lsls	r2, r2, #24
100084cc:	20e0      	movs	r0, #224	; 0xe0
100084ce:	04c0      	lsls	r0, r0, #19
100084d0:	4002      	ands	r2, r0
100084d2:	4332      	orrs	r2, r6
100084d4:	601a      	str	r2, [r3, #0]
100084d6:	7828      	ldrb	r0, [r5, #0]
100084d8:	0200      	lsls	r0, r0, #8
100084da:	4b2a      	ldr	r3, [pc, #168]	; (10008584 <dma_allocate+0x1a0>)
100084dc:	469c      	mov	ip, r3
100084de:	4460      	add	r0, ip
100084e0:	79a3      	ldrb	r3, [r4, #6]
100084e2:	2607      	movs	r6, #7
100084e4:	4033      	ands	r3, r6
100084e6:	7966      	ldrb	r6, [r4, #5]
100084e8:	2208      	movs	r2, #8
100084ea:	40b2      	lsls	r2, r6
100084ec:	4313      	orrs	r3, r2
100084ee:	79e6      	ldrb	r6, [r4, #7]
100084f0:	2280      	movs	r2, #128	; 0x80
100084f2:	40b2      	lsls	r2, r6
100084f4:	4313      	orrs	r3, r2
100084f6:	7ba6      	ldrb	r6, [r4, #14]
100084f8:	2280      	movs	r2, #128	; 0x80
100084fa:	0112      	lsls	r2, r2, #4
100084fc:	40b2      	lsls	r2, r6
100084fe:	4313      	orrs	r3, r2
10008500:	7c26      	ldrb	r6, [r4, #16]
10008502:	2280      	movs	r2, #128	; 0x80
10008504:	0212      	lsls	r2, r2, #8
10008506:	40b2      	lsls	r2, r6
10008508:	4313      	orrs	r3, r2
1000850a:	001e      	movs	r6, r3
1000850c:	7a22      	ldrb	r2, [r4, #8]
1000850e:	0112      	lsls	r2, r2, #4
10008510:	2370      	movs	r3, #112	; 0x70
10008512:	401a      	ands	r2, r3
10008514:	0033      	movs	r3, r6
10008516:	4313      	orrs	r3, r2
10008518:	7be2      	ldrb	r2, [r4, #15]
1000851a:	0212      	lsls	r2, r2, #8
1000851c:	4011      	ands	r1, r2
1000851e:	430b      	orrs	r3, r1
10008520:	7c61      	ldrb	r1, [r4, #17]
10008522:	0309      	lsls	r1, r1, #12
10008524:	22e0      	movs	r2, #224	; 0xe0
10008526:	01d2      	lsls	r2, r2, #7
10008528:	4011      	ands	r1, r2
1000852a:	430b      	orrs	r3, r1
1000852c:	6003      	str	r3, [r0, #0]
1000852e:	1d2b      	adds	r3, r5, #4
10008530:	0029      	movs	r1, r5
10008532:	3124      	adds	r1, #36	; 0x24
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
		resource->callback[i] = NULL;
10008534:	2200      	movs	r2, #0
10008536:	c304      	stmia	r3!, {r2}
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_TOP << config->des.enable_proi_top) |
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
10008538:	428b      	cmp	r3, r1
1000853a:	d1fc      	bne.n	10008536 <dma_allocate+0x152>
		resource->callback[i] = NULL;
	}
	resource->callback_enable = 0;
1000853c:	2300      	movs	r3, #0
1000853e:	2224      	movs	r2, #36	; 0x24
10008540:	54ab      	strb	r3, [r5, r2]
	/* Set the channel */
	resource->channel_id = new_channel;
	/* Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
	
	resource->descriptor = NULL;
10008542:	62eb      	str	r3, [r5, #44]	; 0x2c

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
10008544:	782b      	ldrb	r3, [r5, #0]
10008546:	009b      	lsls	r3, r3, #2
10008548:	4a0f      	ldr	r2, [pc, #60]	; (10008588 <dma_allocate+0x1a4>)
1000854a:	509d      	str	r5, [r3, r2]

	return STATUS_OK;
1000854c:	2000      	movs	r0, #0
1000854e:	e003      	b.n	10008558 <dma_allocate+0x174>
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
		if (!(tmp & 0x00000001)) {
10008550:	079b      	lsls	r3, r3, #30
10008552:	d400      	bmi.n	10008556 <dma_allocate+0x172>
10008554:	e767      	b.n	10008426 <dma_allocate+0x42>
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
10008556:	2014      	movs	r0, #20

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

	return STATUS_OK;
10008558:	bd70      	pop	{r4, r5, r6, pc}
1000855a:	46c0      	nop			; (mov r8, r8)
1000855c:	10012358 	.word	0x10012358
10008560:	10009181 	.word	0x10009181
10008564:	4000b000 	.word	0x4000b000
10008568:	e0ffffff 	.word	0xe0ffffff
1000856c:	10008185 	.word	0x10008185
10008570:	100095e9 	.word	0x100095e9
10008574:	40002010 	.word	0x40002010
10008578:	40002014 	.word	0x40002014
1000857c:	40002018 	.word	0x40002018
10008580:	40002020 	.word	0x40002020
10008584:	40002838 	.word	0x40002838
10008588:	100123f0 	.word	0x100123f0

1000858c <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
1000858c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000858e:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
10008590:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
10008592:	884e      	ldrh	r6, [r1, #2]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2C *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008594:	2428      	movs	r4, #40	; 0x28
10008596:	5d13      	ldrb	r3, [r2, r4]
10008598:	07db      	lsls	r3, r3, #31
1000859a:	d4fc      	bmi.n	10008596 <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
1000859c:	2301      	movs	r3, #1
1000859e:	2434      	movs	r4, #52	; 0x34
100085a0:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_1;
100085a2:	3c14      	subs	r4, #20
100085a4:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100085a6:	880b      	ldrh	r3, [r1, #0]
100085a8:	005b      	lsls	r3, r3, #1
100085aa:	34e0      	adds	r4, #224	; 0xe0
100085ac:	4323      	orrs	r3, r4
100085ae:	b29b      	uxth	r3, r3
100085b0:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2C *const i2c_module = (module->hw);
	uint16_t counter = 0;
100085b2:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100085b4:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100085b6:	7a13      	ldrb	r3, [r2, #8]
100085b8:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100085ba:	421d      	tst	r5, r3
100085bc:	d004      	beq.n	100085c8 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100085be:	1c67      	adds	r7, r4, #1
100085c0:	6848      	ldr	r0, [r1, #4]
100085c2:	5d04      	ldrb	r4, [r0, r4]
100085c4:	8014      	strh	r4, [r2, #0]
100085c6:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100085c8:	42b4      	cmp	r4, r6
100085ca:	d3f4      	bcc.n	100085b6 <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100085cc:	06db      	lsls	r3, r3, #27
100085ce:	d403      	bmi.n	100085d8 <_i2c_master_write_packet+0x4c>
100085d0:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100085d2:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100085d4:	420b      	tst	r3, r1
100085d6:	d0fc      	beq.n	100085d2 <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100085d8:	4663      	mov	r3, ip
100085da:	795b      	ldrb	r3, [r3, #5]
100085dc:	2b00      	cmp	r3, #0
100085de:	d102      	bne.n	100085e6 <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
100085e0:	2100      	movs	r1, #0
100085e2:	3320      	adds	r3, #32
100085e4:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100085e6:	2000      	movs	r0, #0
100085e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100085ea:	46c0      	nop			; (mov r8, r8)

100085ec <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
100085ec:	2303      	movs	r3, #3
100085ee:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
100085f0:	330d      	adds	r3, #13
100085f2:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8_MUX2_I2C0_SDA;
100085f4:	3b08      	subs	r3, #8
100085f6:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9_MUX2_I2C0_SCL;
100085f8:	3301      	adds	r3, #1
100085fa:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_MUX2_I2C0_SDA;
100085fc:	3b07      	subs	r3, #7
100085fe:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_MUX2_I2C0_SCL;
10008600:	6103      	str	r3, [r0, #16]
}
10008602:	4770      	bx	lr

10008604 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2C *const hw,
		const struct i2c_master_config *const config)
{
10008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008606:	0004      	movs	r4, r0
10008608:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
1000860a:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
1000860c:	2800      	cmp	r0, #0
1000860e:	d056      	beq.n	100086be <i2c_master_init+0xba>
10008610:	2a00      	cmp	r2, #0
10008612:	d056      	beq.n	100086c2 <i2c_master_init+0xbe>
10008614:	2228      	movs	r2, #40	; 0x28
10008616:	5c8b      	ldrb	r3, [r1, r2]
10008618:	07db      	lsls	r3, r3, #31
1000861a:	d4fc      	bmi.n	10008616 <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2C *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
1000861c:	2300      	movs	r3, #0
1000861e:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008620:	6823      	ldr	r3, [r4, #0]
10008622:	4a29      	ldr	r2, [pc, #164]	; (100086c8 <i2c_master_init+0xc4>)
10008624:	4293      	cmp	r3, r2
10008626:	d103      	bne.n	10008630 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008628:	2003      	movs	r0, #3
1000862a:	4b28      	ldr	r3, [pc, #160]	; (100086cc <i2c_master_init+0xc8>)
1000862c:	4798      	blx	r3
1000862e:	e006      	b.n	1000863e <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008630:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
10008632:	4a27      	ldr	r2, [pc, #156]	; (100086d0 <i2c_master_init+0xcc>)
10008634:	4293      	cmp	r3, r2
10008636:	d145      	bne.n	100086c4 <i2c_master_init+0xc0>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008638:	3002      	adds	r0, #2
1000863a:	4b24      	ldr	r3, [pc, #144]	; (100086cc <i2c_master_init+0xc8>)
1000863c:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Initialize values in module. */
	module->registered_callback = 0;
1000863e:	2300      	movs	r3, #0
10008640:	7423      	strb	r3, [r4, #16]
	module->enabled_callback    = 0;
10008642:	7463      	strb	r3, [r4, #17]
	module->buffer_length       = 0;
10008644:	8263      	strh	r3, [r4, #18]
	module->buffer_remaining    = 0;
10008646:	82a3      	strh	r3, [r4, #20]
	module->status              = STATUS_OK;
10008648:	2200      	movs	r2, #0
1000864a:	7762      	strb	r2, [r4, #29]
	module->buffer              = NULL;
1000864c:	61a3      	str	r3, [r4, #24]

	_i2c_instances = (void*)module;
1000864e:	4b21      	ldr	r3, [pc, #132]	; (100086d4 <i2c_master_init+0xd0>)
10008650:	601c      	str	r4, [r3, #0]
	if (module->hw == I2C0) {
10008652:	6823      	ldr	r3, [r4, #0]
10008654:	4a1c      	ldr	r2, [pc, #112]	; (100086c8 <i2c_master_init+0xc4>)
10008656:	4293      	cmp	r3, r2
10008658:	d10f      	bne.n	1000867a <i2c_master_init+0x76>
		system_register_isr(RAM_ISR_TABLE_I2CRX0_INDEX, (uint32_t)_i2c_master_isr_handler);
1000865a:	4f1f      	ldr	r7, [pc, #124]	; (100086d8 <i2c_master_init+0xd4>)
1000865c:	0039      	movs	r1, r7
1000865e:	2018      	movs	r0, #24
10008660:	4e1e      	ldr	r6, [pc, #120]	; (100086dc <i2c_master_init+0xd8>)
10008662:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX0_INDEX, (uint32_t)_i2c_master_isr_handler);
10008664:	0039      	movs	r1, r7
10008666:	2019      	movs	r0, #25
10008668:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000866a:	4b1d      	ldr	r3, [pc, #116]	; (100086e0 <i2c_master_init+0xdc>)
1000866c:	2280      	movs	r2, #128	; 0x80
1000866e:	0052      	lsls	r2, r2, #1
10008670:	601a      	str	r2, [r3, #0]
10008672:	3201      	adds	r2, #1
10008674:	32ff      	adds	r2, #255	; 0xff
10008676:	601a      	str	r2, [r3, #0]
10008678:	e011      	b.n	1000869e <i2c_master_init+0x9a>
		NVIC_EnableIRQ(I2C0_RX_IRQn);
		NVIC_EnableIRQ(I2C0_TX_IRQn);
	} else if (module->hw == I2C1) {
1000867a:	4a15      	ldr	r2, [pc, #84]	; (100086d0 <i2c_master_init+0xcc>)
1000867c:	4293      	cmp	r3, r2
1000867e:	d10e      	bne.n	1000869e <i2c_master_init+0x9a>
		system_register_isr(RAM_ISR_TABLE_I2CRX1_INDEX, (uint32_t)_i2c_master_isr_handler);
10008680:	4f15      	ldr	r7, [pc, #84]	; (100086d8 <i2c_master_init+0xd4>)
10008682:	0039      	movs	r1, r7
10008684:	201a      	movs	r0, #26
10008686:	4e15      	ldr	r6, [pc, #84]	; (100086dc <i2c_master_init+0xd8>)
10008688:	47b0      	blx	r6
		system_register_isr(RAM_ISR_TABLE_I2CTX1_INDEX, (uint32_t)_i2c_master_isr_handler);
1000868a:	0039      	movs	r1, r7
1000868c:	201b      	movs	r0, #27
1000868e:	47b0      	blx	r6
10008690:	4b13      	ldr	r3, [pc, #76]	; (100086e0 <i2c_master_init+0xdc>)
10008692:	2280      	movs	r2, #128	; 0x80
10008694:	00d2      	lsls	r2, r2, #3
10008696:	601a      	str	r2, [r3, #0]
10008698:	2280      	movs	r2, #128	; 0x80
1000869a:	0112      	lsls	r2, r2, #4
1000869c:	601a      	str	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2C *const i2c_module = (module->hw);
1000869e:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100086a0:	8929      	ldrh	r1, [r5, #8]
100086a2:	7928      	ldrb	r0, [r5, #4]
100086a4:	4e0f      	ldr	r6, [pc, #60]	; (100086e4 <i2c_master_init+0xe0>)
100086a6:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100086a8:	8a29      	ldrh	r1, [r5, #16]
100086aa:	7b28      	ldrb	r0, [r5, #12]
100086ac:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100086ae:	782b      	ldrb	r3, [r5, #0]
100086b0:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
100086b2:	886b      	ldrh	r3, [r5, #2]
100086b4:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_I2C_MASTER_MODE_MASTER_ENABLE_1;
100086b6:	2301      	movs	r3, #1
100086b8:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
100086ba:	2000      	movs	r0, #0
100086bc:	e002      	b.n	100086c4 <i2c_master_init+0xc0>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
100086be:	2017      	movs	r0, #23
100086c0:	e000      	b.n	100086c4 <i2c_master_init+0xc0>
100086c2:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
100086c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100086c6:	46c0      	nop			; (mov r8, r8)
100086c8:	40003000 	.word	0x40003000
100086cc:	10009181 	.word	0x10009181
100086d0:	40003400 	.word	0x40003400
100086d4:	10013ed0 	.word	0x10013ed0
100086d8:	10008719 	.word	0x10008719
100086dc:	100095e9 	.word	0x100095e9
100086e0:	e000e100 	.word	0xe000e100
100086e4:	10008c49 	.word	0x10008c49

100086e8 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100086e8:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100086ea:	2800      	cmp	r0, #0
100086ec:	d00c      	beq.n	10008708 <i2c_master_write_packet_wait+0x20>
100086ee:	2900      	cmp	r1, #0
100086f0:	d00c      	beq.n	1000870c <i2c_master_write_packet_wait+0x24>
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100086f2:	8a82      	ldrh	r2, [r0, #20]
100086f4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
100086f6:	2305      	movs	r3, #5
	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
	}
#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
100086f8:	2a00      	cmp	r2, #0
100086fa:	d108      	bne.n	1000870e <i2c_master_write_packet_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100086fc:	2300      	movs	r3, #0
100086fe:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
10008700:	4b04      	ldr	r3, [pc, #16]	; (10008714 <i2c_master_write_packet_wait+0x2c>)
10008702:	4798      	blx	r3
10008704:	0003      	movs	r3, r0
10008706:	e002      	b.n	1000870e <i2c_master_write_packet_wait+0x26>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
10008708:	2317      	movs	r3, #23
1000870a:	e000      	b.n	1000870e <i2c_master_write_packet_wait+0x26>
1000870c:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
1000870e:	0018      	movs	r0, r3
10008710:	bd10      	pop	{r4, pc}
10008712:	46c0      	nop			; (mov r8, r8)
10008714:	1000858d 	.word	0x1000858d

10008718 <_i2c_master_isr_handler>:

/**
 * Interrupt handler for I<SUP>2</SUP>C master.
 */
void _i2c_master_isr_handler(void)
{
10008718:	b570      	push	{r4, r5, r6, lr}
1000871a:	b082      	sub	sp, #8
	/* Get software module for callback handling */
	struct i2c_master_module *module =
1000871c:	4b57      	ldr	r3, [pc, #348]	; (1000887c <_i2c_master_isr_handler+0x164>)
1000871e:	681c      	ldr	r4, [r3, #0]
			(struct i2c_master_module*)_i2c_instances;

	Assert(module);

	I2C *const i2c_module = module->hw;
10008720:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
10008722:	7c63      	ldrb	r3, [r4, #17]
			module->registered_callback;
10008724:	7c25      	ldrb	r5, [r4, #16]
	Assert(module);

	I2C *const i2c_module = module->hw;

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback &
10008726:	401d      	ands	r5, r3
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
10008728:	8a63      	ldrh	r3, [r4, #18]
1000872a:	b29b      	uxth	r3, r3
1000872c:	2b00      	cmp	r3, #0
1000872e:	d107      	bne.n	10008740 <_i2c_master_isr_handler+0x28>
10008730:	8aa3      	ldrh	r3, [r4, #20]
10008732:	b29b      	uxth	r3, r3
10008734:	2b00      	cmp	r3, #0
10008736:	d003      	beq.n	10008740 <_i2c_master_isr_handler+0x28>
		module->buffer_length = module->buffer_remaining;
10008738:	8aa3      	ldrh	r3, [r4, #20]
1000873a:	b29b      	uxth	r3, r3
1000873c:	8263      	strh	r3, [r4, #18]
1000873e:	e04e      	b.n	100087de <_i2c_master_isr_handler+0xc6>
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
10008740:	8a63      	ldrh	r3, [r4, #18]
10008742:	b29b      	uxth	r3, r3
10008744:	2b00      	cmp	r3, #0
10008746:	d019      	beq.n	1000877c <_i2c_master_isr_handler+0x64>
10008748:	8aa3      	ldrh	r3, [r4, #20]
1000874a:	b29b      	uxth	r3, r3
1000874c:	2b00      	cmp	r3, #0
1000874e:	d115      	bne.n	1000877c <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
10008750:	7f63      	ldrb	r3, [r4, #29]
			module->registered_callback;

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
10008752:	2b05      	cmp	r3, #5
10008754:	d112      	bne.n	1000877c <_i2c_master_isr_handler+0x64>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
10008756:	7f23      	ldrb	r3, [r4, #28]

	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		module->buffer_length = module->buffer_remaining;
	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
10008758:	2b00      	cmp	r3, #0
1000875a:	d10f      	bne.n	1000877c <_i2c_master_isr_handler+0x64>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Disable write interrupt flag */
		i2c_module->TX_INTERRUPT_MASK.reg = 0;
1000875c:	222c      	movs	r2, #44	; 0x2c
1000875e:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
10008760:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
10008762:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
10008764:	7963      	ldrb	r3, [r4, #5]
10008766:	2b00      	cmp	r3, #0
10008768:	d102      	bne.n	10008770 <_i2c_master_isr_handler+0x58>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000876a:	2200      	movs	r2, #0
1000876c:	3320      	adds	r3, #32
1000876e:	54f2      	strb	r2, [r6, r3]
		} 

		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
10008770:	07eb      	lsls	r3, r5, #31
10008772:	d534      	bpl.n	100087de <_i2c_master_isr_handler+0xc6>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
10008774:	68a3      	ldr	r3, [r4, #8]
10008776:	0020      	movs	r0, r4
10008778:	4798      	blx	r3
1000877a:	e030      	b.n	100087de <_i2c_master_isr_handler+0xc6>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
1000877c:	8a63      	ldrh	r3, [r4, #18]
1000877e:	b29b      	uxth	r3, r3
10008780:	2b00      	cmp	r3, #0
10008782:	d02c      	beq.n	100087de <_i2c_master_isr_handler+0xc6>
10008784:	8aa3      	ldrh	r3, [r4, #20]
10008786:	b29b      	uxth	r3, r3
10008788:	2b00      	cmp	r3, #0
1000878a:	d028      	beq.n	100087de <_i2c_master_isr_handler+0xc6>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
1000878c:	7f23      	ldrb	r3, [r4, #28]
1000878e:	2b00      	cmp	r3, #0
10008790:	d117      	bne.n	100087c2 <_i2c_master_isr_handler+0xaa>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to get next byte in buffer */
	volatile uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
10008792:	8a63      	ldrh	r3, [r4, #18]
10008794:	8aa2      	ldrh	r2, [r4, #20]
10008796:	1a9b      	subs	r3, r3, r2
10008798:	b29b      	uxth	r3, r3
1000879a:	466a      	mov	r2, sp
1000879c:	80d3      	strh	r3, [r2, #6]

	module->buffer_remaining--;
1000879e:	8aa3      	ldrh	r3, [r4, #20]
100087a0:	3b01      	subs	r3, #1
100087a2:	b29b      	uxth	r3, r3
100087a4:	82a3      	strh	r3, [r4, #20]

	/* Write byte from buffer to slave */
	i2c_module->TRANSMIT_DATA.reg = module->buffer[buffer_index];
100087a6:	88d3      	ldrh	r3, [r2, #6]
100087a8:	69a2      	ldr	r2, [r4, #24]
100087aa:	4694      	mov	ip, r2
100087ac:	4463      	add	r3, ip
100087ae:	781b      	ldrb	r3, [r3, #0]
100087b0:	8033      	strh	r3, [r6, #0]
	
	if (module->buffer_remaining <= 0) {
100087b2:	8aa3      	ldrh	r3, [r4, #20]
100087b4:	b29b      	uxth	r3, r3
100087b6:	2b00      	cmp	r3, #0
100087b8:	d111      	bne.n	100087de <_i2c_master_isr_handler+0xc6>
		i2c_module->TX_INTERRUPT_MASK.reg = I2C_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
100087ba:	2210      	movs	r2, #16
100087bc:	332c      	adds	r3, #44	; 0x2c
100087be:	54f2      	strb	r2, [r6, r3]
100087c0:	e00d      	b.n	100087de <_i2c_master_isr_handler+0xc6>
	Assert(module->hw);

	I2C *const i2c_module = module->hw;

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length - module->buffer_remaining;
100087c2:	8a63      	ldrh	r3, [r4, #18]
100087c4:	8aa1      	ldrh	r1, [r4, #20]

	module->buffer_remaining--;
100087c6:	8aa2      	ldrh	r2, [r4, #20]
100087c8:	3a01      	subs	r2, #1
100087ca:	b292      	uxth	r2, r2
100087cc:	82a2      	strh	r2, [r4, #20]

	module->buffer[buffer_index] = i2c_module->RECEIVE_DATA.reg;
100087ce:	1a5b      	subs	r3, r3, r1
100087d0:	b29b      	uxth	r3, r3
100087d2:	69a2      	ldr	r2, [r4, #24]
100087d4:	4694      	mov	ip, r2
100087d6:	4463      	add	r3, ip
100087d8:	7932      	ldrb	r2, [r6, #4]
100087da:	b2d2      	uxtb	r2, r2
100087dc:	701a      	strb	r2, [r3, #0]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100087de:	8a63      	ldrh	r3, [r4, #18]
100087e0:	b29b      	uxth	r3, r3
100087e2:	2b00      	cmp	r3, #0
100087e4:	d01c      	beq.n	10008820 <_i2c_master_isr_handler+0x108>
100087e6:	8aa3      	ldrh	r3, [r4, #20]
100087e8:	b29b      	uxth	r3, r3
100087ea:	2b00      	cmp	r3, #0
100087ec:	d118      	bne.n	10008820 <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
100087ee:	7f63      	ldrb	r3, [r4, #29]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
100087f0:	2b05      	cmp	r3, #5
100087f2:	d115      	bne.n	10008820 <_i2c_master_isr_handler+0x108>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
100087f4:	7f23      	ldrb	r3, [r4, #28]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
100087f6:	2b01      	cmp	r3, #1
100087f8:	d112      	bne.n	10008820 <_i2c_master_isr_handler+0x108>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		/* Disable read interrupt flag */
		i2c_module->RX_INTERRUPT_MASK.reg = 0;
100087fa:	2300      	movs	r3, #0
100087fc:	2230      	movs	r2, #48	; 0x30
100087fe:	54b3      	strb	r3, [r6, r2]

		module->buffer_length = 0;
10008800:	8263      	strh	r3, [r4, #18]
		module->status        = STATUS_OK;
10008802:	7763      	strb	r3, [r4, #29]

		if (!module->no_stop) {
10008804:	7963      	ldrb	r3, [r4, #5]
10008806:	2b00      	cmp	r3, #0
10008808:	d102      	bne.n	10008810 <_i2c_master_isr_handler+0xf8>
			/* Send stop condition */
			i2c_module->I2C_ONBUS.reg = I2C_I2C_ONBUS_ONBUS_ENABLE_0;
1000880a:	2200      	movs	r2, #0
1000880c:	3320      	adds	r3, #32
1000880e:	54f2      	strb	r2, [r6, r3]
		}
		
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
10008810:	07ab      	lsls	r3, r5, #30
10008812:	d505      	bpl.n	10008820 <_i2c_master_isr_handler+0x108>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
10008814:	7f23      	ldrb	r3, [r4, #28]
10008816:	2b01      	cmp	r3, #1
10008818:	d102      	bne.n	10008820 <_i2c_master_isr_handler+0x108>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
1000881a:	68e3      	ldr	r3, [r4, #12]
1000881c:	0020      	movs	r0, r4
1000881e:	4798      	blx	r3
		}
	}
	if (module->transfer_direction == I2C_TRANSFER_READ) {
10008820:	7f23      	ldrb	r3, [r4, #28]
10008822:	2b01      	cmp	r3, #1
10008824:	d114      	bne.n	10008850 <_i2c_master_isr_handler+0x138>
		if (module->hw == I2C0) {
10008826:	6823      	ldr	r3, [r4, #0]
10008828:	4a15      	ldr	r2, [pc, #84]	; (10008880 <_i2c_master_isr_handler+0x168>)
1000882a:	4293      	cmp	r3, r2
1000882c:	d106      	bne.n	1000883c <_i2c_master_isr_handler+0x124>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000882e:	2180      	movs	r1, #128	; 0x80
10008830:	0049      	lsls	r1, r1, #1
10008832:	23c0      	movs	r3, #192	; 0xc0
10008834:	005b      	lsls	r3, r3, #1
10008836:	4a13      	ldr	r2, [pc, #76]	; (10008884 <_i2c_master_isr_handler+0x16c>)
10008838:	50d1      	str	r1, [r2, r3]
1000883a:	e01d      	b.n	10008878 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_RX_IRQn);
		} else if (module->hw == I2C1) {
1000883c:	4a12      	ldr	r2, [pc, #72]	; (10008888 <_i2c_master_isr_handler+0x170>)
1000883e:	4293      	cmp	r3, r2
10008840:	d11a      	bne.n	10008878 <_i2c_master_isr_handler+0x160>
10008842:	2180      	movs	r1, #128	; 0x80
10008844:	00c9      	lsls	r1, r1, #3
10008846:	23c0      	movs	r3, #192	; 0xc0
10008848:	005b      	lsls	r3, r3, #1
1000884a:	4a0e      	ldr	r2, [pc, #56]	; (10008884 <_i2c_master_isr_handler+0x16c>)
1000884c:	50d1      	str	r1, [r2, r3]
1000884e:	e013      	b.n	10008878 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C1_RX_IRQn);
		} 
	} else {
		if (module->hw == I2C0) {
10008850:	6823      	ldr	r3, [r4, #0]
10008852:	4a0b      	ldr	r2, [pc, #44]	; (10008880 <_i2c_master_isr_handler+0x168>)
10008854:	4293      	cmp	r3, r2
10008856:	d106      	bne.n	10008866 <_i2c_master_isr_handler+0x14e>
10008858:	2180      	movs	r1, #128	; 0x80
1000885a:	0089      	lsls	r1, r1, #2
1000885c:	23c0      	movs	r3, #192	; 0xc0
1000885e:	005b      	lsls	r3, r3, #1
10008860:	4a08      	ldr	r2, [pc, #32]	; (10008884 <_i2c_master_isr_handler+0x16c>)
10008862:	50d1      	str	r1, [r2, r3]
10008864:	e008      	b.n	10008878 <_i2c_master_isr_handler+0x160>
			NVIC_ClearPendingIRQ(I2C0_TX_IRQn);
		} else if (module->hw == I2C1) {
10008866:	4a08      	ldr	r2, [pc, #32]	; (10008888 <_i2c_master_isr_handler+0x170>)
10008868:	4293      	cmp	r3, r2
1000886a:	d105      	bne.n	10008878 <_i2c_master_isr_handler+0x160>
1000886c:	2180      	movs	r1, #128	; 0x80
1000886e:	0109      	lsls	r1, r1, #4
10008870:	23c0      	movs	r3, #192	; 0xc0
10008872:	005b      	lsls	r3, r3, #1
10008874:	4a03      	ldr	r2, [pc, #12]	; (10008884 <_i2c_master_isr_handler+0x16c>)
10008876:	50d1      	str	r1, [r2, r3]
			NVIC_ClearPendingIRQ(I2C1_TX_IRQn);
		}
	}
}
10008878:	b002      	add	sp, #8
1000887a:	bd70      	pop	{r4, r5, r6, pc}
1000887c:	10013ed0 	.word	0x10013ed0
10008880:	40003000 	.word	0x40003000
10008884:	e000e100 	.word	0xe000e100
10008888:	40003400 	.word	0x40003400

1000888c <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000888c:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000888e:	4b0d      	ldr	r3, [pc, #52]	; (100088c4 <dualtimer_isr_handler+0x38>)
10008890:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10008892:	2b00      	cmp	r3, #0
10008894:	d007      	beq.n	100088a6 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008896:	2201      	movs	r2, #1
10008898:	4b0a      	ldr	r3, [pc, #40]	; (100088c4 <dualtimer_isr_handler+0x38>)
1000889a:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000889c:	4b0a      	ldr	r3, [pc, #40]	; (100088c8 <dualtimer_isr_handler+0x3c>)
1000889e:	681b      	ldr	r3, [r3, #0]
100088a0:	2b00      	cmp	r3, #0
100088a2:	d000      	beq.n	100088a6 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
100088a4:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
100088a6:	2334      	movs	r3, #52	; 0x34
100088a8:	4a06      	ldr	r2, [pc, #24]	; (100088c4 <dualtimer_isr_handler+0x38>)
100088aa:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
100088ac:	2b00      	cmp	r3, #0
100088ae:	d007      	beq.n	100088c0 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
100088b0:	2101      	movs	r1, #1
100088b2:	232c      	movs	r3, #44	; 0x2c
100088b4:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
100088b6:	4b05      	ldr	r3, [pc, #20]	; (100088cc <dualtimer_isr_handler+0x40>)
100088b8:	681b      	ldr	r3, [r3, #0]
100088ba:	2b00      	cmp	r3, #0
100088bc:	d000      	beq.n	100088c0 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
100088be:	4798      	blx	r3
	}
}
100088c0:	bd10      	pop	{r4, pc}
100088c2:	46c0      	nop			; (mov r8, r8)
100088c4:	40001000 	.word	0x40001000
100088c8:	100123f8 	.word	0x100123f8
100088cc:	100123fc 	.word	0x100123fc

100088d0 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
100088d0:	2301      	movs	r3, #1
100088d2:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
100088d4:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
100088d6:	2202      	movs	r2, #2
100088d8:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
100088da:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100088dc:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
100088de:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100088e0:	2200      	movs	r2, #0
100088e2:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
100088e4:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
100088e6:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
100088e8:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
100088ea:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
100088ec:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
100088ee:	7602      	strb	r2, [r0, #24]
}
100088f0:	4770      	bx	lr
100088f2:	46c0      	nop			; (mov r8, r8)

100088f4 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
100088f4:	2800      	cmp	r0, #0
100088f6:	d107      	bne.n	10008908 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
100088f8:	2900      	cmp	r1, #0
100088fa:	d102      	bne.n	10008902 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
100088fc:	4b06      	ldr	r3, [pc, #24]	; (10008918 <dualtimer_set_counter+0x24>)
100088fe:	601a      	str	r2, [r3, #0]
10008900:	e009      	b.n	10008916 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10008902:	4b05      	ldr	r3, [pc, #20]	; (10008918 <dualtimer_set_counter+0x24>)
10008904:	619a      	str	r2, [r3, #24]
10008906:	e006      	b.n	10008916 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008908:	2900      	cmp	r1, #0
1000890a:	d102      	bne.n	10008912 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000890c:	4b02      	ldr	r3, [pc, #8]	; (10008918 <dualtimer_set_counter+0x24>)
1000890e:	621a      	str	r2, [r3, #32]
10008910:	e001      	b.n	10008916 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10008912:	4b01      	ldr	r3, [pc, #4]	; (10008918 <dualtimer_set_counter+0x24>)
10008914:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008916:	4770      	bx	lr
10008918:	40001000 	.word	0x40001000

1000891c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000891c:	2800      	cmp	r0, #0
1000891e:	d105      	bne.n	1000892c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008920:	4a06      	ldr	r2, [pc, #24]	; (1000893c <dualtimer_enable+0x20>)
10008922:	7a11      	ldrb	r1, [r2, #8]
10008924:	2380      	movs	r3, #128	; 0x80
10008926:	430b      	orrs	r3, r1
10008928:	7213      	strb	r3, [r2, #8]
1000892a:	e005      	b.n	10008938 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000892c:	4903      	ldr	r1, [pc, #12]	; (1000893c <dualtimer_enable+0x20>)
1000892e:	2228      	movs	r2, #40	; 0x28
10008930:	5c88      	ldrb	r0, [r1, r2]
10008932:	2380      	movs	r3, #128	; 0x80
10008934:	4303      	orrs	r3, r0
10008936:	548b      	strb	r3, [r1, r2]
	}
}
10008938:	4770      	bx	lr
1000893a:	46c0      	nop			; (mov r8, r8)
1000893c:	40001000 	.word	0x40001000

10008940 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008940:	2800      	cmp	r0, #0
10008942:	d105      	bne.n	10008950 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10008944:	4a06      	ldr	r2, [pc, #24]	; (10008960 <dualtimer_disable+0x20>)
10008946:	7a11      	ldrb	r1, [r2, #8]
10008948:	237f      	movs	r3, #127	; 0x7f
1000894a:	400b      	ands	r3, r1
1000894c:	7213      	strb	r3, [r2, #8]
1000894e:	e005      	b.n	1000895c <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10008950:	4903      	ldr	r1, [pc, #12]	; (10008960 <dualtimer_disable+0x20>)
10008952:	2228      	movs	r2, #40	; 0x28
10008954:	5c88      	ldrb	r0, [r1, r2]
10008956:	237f      	movs	r3, #127	; 0x7f
10008958:	4003      	ands	r3, r0
1000895a:	548b      	strb	r3, [r1, r2]
	}
}
1000895c:	4770      	bx	lr
1000895e:	46c0      	nop			; (mov r8, r8)
10008960:	40001000 	.word	0x40001000

10008964 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10008964:	b570      	push	{r4, r5, r6, lr}
10008966:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10008968:	2004      	movs	r0, #4
1000896a:	4b39      	ldr	r3, [pc, #228]	; (10008a50 <dualtimer_init+0xec>)
1000896c:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000896e:	7823      	ldrb	r3, [r4, #0]
10008970:	2b00      	cmp	r3, #0
10008972:	d102      	bne.n	1000897a <dualtimer_init+0x16>
10008974:	7b23      	ldrb	r3, [r4, #12]
10008976:	2b00      	cmp	r3, #0
10008978:	d065      	beq.n	10008a46 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000897a:	4936      	ldr	r1, [pc, #216]	; (10008a54 <dualtimer_init+0xf0>)
1000897c:	68ca      	ldr	r2, [r1, #12]
1000897e:	2320      	movs	r3, #32
10008980:	4313      	orrs	r3, r2
10008982:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
10008984:	7e22      	ldrb	r2, [r4, #24]
10008986:	698b      	ldr	r3, [r1, #24]
10008988:	2003      	movs	r0, #3
1000898a:	4002      	ands	r2, r0
1000898c:	0112      	lsls	r2, r2, #4
1000898e:	302d      	adds	r0, #45	; 0x2d
10008990:	4383      	bics	r3, r0
10008992:	4313      	orrs	r3, r2
10008994:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008996:	7823      	ldrb	r3, [r4, #0]
10008998:	2b00      	cmp	r3, #0
1000899a:	d026      	beq.n	100089ea <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000899c:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000899e:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100089a0:	2b00      	cmp	r3, #0
100089a2:	d003      	beq.n	100089ac <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
100089a4:	3b02      	subs	r3, #2
100089a6:	425d      	negs	r5, r3
100089a8:	415d      	adcs	r5, r3
100089aa:	01a9      	lsls	r1, r5, #6
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
100089ac:	78a2      	ldrb	r2, [r4, #2]
100089ae:	0052      	lsls	r2, r2, #1
100089b0:	2502      	movs	r5, #2
100089b2:	402a      	ands	r2, r5
100089b4:	78e3      	ldrb	r3, [r4, #3]
100089b6:	009b      	lsls	r3, r3, #2
100089b8:	350a      	adds	r5, #10
100089ba:	402b      	ands	r3, r5
100089bc:	431a      	orrs	r2, r3
100089be:	0015      	movs	r5, r2
100089c0:	430d      	orrs	r5, r1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
100089c2:	7923      	ldrb	r3, [r4, #4]
100089c4:	2b00      	cmp	r3, #0
100089c6:	d001      	beq.n	100089cc <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
100089c8:	2320      	movs	r3, #32
100089ca:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
100089cc:	4b22      	ldr	r3, [pc, #136]	; (10008a58 <dualtimer_init+0xf4>)
100089ce:	68a2      	ldr	r2, [r4, #8]
100089d0:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
100089d2:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
100089d4:	491f      	ldr	r1, [pc, #124]	; (10008a54 <dualtimer_init+0xf0>)
100089d6:	22c4      	movs	r2, #196	; 0xc4
100089d8:	0052      	lsls	r2, r2, #1
100089da:	5c88      	ldrb	r0, [r1, r2]
100089dc:	2301      	movs	r3, #1
100089de:	4303      	orrs	r3, r0
100089e0:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
100089e2:	2000      	movs	r0, #0
100089e4:	4b1d      	ldr	r3, [pc, #116]	; (10008a5c <dualtimer_init+0xf8>)
100089e6:	4798      	blx	r3
100089e8:	e000      	b.n	100089ec <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
100089ea:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
100089ec:	7b23      	ldrb	r3, [r4, #12]
100089ee:	2b00      	cmp	r3, #0
100089f0:	d029      	beq.n	10008a46 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
100089f2:	7b63      	ldrb	r3, [r4, #13]
100089f4:	2b00      	cmp	r3, #0
100089f6:	d005      	beq.n	10008a04 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
100089f8:	2b01      	cmp	r3, #1
100089fa:	d005      	beq.n	10008a08 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
100089fc:	2b02      	cmp	r3, #2
100089fe:	d104      	bne.n	10008a0a <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10008a00:	2540      	movs	r5, #64	; 0x40
10008a02:	e002      	b.n	10008a0a <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008a04:	2501      	movs	r5, #1
10008a06:	e000      	b.n	10008a0a <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008a08:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
10008a0a:	7ba3      	ldrb	r3, [r4, #14]
10008a0c:	005b      	lsls	r3, r3, #1
10008a0e:	2102      	movs	r1, #2
10008a10:	4019      	ands	r1, r3
10008a12:	7be2      	ldrb	r2, [r4, #15]
10008a14:	0092      	lsls	r2, r2, #2
10008a16:	230c      	movs	r3, #12
10008a18:	4013      	ands	r3, r2
10008a1a:	430b      	orrs	r3, r1
10008a1c:	431d      	orrs	r5, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10008a1e:	7c23      	ldrb	r3, [r4, #16]
10008a20:	2b00      	cmp	r3, #0
10008a22:	d001      	beq.n	10008a28 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10008a24:	2320      	movs	r3, #32
10008a26:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10008a28:	6962      	ldr	r2, [r4, #20]
10008a2a:	4b0b      	ldr	r3, [pc, #44]	; (10008a58 <dualtimer_init+0xf4>)
10008a2c:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10008a2e:	2228      	movs	r2, #40	; 0x28
10008a30:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
10008a32:	4908      	ldr	r1, [pc, #32]	; (10008a54 <dualtimer_init+0xf0>)
10008a34:	3261      	adds	r2, #97	; 0x61
10008a36:	32ff      	adds	r2, #255	; 0xff
10008a38:	5c88      	ldrb	r0, [r1, r2]
10008a3a:	2302      	movs	r3, #2
10008a3c:	4303      	orrs	r3, r0
10008a3e:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10008a40:	2001      	movs	r0, #1
10008a42:	4b06      	ldr	r3, [pc, #24]	; (10008a5c <dualtimer_init+0xf8>)
10008a44:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10008a46:	4906      	ldr	r1, [pc, #24]	; (10008a60 <dualtimer_init+0xfc>)
10008a48:	201e      	movs	r0, #30
10008a4a:	4b06      	ldr	r3, [pc, #24]	; (10008a64 <dualtimer_init+0x100>)
10008a4c:	4798      	blx	r3
}
10008a4e:	bd70      	pop	{r4, r5, r6, pc}
10008a50:	10009181 	.word	0x10009181
10008a54:	4000b000 	.word	0x4000b000
10008a58:	40001000 	.word	0x40001000
10008a5c:	1000891d 	.word	0x1000891d
10008a60:	1000888d 	.word	0x1000888d
10008a64:	100095e9 	.word	0x100095e9

10008a68 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10008a68:	2800      	cmp	r0, #0
10008a6a:	d102      	bne.n	10008a72 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10008a6c:	4b02      	ldr	r3, [pc, #8]	; (10008a78 <dualtimer_register_callback+0x10>)
10008a6e:	6019      	str	r1, [r3, #0]
10008a70:	e001      	b.n	10008a76 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10008a72:	4b02      	ldr	r3, [pc, #8]	; (10008a7c <dualtimer_register_callback+0x14>)
10008a74:	6019      	str	r1, [r3, #0]
	}
}
10008a76:	4770      	bx	lr
10008a78:	100123f8 	.word	0x100123f8
10008a7c:	100123fc 	.word	0x100123fc

10008a80 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10008a80:	2300      	movs	r3, #0
10008a82:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008a84:	2201      	movs	r2, #1
10008a86:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008a88:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008a8a:	70c3      	strb	r3, [r0, #3]
}
10008a8c:	4770      	bx	lr
10008a8e:	46c0      	nop			; (mov r8, r8)

10008a90 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10008a90:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10008a92:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008a94:	2801      	cmp	r0, #1
10008a96:	d800      	bhi.n	10008a9a <gpio_pin_set_config+0xa>
10008a98:	e0c8      	b.n	10008c2c <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008a9a:	2807      	cmp	r0, #7
10008a9c:	d809      	bhi.n	10008ab2 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008a9e:	4d64      	ldr	r5, [pc, #400]	; (10008c30 <gpio_pin_set_config+0x1a0>)
10008aa0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10008aa2:	3b10      	subs	r3, #16
10008aa4:	4003      	ands	r3, r0
10008aa6:	009b      	lsls	r3, r3, #2
10008aa8:	2407      	movs	r4, #7
10008aaa:	409c      	lsls	r4, r3
10008aac:	43a2      	bics	r2, r4
10008aae:	646a      	str	r2, [r5, #68]	; 0x44
10008ab0:	e029      	b.n	10008b06 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
10008ab2:	280f      	cmp	r0, #15
10008ab4:	d809      	bhi.n	10008aca <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008ab6:	4d5e      	ldr	r5, [pc, #376]	; (10008c30 <gpio_pin_set_config+0x1a0>)
10008ab8:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008aba:	2307      	movs	r3, #7
10008abc:	4003      	ands	r3, r0
10008abe:	009b      	lsls	r3, r3, #2
10008ac0:	2407      	movs	r4, #7
10008ac2:	409c      	lsls	r4, r3
10008ac4:	43a2      	bics	r2, r4
10008ac6:	64aa      	str	r2, [r5, #72]	; 0x48
10008ac8:	e01d      	b.n	10008b06 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10008aca:	2817      	cmp	r0, #23
10008acc:	d809      	bhi.n	10008ae2 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008ace:	4d58      	ldr	r5, [pc, #352]	; (10008c30 <gpio_pin_set_config+0x1a0>)
10008ad0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
10008ad2:	2307      	movs	r3, #7
10008ad4:	4003      	ands	r3, r0
10008ad6:	009b      	lsls	r3, r3, #2
10008ad8:	2407      	movs	r4, #7
10008ada:	409c      	lsls	r4, r3
10008adc:	43a2      	bics	r2, r4
10008ade:	64ea      	str	r2, [r5, #76]	; 0x4c
10008ae0:	e011      	b.n	10008b06 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
10008ae2:	0003      	movs	r3, r0
10008ae4:	3b2c      	subs	r3, #44	; 0x2c
10008ae6:	2b03      	cmp	r3, #3
10008ae8:	d80d      	bhi.n	10008b06 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10008aea:	4d52      	ldr	r5, [pc, #328]	; (10008c34 <gpio_pin_set_config+0x1a4>)
10008aec:	2482      	movs	r4, #130	; 0x82
10008aee:	00e4      	lsls	r4, r4, #3
10008af0:	5d2a      	ldrb	r2, [r5, r4]
10008af2:	0712      	lsls	r2, r2, #28
10008af4:	2601      	movs	r6, #1
10008af6:	409e      	lsls	r6, r3
10008af8:	0f12      	lsrs	r2, r2, #28
10008afa:	5d2b      	ldrb	r3, [r5, r4]
10008afc:	43b2      	bics	r2, r6
10008afe:	260f      	movs	r6, #15
10008b00:	43b3      	bics	r3, r6
10008b02:	4313      	orrs	r3, r2
10008b04:	552b      	strb	r3, [r5, r4]
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10008b06:	0003      	movs	r3, r0
10008b08:	3b1d      	subs	r3, #29
10008b0a:	2b02      	cmp	r3, #2
10008b0c:	d829      	bhi.n	10008b62 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10008b0e:	784b      	ldrb	r3, [r1, #1]
10008b10:	2b01      	cmp	r3, #1
10008b12:	d108      	bne.n	10008b26 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10008b14:	4d47      	ldr	r5, [pc, #284]	; (10008c34 <gpio_pin_set_config+0x1a4>)
10008b16:	7d2b      	ldrb	r3, [r5, #20]
10008b18:	241f      	movs	r4, #31
10008b1a:	1a24      	subs	r4, r4, r0
10008b1c:	2201      	movs	r2, #1
10008b1e:	40a2      	lsls	r2, r4
10008b20:	4393      	bics	r3, r2
10008b22:	752b      	strb	r3, [r5, #20]
10008b24:	e008      	b.n	10008b38 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10008b26:	4c43      	ldr	r4, [pc, #268]	; (10008c34 <gpio_pin_set_config+0x1a4>)
10008b28:	7d25      	ldrb	r5, [r4, #20]
10008b2a:	221f      	movs	r2, #31
10008b2c:	1a12      	subs	r2, r2, r0
10008b2e:	2301      	movs	r3, #1
10008b30:	4093      	lsls	r3, r2
10008b32:	432b      	orrs	r3, r5
10008b34:	b2db      	uxtb	r3, r3
10008b36:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008b38:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008b3a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10008b3c:	2a00      	cmp	r2, #0
10008b3e:	d075      	beq.n	10008c2c <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10008b40:	493c      	ldr	r1, [pc, #240]	; (10008c34 <gpio_pin_set_config+0x1a4>)
10008b42:	880c      	ldrh	r4, [r1, #0]
10008b44:	221f      	movs	r2, #31
10008b46:	1a10      	subs	r0, r2, r0
10008b48:	0080      	lsls	r0, r0, #2
10008b4a:	3301      	adds	r3, #1
10008b4c:	4083      	lsls	r3, r0
10008b4e:	4323      	orrs	r3, r4
10008b50:	b29b      	uxth	r3, r3
10008b52:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008b54:	4a38      	ldr	r2, [pc, #224]	; (10008c38 <gpio_pin_set_config+0x1a8>)
10008b56:	7811      	ldrb	r1, [r2, #0]
10008b58:	2302      	movs	r3, #2
10008b5a:	430b      	orrs	r3, r1
10008b5c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008b5e:	2300      	movs	r3, #0
10008b60:	e064      	b.n	10008c2c <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10008b62:	780a      	ldrb	r2, [r1, #0]
10008b64:	2a00      	cmp	r2, #0
10008b66:	d140      	bne.n	10008bea <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008b68:	280f      	cmp	r0, #15
10008b6a:	d808      	bhi.n	10008b7e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008b6c:	2301      	movs	r3, #1
10008b6e:	4083      	lsls	r3, r0
10008b70:	b29b      	uxth	r3, r3
10008b72:	4a32      	ldr	r2, [pc, #200]	; (10008c3c <gpio_pin_set_config+0x1ac>)
10008b74:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008b76:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008b78:	281f      	cmp	r0, #31
10008b7a:	d857      	bhi.n	10008c2c <gpio_pin_set_config+0x19c>
10008b7c:	e012      	b.n	10008ba4 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10008b7e:	281f      	cmp	r0, #31
10008b80:	d807      	bhi.n	10008b92 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008b82:	220f      	movs	r2, #15
10008b84:	4002      	ands	r2, r0
10008b86:	2301      	movs	r3, #1
10008b88:	4093      	lsls	r3, r2
10008b8a:	b29b      	uxth	r3, r3
10008b8c:	4a2c      	ldr	r2, [pc, #176]	; (10008c40 <gpio_pin_set_config+0x1b0>)
10008b8e:	8293      	strh	r3, [r2, #20]
10008b90:	e008      	b.n	10008ba4 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10008b92:	230f      	movs	r3, #15
10008b94:	4018      	ands	r0, r3
10008b96:	3b0e      	subs	r3, #14
10008b98:	4083      	lsls	r3, r0
10008b9a:	b29b      	uxth	r3, r3
10008b9c:	4a29      	ldr	r2, [pc, #164]	; (10008c44 <gpio_pin_set_config+0x1b4>)
10008b9e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008ba0:	2300      	movs	r3, #0
10008ba2:	e043      	b.n	10008c2c <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008ba4:	784b      	ldrb	r3, [r1, #1]
10008ba6:	2b01      	cmp	r3, #1
10008ba8:	d00c      	beq.n	10008bc4 <gpio_pin_set_config+0x134>
10008baa:	2b00      	cmp	r3, #0
10008bac:	d002      	beq.n	10008bb4 <gpio_pin_set_config+0x124>
10008bae:	2b02      	cmp	r3, #2
10008bb0:	d010      	beq.n	10008bd4 <gpio_pin_set_config+0x144>
10008bb2:	e03a      	b.n	10008c2a <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008bb4:	491e      	ldr	r1, [pc, #120]	; (10008c30 <gpio_pin_set_config+0x1a0>)
10008bb6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008bb8:	2301      	movs	r3, #1
10008bba:	4083      	lsls	r3, r0
10008bbc:	4313      	orrs	r3, r2
10008bbe:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008bc0:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10008bc2:	e033      	b.n	10008c2c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008bc4:	491a      	ldr	r1, [pc, #104]	; (10008c30 <gpio_pin_set_config+0x1a0>)
10008bc6:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008bc8:	2201      	movs	r2, #1
10008bca:	4082      	lsls	r2, r0
10008bcc:	4393      	bics	r3, r2
10008bce:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008bd0:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008bd2:	e02b      	b.n	10008c2c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10008bd4:	4b16      	ldr	r3, [pc, #88]	; (10008c30 <gpio_pin_set_config+0x1a0>)
10008bd6:	6d59      	ldr	r1, [r3, #84]	; 0x54
10008bd8:	2201      	movs	r2, #1
10008bda:	4082      	lsls	r2, r0
10008bdc:	4311      	orrs	r1, r2
10008bde:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008be0:	6d19      	ldr	r1, [r3, #80]	; 0x50
10008be2:	4391      	bics	r1, r2
10008be4:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008be6:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10008be8:	e020      	b.n	10008c2c <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008bea:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
10008bec:	2a01      	cmp	r2, #1
10008bee:	d11d      	bne.n	10008c2c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
10008bf0:	280f      	cmp	r0, #15
10008bf2:	d806      	bhi.n	10008c02 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
10008bf4:	3301      	adds	r3, #1
10008bf6:	4083      	lsls	r3, r0
10008bf8:	b29b      	uxth	r3, r3
10008bfa:	4a10      	ldr	r2, [pc, #64]	; (10008c3c <gpio_pin_set_config+0x1ac>)
10008bfc:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008bfe:	2300      	movs	r3, #0
10008c00:	e014      	b.n	10008c2c <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
10008c02:	281f      	cmp	r0, #31
10008c04:	d808      	bhi.n	10008c18 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
10008c06:	230f      	movs	r3, #15
10008c08:	4018      	ands	r0, r3
10008c0a:	3b0e      	subs	r3, #14
10008c0c:	4083      	lsls	r3, r0
10008c0e:	b29b      	uxth	r3, r3
10008c10:	4a0b      	ldr	r2, [pc, #44]	; (10008c40 <gpio_pin_set_config+0x1b0>)
10008c12:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008c14:	2300      	movs	r3, #0
10008c16:	e009      	b.n	10008c2c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
10008c18:	230f      	movs	r3, #15
10008c1a:	4018      	ands	r0, r3
10008c1c:	3b0e      	subs	r3, #14
10008c1e:	4083      	lsls	r3, r0
10008c20:	b29b      	uxth	r3, r3
10008c22:	4a08      	ldr	r2, [pc, #32]	; (10008c44 <gpio_pin_set_config+0x1b4>)
10008c24:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008c26:	2300      	movs	r3, #0
10008c28:	e000      	b.n	10008c2c <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
10008c2a:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
10008c2c:	0018      	movs	r0, r3
10008c2e:	bd70      	pop	{r4, r5, r6, pc}
10008c30:	4000b000 	.word	0x4000b000
10008c34:	4000f000 	.word	0x4000f000
10008c38:	4000e000 	.word	0x4000e000
10008c3c:	40010000 	.word	0x40010000
10008c40:	40011000 	.word	0x40011000
10008c44:	40013000 	.word	0x40013000

10008c48 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008c48:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008c4a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008c4c:	23ff      	movs	r3, #255	; 0xff
10008c4e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008c50:	2807      	cmp	r0, #7
10008c52:	d833      	bhi.n	10008cbc <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008c54:	4a4e      	ldr	r2, [pc, #312]	; (10008d90 <gpio_pinmux_cofiguration+0x148>)
10008c56:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008c58:	3bf8      	subs	r3, #248	; 0xf8
10008c5a:	4003      	ands	r3, r0
10008c5c:	009b      	lsls	r3, r3, #2
10008c5e:	2607      	movs	r6, #7
10008c60:	409e      	lsls	r6, r3
10008c62:	43b4      	bics	r4, r6
10008c64:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008c66:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008c68:	000e      	movs	r6, r1
10008c6a:	409e      	lsls	r6, r3
10008c6c:	0033      	movs	r3, r6
10008c6e:	4323      	orrs	r3, r4
10008c70:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008c72:	2901      	cmp	r1, #1
10008c74:	d000      	beq.n	10008c78 <gpio_pinmux_cofiguration+0x30>
10008c76:	e08a      	b.n	10008d8e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008c78:	2803      	cmp	r0, #3
10008c7a:	d80f      	bhi.n	10008c9c <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008c7c:	0011      	movs	r1, r2
10008c7e:	22d0      	movs	r2, #208	; 0xd0
10008c80:	0052      	lsls	r2, r2, #1
10008c82:	588c      	ldr	r4, [r1, r2]
10008c84:	2303      	movs	r3, #3
10008c86:	4018      	ands	r0, r3
10008c88:	00c0      	lsls	r0, r0, #3
10008c8a:	333c      	adds	r3, #60	; 0x3c
10008c8c:	4083      	lsls	r3, r0
10008c8e:	439c      	bics	r4, r3
10008c90:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008c92:	588b      	ldr	r3, [r1, r2]
10008c94:	4085      	lsls	r5, r0
10008c96:	431d      	orrs	r5, r3
10008c98:	508d      	str	r5, [r1, r2]
10008c9a:	e078      	b.n	10008d8e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008c9c:	493c      	ldr	r1, [pc, #240]	; (10008d90 <gpio_pinmux_cofiguration+0x148>)
10008c9e:	22d2      	movs	r2, #210	; 0xd2
10008ca0:	0052      	lsls	r2, r2, #1
10008ca2:	588c      	ldr	r4, [r1, r2]
10008ca4:	2303      	movs	r3, #3
10008ca6:	4018      	ands	r0, r3
10008ca8:	00c0      	lsls	r0, r0, #3
10008caa:	333c      	adds	r3, #60	; 0x3c
10008cac:	4083      	lsls	r3, r0
10008cae:	439c      	bics	r4, r3
10008cb0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008cb2:	588b      	ldr	r3, [r1, r2]
10008cb4:	4085      	lsls	r5, r0
10008cb6:	431d      	orrs	r5, r3
10008cb8:	508d      	str	r5, [r1, r2]
10008cba:	e068      	b.n	10008d8e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008cbc:	280f      	cmp	r0, #15
10008cbe:	d832      	bhi.n	10008d26 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008cc0:	4a33      	ldr	r2, [pc, #204]	; (10008d90 <gpio_pinmux_cofiguration+0x148>)
10008cc2:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008cc4:	2307      	movs	r3, #7
10008cc6:	4003      	ands	r3, r0
10008cc8:	009b      	lsls	r3, r3, #2
10008cca:	2607      	movs	r6, #7
10008ccc:	409e      	lsls	r6, r3
10008cce:	43b4      	bics	r4, r6
10008cd0:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008cd2:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008cd4:	000e      	movs	r6, r1
10008cd6:	409e      	lsls	r6, r3
10008cd8:	0033      	movs	r3, r6
10008cda:	4323      	orrs	r3, r4
10008cdc:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008cde:	2901      	cmp	r1, #1
10008ce0:	d155      	bne.n	10008d8e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008ce2:	280b      	cmp	r0, #11
10008ce4:	d80f      	bhi.n	10008d06 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008ce6:	0011      	movs	r1, r2
10008ce8:	22d4      	movs	r2, #212	; 0xd4
10008cea:	0052      	lsls	r2, r2, #1
10008cec:	588c      	ldr	r4, [r1, r2]
10008cee:	2303      	movs	r3, #3
10008cf0:	4018      	ands	r0, r3
10008cf2:	00c0      	lsls	r0, r0, #3
10008cf4:	333c      	adds	r3, #60	; 0x3c
10008cf6:	4083      	lsls	r3, r0
10008cf8:	439c      	bics	r4, r3
10008cfa:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008cfc:	588b      	ldr	r3, [r1, r2]
10008cfe:	4085      	lsls	r5, r0
10008d00:	431d      	orrs	r5, r3
10008d02:	508d      	str	r5, [r1, r2]
10008d04:	e043      	b.n	10008d8e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008d06:	4922      	ldr	r1, [pc, #136]	; (10008d90 <gpio_pinmux_cofiguration+0x148>)
10008d08:	22d6      	movs	r2, #214	; 0xd6
10008d0a:	0052      	lsls	r2, r2, #1
10008d0c:	588c      	ldr	r4, [r1, r2]
10008d0e:	2303      	movs	r3, #3
10008d10:	4018      	ands	r0, r3
10008d12:	00c0      	lsls	r0, r0, #3
10008d14:	333c      	adds	r3, #60	; 0x3c
10008d16:	4083      	lsls	r3, r0
10008d18:	439c      	bics	r4, r3
10008d1a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008d1c:	588b      	ldr	r3, [r1, r2]
10008d1e:	4085      	lsls	r5, r0
10008d20:	431d      	orrs	r5, r3
10008d22:	508d      	str	r5, [r1, r2]
10008d24:	e033      	b.n	10008d8e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10008d26:	2817      	cmp	r0, #23
10008d28:	d831      	bhi.n	10008d8e <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008d2a:	4a19      	ldr	r2, [pc, #100]	; (10008d90 <gpio_pinmux_cofiguration+0x148>)
10008d2c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008d2e:	2307      	movs	r3, #7
10008d30:	4003      	ands	r3, r0
10008d32:	009b      	lsls	r3, r3, #2
10008d34:	2607      	movs	r6, #7
10008d36:	409e      	lsls	r6, r3
10008d38:	43b4      	bics	r4, r6
10008d3a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008d3c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008d3e:	000e      	movs	r6, r1
10008d40:	409e      	lsls	r6, r3
10008d42:	0033      	movs	r3, r6
10008d44:	4323      	orrs	r3, r4
10008d46:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008d48:	2901      	cmp	r1, #1
10008d4a:	d120      	bne.n	10008d8e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008d4c:	2813      	cmp	r0, #19
10008d4e:	d80f      	bhi.n	10008d70 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008d50:	0011      	movs	r1, r2
10008d52:	22d8      	movs	r2, #216	; 0xd8
10008d54:	0052      	lsls	r2, r2, #1
10008d56:	588c      	ldr	r4, [r1, r2]
10008d58:	2303      	movs	r3, #3
10008d5a:	4018      	ands	r0, r3
10008d5c:	00c0      	lsls	r0, r0, #3
10008d5e:	333c      	adds	r3, #60	; 0x3c
10008d60:	4083      	lsls	r3, r0
10008d62:	439c      	bics	r4, r3
10008d64:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008d66:	588b      	ldr	r3, [r1, r2]
10008d68:	4085      	lsls	r5, r0
10008d6a:	431d      	orrs	r5, r3
10008d6c:	508d      	str	r5, [r1, r2]
10008d6e:	e00e      	b.n	10008d8e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008d70:	4a07      	ldr	r2, [pc, #28]	; (10008d90 <gpio_pinmux_cofiguration+0x148>)
10008d72:	23da      	movs	r3, #218	; 0xda
10008d74:	005b      	lsls	r3, r3, #1
10008d76:	58d1      	ldr	r1, [r2, r3]
10008d78:	2403      	movs	r4, #3
10008d7a:	4020      	ands	r0, r4
10008d7c:	00c0      	lsls	r0, r0, #3
10008d7e:	343c      	adds	r4, #60	; 0x3c
10008d80:	4084      	lsls	r4, r0
10008d82:	43a1      	bics	r1, r4
10008d84:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008d86:	58d1      	ldr	r1, [r2, r3]
10008d88:	4085      	lsls	r5, r0
10008d8a:	430d      	orrs	r5, r1
10008d8c:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008d8e:	bd70      	pop	{r4, r5, r6, pc}
10008d90:	4000b000 	.word	0x4000b000

10008d94 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008d94:	2801      	cmp	r0, #1
10008d96:	d00d      	beq.n	10008db4 <system_clock_config+0x20>
10008d98:	2800      	cmp	r0, #0
10008d9a:	d002      	beq.n	10008da2 <system_clock_config+0xe>
10008d9c:	2802      	cmp	r0, #2
10008d9e:	d01c      	beq.n	10008dda <system_clock_config+0x46>
10008da0:	e02e      	b.n	10008e00 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008da2:	4a18      	ldr	r2, [pc, #96]	; (10008e04 <system_clock_config+0x70>)
10008da4:	6990      	ldr	r0, [r2, #24]
10008da6:	230c      	movs	r3, #12
10008da8:	4303      	orrs	r3, r0
10008daa:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008dac:	4a16      	ldr	r2, [pc, #88]	; (10008e08 <system_clock_config+0x74>)
10008dae:	4b17      	ldr	r3, [pc, #92]	; (10008e0c <system_clock_config+0x78>)
10008db0:	601a      	str	r2, [r3, #0]
			break;
10008db2:	e01a      	b.n	10008dea <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008db4:	4b13      	ldr	r3, [pc, #76]	; (10008e04 <system_clock_config+0x70>)
10008db6:	6998      	ldr	r0, [r3, #24]
10008db8:	2208      	movs	r2, #8
10008dba:	4302      	orrs	r2, r0
10008dbc:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008dbe:	699a      	ldr	r2, [r3, #24]
10008dc0:	2004      	movs	r0, #4
10008dc2:	4382      	bics	r2, r0
10008dc4:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10008dc6:	4a12      	ldr	r2, [pc, #72]	; (10008e10 <system_clock_config+0x7c>)
10008dc8:	6853      	ldr	r3, [r2, #4]
10008dca:	2080      	movs	r0, #128	; 0x80
10008dcc:	0300      	lsls	r0, r0, #12
10008dce:	4303      	orrs	r3, r0
10008dd0:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008dd2:	4a10      	ldr	r2, [pc, #64]	; (10008e14 <system_clock_config+0x80>)
10008dd4:	4b0d      	ldr	r3, [pc, #52]	; (10008e0c <system_clock_config+0x78>)
10008dd6:	601a      	str	r2, [r3, #0]
			break;
10008dd8:	e007      	b.n	10008dea <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008dda:	4a0a      	ldr	r2, [pc, #40]	; (10008e04 <system_clock_config+0x70>)
10008ddc:	6993      	ldr	r3, [r2, #24]
10008dde:	200c      	movs	r0, #12
10008de0:	4383      	bics	r3, r0
10008de2:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008de4:	4a08      	ldr	r2, [pc, #32]	; (10008e08 <system_clock_config+0x74>)
10008de6:	4b09      	ldr	r3, [pc, #36]	; (10008e0c <system_clock_config+0x78>)
10008de8:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008dea:	4b06      	ldr	r3, [pc, #24]	; (10008e04 <system_clock_config+0x70>)
10008dec:	699a      	ldr	r2, [r3, #24]
10008dee:	2003      	movs	r0, #3
10008df0:	4382      	bics	r2, r0
10008df2:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008df4:	699a      	ldr	r2, [r3, #24]
10008df6:	4001      	ands	r1, r0
10008df8:	4311      	orrs	r1, r2
10008dfa:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008dfc:	2000      	movs	r0, #0
10008dfe:	e000      	b.n	10008e02 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008e00:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008e02:	4770      	bx	lr
10008e04:	4000b000 	.word	0x4000b000
10008e08:	018cba80 	.word	0x018cba80
10008e0c:	10013ed4 	.word	0x10013ed4
10008e10:	4000f000 	.word	0x4000f000
10008e14:	001e8480 	.word	0x001e8480

10008e18 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008e18:	4b01      	ldr	r3, [pc, #4]	; (10008e20 <system_clock_get_value+0x8>)
10008e1a:	6818      	ldr	r0, [r3, #0]
}
10008e1c:	4770      	bx	lr
10008e1e:	46c0      	nop			; (mov r8, r8)
10008e20:	10013ed4 	.word	0x10013ed4

10008e24 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10008e24:	b500      	push	{lr}
	switch (peripheral) {
10008e26:	2835      	cmp	r0, #53	; 0x35
10008e28:	d900      	bls.n	10008e2c <system_clock_peripheral_enable+0x8>
10008e2a:	e1a2      	b.n	10009172 <system_clock_peripheral_enable+0x34e>
10008e2c:	0080      	lsls	r0, r0, #2
10008e2e:	4bd2      	ldr	r3, [pc, #840]	; (10009178 <system_clock_peripheral_enable+0x354>)
10008e30:	581b      	ldr	r3, [r3, r0]
10008e32:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e34:	4ad1      	ldr	r2, [pc, #836]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008e36:	68d1      	ldr	r1, [r2, #12]
10008e38:	2302      	movs	r3, #2
10008e3a:	430b      	orrs	r3, r1
10008e3c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e3e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008e40:	e198      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e42:	4ace      	ldr	r2, [pc, #824]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008e44:	68d1      	ldr	r1, [r2, #12]
10008e46:	2304      	movs	r3, #4
10008e48:	430b      	orrs	r3, r1
10008e4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008e4e:	e191      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e50:	4aca      	ldr	r2, [pc, #808]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008e52:	68d1      	ldr	r1, [r2, #12]
10008e54:	2308      	movs	r3, #8
10008e56:	430b      	orrs	r3, r1
10008e58:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008e5c:	e18a      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e5e:	4ac7      	ldr	r2, [pc, #796]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008e60:	68d1      	ldr	r1, [r2, #12]
10008e62:	2310      	movs	r3, #16
10008e64:	430b      	orrs	r3, r1
10008e66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10008e6a:	e183      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e6c:	4ac3      	ldr	r2, [pc, #780]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008e6e:	68d1      	ldr	r1, [r2, #12]
10008e70:	2320      	movs	r3, #32
10008e72:	430b      	orrs	r3, r1
10008e74:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008e78:	e17c      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e7a:	4ac0      	ldr	r2, [pc, #768]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008e7c:	68d1      	ldr	r1, [r2, #12]
10008e7e:	2380      	movs	r3, #128	; 0x80
10008e80:	430b      	orrs	r3, r1
10008e82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008e86:	e175      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e88:	4abc      	ldr	r2, [pc, #752]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008e8a:	68d3      	ldr	r3, [r2, #12]
10008e8c:	2180      	movs	r1, #128	; 0x80
10008e8e:	0049      	lsls	r1, r1, #1
10008e90:	430b      	orrs	r3, r1
10008e92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008e96:	e16d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e98:	4ab8      	ldr	r2, [pc, #736]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008e9a:	68d3      	ldr	r3, [r2, #12]
10008e9c:	2180      	movs	r1, #128	; 0x80
10008e9e:	0109      	lsls	r1, r1, #4
10008ea0:	430b      	orrs	r3, r1
10008ea2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ea4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008ea6:	e165      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ea8:	4ab4      	ldr	r2, [pc, #720]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008eaa:	68d3      	ldr	r3, [r2, #12]
10008eac:	2180      	movs	r1, #128	; 0x80
10008eae:	0149      	lsls	r1, r1, #5
10008eb0:	430b      	orrs	r3, r1
10008eb2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008eb6:	e15d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008eb8:	4ab0      	ldr	r2, [pc, #704]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008eba:	68d3      	ldr	r3, [r2, #12]
10008ebc:	2180      	movs	r1, #128	; 0x80
10008ebe:	0189      	lsls	r1, r1, #6
10008ec0:	430b      	orrs	r3, r1
10008ec2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008ec6:	e155      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ec8:	4aac      	ldr	r2, [pc, #688]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008eca:	68d3      	ldr	r3, [r2, #12]
10008ecc:	2180      	movs	r1, #128	; 0x80
10008ece:	01c9      	lsls	r1, r1, #7
10008ed0:	430b      	orrs	r3, r1
10008ed2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ed4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008ed6:	e14d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ed8:	4aa8      	ldr	r2, [pc, #672]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008eda:	68d3      	ldr	r3, [r2, #12]
10008edc:	2180      	movs	r1, #128	; 0x80
10008ede:	0209      	lsls	r1, r1, #8
10008ee0:	430b      	orrs	r3, r1
10008ee2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ee4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008ee6:	e145      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ee8:	4aa4      	ldr	r2, [pc, #656]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008eea:	68d3      	ldr	r3, [r2, #12]
10008eec:	2180      	movs	r1, #128	; 0x80
10008eee:	0249      	lsls	r1, r1, #9
10008ef0:	430b      	orrs	r3, r1
10008ef2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008ef6:	e13d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ef8:	4aa0      	ldr	r2, [pc, #640]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008efa:	68d3      	ldr	r3, [r2, #12]
10008efc:	2180      	movs	r1, #128	; 0x80
10008efe:	0289      	lsls	r1, r1, #10
10008f00:	430b      	orrs	r3, r1
10008f02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008f06:	e135      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f08:	4a9c      	ldr	r2, [pc, #624]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f0a:	68d3      	ldr	r3, [r2, #12]
10008f0c:	2180      	movs	r1, #128	; 0x80
10008f0e:	02c9      	lsls	r1, r1, #11
10008f10:	430b      	orrs	r3, r1
10008f12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008f16:	e12d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f18:	4a98      	ldr	r2, [pc, #608]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f1a:	68d3      	ldr	r3, [r2, #12]
10008f1c:	2180      	movs	r1, #128	; 0x80
10008f1e:	0309      	lsls	r1, r1, #12
10008f20:	430b      	orrs	r3, r1
10008f22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008f26:	e125      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f28:	4a94      	ldr	r2, [pc, #592]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f2a:	68d3      	ldr	r3, [r2, #12]
10008f2c:	2180      	movs	r1, #128	; 0x80
10008f2e:	0349      	lsls	r1, r1, #13
10008f30:	430b      	orrs	r3, r1
10008f32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008f36:	e11d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f38:	4a90      	ldr	r2, [pc, #576]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f3a:	68d3      	ldr	r3, [r2, #12]
10008f3c:	2180      	movs	r1, #128	; 0x80
10008f3e:	0389      	lsls	r1, r1, #14
10008f40:	430b      	orrs	r3, r1
10008f42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008f46:	e115      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f48:	4a8c      	ldr	r2, [pc, #560]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f4a:	68d3      	ldr	r3, [r2, #12]
10008f4c:	2180      	movs	r1, #128	; 0x80
10008f4e:	03c9      	lsls	r1, r1, #15
10008f50:	430b      	orrs	r3, r1
10008f52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008f56:	e10d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f58:	4a88      	ldr	r2, [pc, #544]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f5a:	68d3      	ldr	r3, [r2, #12]
10008f5c:	2180      	movs	r1, #128	; 0x80
10008f5e:	0409      	lsls	r1, r1, #16
10008f60:	430b      	orrs	r3, r1
10008f62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008f66:	e105      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f68:	4a84      	ldr	r2, [pc, #528]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f6a:	68d3      	ldr	r3, [r2, #12]
10008f6c:	2180      	movs	r1, #128	; 0x80
10008f6e:	0449      	lsls	r1, r1, #17
10008f70:	430b      	orrs	r3, r1
10008f72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008f76:	e0fd      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f78:	4a80      	ldr	r2, [pc, #512]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f7a:	68d3      	ldr	r3, [r2, #12]
10008f7c:	2180      	movs	r1, #128	; 0x80
10008f7e:	0489      	lsls	r1, r1, #18
10008f80:	430b      	orrs	r3, r1
10008f82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008f86:	e0f5      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f88:	4a7c      	ldr	r2, [pc, #496]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f8a:	68d3      	ldr	r3, [r2, #12]
10008f8c:	2180      	movs	r1, #128	; 0x80
10008f8e:	04c9      	lsls	r1, r1, #19
10008f90:	430b      	orrs	r3, r1
10008f92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008f96:	e0ed      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f98:	4a78      	ldr	r2, [pc, #480]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008f9a:	68d3      	ldr	r3, [r2, #12]
10008f9c:	2180      	movs	r1, #128	; 0x80
10008f9e:	0509      	lsls	r1, r1, #20
10008fa0:	430b      	orrs	r3, r1
10008fa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008fa6:	e0e5      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fa8:	4a74      	ldr	r2, [pc, #464]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008faa:	68d3      	ldr	r3, [r2, #12]
10008fac:	2180      	movs	r1, #128	; 0x80
10008fae:	0549      	lsls	r1, r1, #21
10008fb0:	430b      	orrs	r3, r1
10008fb2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008fb6:	e0dd      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fb8:	4a70      	ldr	r2, [pc, #448]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008fba:	68d3      	ldr	r3, [r2, #12]
10008fbc:	2180      	movs	r1, #128	; 0x80
10008fbe:	0589      	lsls	r1, r1, #22
10008fc0:	430b      	orrs	r3, r1
10008fc2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008fc6:	e0d5      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fc8:	4a6c      	ldr	r2, [pc, #432]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008fca:	68d3      	ldr	r3, [r2, #12]
10008fcc:	2180      	movs	r1, #128	; 0x80
10008fce:	05c9      	lsls	r1, r1, #23
10008fd0:	430b      	orrs	r3, r1
10008fd2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008fd6:	e0cd      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008fd8:	4a68      	ldr	r2, [pc, #416]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008fda:	6911      	ldr	r1, [r2, #16]
10008fdc:	2301      	movs	r3, #1
10008fde:	430b      	orrs	r3, r1
10008fe0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fe2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008fe4:	e0c6      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008fe6:	4a65      	ldr	r2, [pc, #404]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008fe8:	6911      	ldr	r1, [r2, #16]
10008fea:	2302      	movs	r3, #2
10008fec:	430b      	orrs	r3, r1
10008fee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ff0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008ff2:	e0bf      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ff4:	4a61      	ldr	r2, [pc, #388]	; (1000917c <system_clock_peripheral_enable+0x358>)
10008ff6:	6911      	ldr	r1, [r2, #16]
10008ff8:	2304      	movs	r3, #4
10008ffa:	430b      	orrs	r3, r1
10008ffc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ffe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10009000:	e0b8      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009002:	4a5e      	ldr	r2, [pc, #376]	; (1000917c <system_clock_peripheral_enable+0x358>)
10009004:	6911      	ldr	r1, [r2, #16]
10009006:	2308      	movs	r3, #8
10009008:	430b      	orrs	r3, r1
1000900a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000900c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
1000900e:	e0b1      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009010:	4a5a      	ldr	r2, [pc, #360]	; (1000917c <system_clock_peripheral_enable+0x358>)
10009012:	6911      	ldr	r1, [r2, #16]
10009014:	2310      	movs	r3, #16
10009016:	430b      	orrs	r3, r1
10009018:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000901a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
1000901c:	e0aa      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000901e:	4a57      	ldr	r2, [pc, #348]	; (1000917c <system_clock_peripheral_enable+0x358>)
10009020:	6911      	ldr	r1, [r2, #16]
10009022:	2320      	movs	r3, #32
10009024:	430b      	orrs	r3, r1
10009026:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009028:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
1000902a:	e0a3      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000902c:	4a53      	ldr	r2, [pc, #332]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000902e:	6911      	ldr	r1, [r2, #16]
10009030:	2340      	movs	r3, #64	; 0x40
10009032:	430b      	orrs	r3, r1
10009034:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009036:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10009038:	e09c      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000903a:	4a50      	ldr	r2, [pc, #320]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000903c:	6911      	ldr	r1, [r2, #16]
1000903e:	2380      	movs	r3, #128	; 0x80
10009040:	430b      	orrs	r3, r1
10009042:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009044:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10009046:	e095      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009048:	4a4c      	ldr	r2, [pc, #304]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000904a:	6913      	ldr	r3, [r2, #16]
1000904c:	2180      	movs	r1, #128	; 0x80
1000904e:	0049      	lsls	r1, r1, #1
10009050:	430b      	orrs	r3, r1
10009052:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009054:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10009056:	e08d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009058:	4a48      	ldr	r2, [pc, #288]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000905a:	6913      	ldr	r3, [r2, #16]
1000905c:	2180      	movs	r1, #128	; 0x80
1000905e:	0089      	lsls	r1, r1, #2
10009060:	430b      	orrs	r3, r1
10009062:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009064:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10009066:	e085      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009068:	4a44      	ldr	r2, [pc, #272]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000906a:	6913      	ldr	r3, [r2, #16]
1000906c:	2180      	movs	r1, #128	; 0x80
1000906e:	00c9      	lsls	r1, r1, #3
10009070:	430b      	orrs	r3, r1
10009072:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009074:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10009076:	e07d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009078:	4a40      	ldr	r2, [pc, #256]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000907a:	6913      	ldr	r3, [r2, #16]
1000907c:	2180      	movs	r1, #128	; 0x80
1000907e:	0109      	lsls	r1, r1, #4
10009080:	430b      	orrs	r3, r1
10009082:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009084:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10009086:	e075      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009088:	4a3c      	ldr	r2, [pc, #240]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000908a:	6913      	ldr	r3, [r2, #16]
1000908c:	2180      	movs	r1, #128	; 0x80
1000908e:	0149      	lsls	r1, r1, #5
10009090:	430b      	orrs	r3, r1
10009092:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009094:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10009096:	e06d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009098:	4a38      	ldr	r2, [pc, #224]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000909a:	6913      	ldr	r3, [r2, #16]
1000909c:	2180      	movs	r1, #128	; 0x80
1000909e:	0189      	lsls	r1, r1, #6
100090a0:	430b      	orrs	r3, r1
100090a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
100090a6:	e065      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090a8:	4a34      	ldr	r2, [pc, #208]	; (1000917c <system_clock_peripheral_enable+0x358>)
100090aa:	6913      	ldr	r3, [r2, #16]
100090ac:	2180      	movs	r1, #128	; 0x80
100090ae:	01c9      	lsls	r1, r1, #7
100090b0:	430b      	orrs	r3, r1
100090b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
100090b6:	e05d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090b8:	4a30      	ldr	r2, [pc, #192]	; (1000917c <system_clock_peripheral_enable+0x358>)
100090ba:	6913      	ldr	r3, [r2, #16]
100090bc:	2180      	movs	r1, #128	; 0x80
100090be:	0209      	lsls	r1, r1, #8
100090c0:	430b      	orrs	r3, r1
100090c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
100090c6:	e055      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090c8:	4a2c      	ldr	r2, [pc, #176]	; (1000917c <system_clock_peripheral_enable+0x358>)
100090ca:	6913      	ldr	r3, [r2, #16]
100090cc:	2180      	movs	r1, #128	; 0x80
100090ce:	0249      	lsls	r1, r1, #9
100090d0:	430b      	orrs	r3, r1
100090d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
100090d6:	e04d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090d8:	4a28      	ldr	r2, [pc, #160]	; (1000917c <system_clock_peripheral_enable+0x358>)
100090da:	6913      	ldr	r3, [r2, #16]
100090dc:	2180      	movs	r1, #128	; 0x80
100090de:	0289      	lsls	r1, r1, #10
100090e0:	430b      	orrs	r3, r1
100090e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
100090e6:	e045      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090e8:	4a24      	ldr	r2, [pc, #144]	; (1000917c <system_clock_peripheral_enable+0x358>)
100090ea:	6913      	ldr	r3, [r2, #16]
100090ec:	2180      	movs	r1, #128	; 0x80
100090ee:	02c9      	lsls	r1, r1, #11
100090f0:	430b      	orrs	r3, r1
100090f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
100090f6:	e03d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090f8:	4a20      	ldr	r2, [pc, #128]	; (1000917c <system_clock_peripheral_enable+0x358>)
100090fa:	6913      	ldr	r3, [r2, #16]
100090fc:	2180      	movs	r1, #128	; 0x80
100090fe:	0309      	lsls	r1, r1, #12
10009100:	430b      	orrs	r3, r1
10009102:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009104:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
10009106:	e035      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009108:	4a1c      	ldr	r2, [pc, #112]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000910a:	6913      	ldr	r3, [r2, #16]
1000910c:	2180      	movs	r1, #128	; 0x80
1000910e:	0349      	lsls	r1, r1, #13
10009110:	430b      	orrs	r3, r1
10009112:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009114:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10009116:	e02d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009118:	4a18      	ldr	r2, [pc, #96]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000911a:	6913      	ldr	r3, [r2, #16]
1000911c:	2180      	movs	r1, #128	; 0x80
1000911e:	0389      	lsls	r1, r1, #14
10009120:	430b      	orrs	r3, r1
10009122:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009124:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009126:	e025      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009128:	4a14      	ldr	r2, [pc, #80]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000912a:	6913      	ldr	r3, [r2, #16]
1000912c:	2180      	movs	r1, #128	; 0x80
1000912e:	03c9      	lsls	r1, r1, #15
10009130:	430b      	orrs	r3, r1
10009132:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009134:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009136:	e01d      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009138:	4a10      	ldr	r2, [pc, #64]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000913a:	6913      	ldr	r3, [r2, #16]
1000913c:	2180      	movs	r1, #128	; 0x80
1000913e:	0409      	lsls	r1, r1, #16
10009140:	430b      	orrs	r3, r1
10009142:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009144:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009146:	e015      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009148:	4a0c      	ldr	r2, [pc, #48]	; (1000917c <system_clock_peripheral_enable+0x358>)
1000914a:	7d11      	ldrb	r1, [r2, #20]
1000914c:	2301      	movs	r3, #1
1000914e:	430b      	orrs	r3, r1
10009150:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009152:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10009154:	e00e      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009156:	4a09      	ldr	r2, [pc, #36]	; (1000917c <system_clock_peripheral_enable+0x358>)
10009158:	7d11      	ldrb	r1, [r2, #20]
1000915a:	2302      	movs	r3, #2
1000915c:	430b      	orrs	r3, r1
1000915e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009160:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
10009162:	e007      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009164:	4a05      	ldr	r2, [pc, #20]	; (1000917c <system_clock_peripheral_enable+0x358>)
10009166:	7d11      	ldrb	r1, [r2, #20]
10009168:	2304      	movs	r3, #4
1000916a:	430b      	orrs	r3, r1
1000916c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000916e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
10009170:	e000      	b.n	10009174 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
10009172:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009174:	bd00      	pop	{pc}
10009176:	46c0      	nop			; (mov r8, r8)
10009178:	1001157c 	.word	0x1001157c
1000917c:	4000b000 	.word	0x4000b000

10009180 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
10009180:	b500      	push	{lr}
	switch (peripheral) {
10009182:	2843      	cmp	r0, #67	; 0x43
10009184:	d900      	bls.n	10009188 <system_peripheral_reset+0x8>
10009186:	e223      	b.n	100095d0 <system_peripheral_reset+0x450>
10009188:	0080      	lsls	r0, r0, #2
1000918a:	4be0      	ldr	r3, [pc, #896]	; (1000950c <system_peripheral_reset+0x38c>)
1000918c:	581b      	ldr	r3, [r3, r0]
1000918e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009190:	4bdf      	ldr	r3, [pc, #892]	; (10009510 <system_peripheral_reset+0x390>)
10009192:	6859      	ldr	r1, [r3, #4]
10009194:	2202      	movs	r2, #2
10009196:	4391      	bics	r1, r2
10009198:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000919a:	6859      	ldr	r1, [r3, #4]
1000919c:	430a      	orrs	r2, r1
1000919e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091a0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
100091a2:	e216      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091a4:	4bda      	ldr	r3, [pc, #872]	; (10009510 <system_peripheral_reset+0x390>)
100091a6:	6859      	ldr	r1, [r3, #4]
100091a8:	2204      	movs	r2, #4
100091aa:	4391      	bics	r1, r2
100091ac:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ae:	6859      	ldr	r1, [r3, #4]
100091b0:	430a      	orrs	r2, r1
100091b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091b4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
100091b6:	e20c      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091b8:	4bd5      	ldr	r3, [pc, #852]	; (10009510 <system_peripheral_reset+0x390>)
100091ba:	6859      	ldr	r1, [r3, #4]
100091bc:	2208      	movs	r2, #8
100091be:	4391      	bics	r1, r2
100091c0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091c2:	6859      	ldr	r1, [r3, #4]
100091c4:	430a      	orrs	r2, r1
100091c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091c8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
100091ca:	e202      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091cc:	4bd0      	ldr	r3, [pc, #832]	; (10009510 <system_peripheral_reset+0x390>)
100091ce:	6859      	ldr	r1, [r3, #4]
100091d0:	2210      	movs	r2, #16
100091d2:	4391      	bics	r1, r2
100091d4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091d6:	6859      	ldr	r1, [r3, #4]
100091d8:	430a      	orrs	r2, r1
100091da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091dc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
100091de:	e1f8      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091e0:	4bcb      	ldr	r3, [pc, #812]	; (10009510 <system_peripheral_reset+0x390>)
100091e2:	6859      	ldr	r1, [r3, #4]
100091e4:	2220      	movs	r2, #32
100091e6:	4391      	bics	r1, r2
100091e8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ea:	6859      	ldr	r1, [r3, #4]
100091ec:	430a      	orrs	r2, r1
100091ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
100091f2:	e1ee      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091f4:	4bc6      	ldr	r3, [pc, #792]	; (10009510 <system_peripheral_reset+0x390>)
100091f6:	6859      	ldr	r1, [r3, #4]
100091f8:	2240      	movs	r2, #64	; 0x40
100091fa:	4391      	bics	r1, r2
100091fc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091fe:	6859      	ldr	r1, [r3, #4]
10009200:	430a      	orrs	r2, r1
10009202:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009204:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
10009206:	e1e4      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009208:	4bc1      	ldr	r3, [pc, #772]	; (10009510 <system_peripheral_reset+0x390>)
1000920a:	6859      	ldr	r1, [r3, #4]
1000920c:	2280      	movs	r2, #128	; 0x80
1000920e:	4391      	bics	r1, r2
10009210:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009212:	6859      	ldr	r1, [r3, #4]
10009214:	430a      	orrs	r2, r1
10009216:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009218:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
1000921a:	e1da      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000921c:	4bbc      	ldr	r3, [pc, #752]	; (10009510 <system_peripheral_reset+0x390>)
1000921e:	6859      	ldr	r1, [r3, #4]
10009220:	4abc      	ldr	r2, [pc, #752]	; (10009514 <system_peripheral_reset+0x394>)
10009222:	400a      	ands	r2, r1
10009224:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009226:	685a      	ldr	r2, [r3, #4]
10009228:	2180      	movs	r1, #128	; 0x80
1000922a:	0049      	lsls	r1, r1, #1
1000922c:	430a      	orrs	r2, r1
1000922e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009230:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
10009232:	e1ce      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009234:	4bb6      	ldr	r3, [pc, #728]	; (10009510 <system_peripheral_reset+0x390>)
10009236:	6859      	ldr	r1, [r3, #4]
10009238:	4ab7      	ldr	r2, [pc, #732]	; (10009518 <system_peripheral_reset+0x398>)
1000923a:	400a      	ands	r2, r1
1000923c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000923e:	685a      	ldr	r2, [r3, #4]
10009240:	2180      	movs	r1, #128	; 0x80
10009242:	0089      	lsls	r1, r1, #2
10009244:	430a      	orrs	r2, r1
10009246:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009248:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
1000924a:	e1c2      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000924c:	4bb0      	ldr	r3, [pc, #704]	; (10009510 <system_peripheral_reset+0x390>)
1000924e:	6859      	ldr	r1, [r3, #4]
10009250:	4ab2      	ldr	r2, [pc, #712]	; (1000951c <system_peripheral_reset+0x39c>)
10009252:	400a      	ands	r2, r1
10009254:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009256:	685a      	ldr	r2, [r3, #4]
10009258:	2180      	movs	r1, #128	; 0x80
1000925a:	00c9      	lsls	r1, r1, #3
1000925c:	430a      	orrs	r2, r1
1000925e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009260:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
10009262:	e1b6      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009264:	4baa      	ldr	r3, [pc, #680]	; (10009510 <system_peripheral_reset+0x390>)
10009266:	6859      	ldr	r1, [r3, #4]
10009268:	4aad      	ldr	r2, [pc, #692]	; (10009520 <system_peripheral_reset+0x3a0>)
1000926a:	400a      	ands	r2, r1
1000926c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000926e:	685a      	ldr	r2, [r3, #4]
10009270:	2180      	movs	r1, #128	; 0x80
10009272:	0109      	lsls	r1, r1, #4
10009274:	430a      	orrs	r2, r1
10009276:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009278:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
1000927a:	e1aa      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000927c:	4ba4      	ldr	r3, [pc, #656]	; (10009510 <system_peripheral_reset+0x390>)
1000927e:	6859      	ldr	r1, [r3, #4]
10009280:	4aa8      	ldr	r2, [pc, #672]	; (10009524 <system_peripheral_reset+0x3a4>)
10009282:	400a      	ands	r2, r1
10009284:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009286:	685a      	ldr	r2, [r3, #4]
10009288:	2180      	movs	r1, #128	; 0x80
1000928a:	0149      	lsls	r1, r1, #5
1000928c:	430a      	orrs	r2, r1
1000928e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009290:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
10009292:	e19e      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009294:	4b9e      	ldr	r3, [pc, #632]	; (10009510 <system_peripheral_reset+0x390>)
10009296:	6859      	ldr	r1, [r3, #4]
10009298:	4aa3      	ldr	r2, [pc, #652]	; (10009528 <system_peripheral_reset+0x3a8>)
1000929a:	400a      	ands	r2, r1
1000929c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000929e:	685a      	ldr	r2, [r3, #4]
100092a0:	2180      	movs	r1, #128	; 0x80
100092a2:	0189      	lsls	r1, r1, #6
100092a4:	430a      	orrs	r2, r1
100092a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092a8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
100092aa:	e192      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092ac:	4b98      	ldr	r3, [pc, #608]	; (10009510 <system_peripheral_reset+0x390>)
100092ae:	6859      	ldr	r1, [r3, #4]
100092b0:	4a9e      	ldr	r2, [pc, #632]	; (1000952c <system_peripheral_reset+0x3ac>)
100092b2:	400a      	ands	r2, r1
100092b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092b6:	685a      	ldr	r2, [r3, #4]
100092b8:	2180      	movs	r1, #128	; 0x80
100092ba:	01c9      	lsls	r1, r1, #7
100092bc:	430a      	orrs	r2, r1
100092be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092c0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
100092c2:	e186      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092c4:	4b92      	ldr	r3, [pc, #584]	; (10009510 <system_peripheral_reset+0x390>)
100092c6:	6859      	ldr	r1, [r3, #4]
100092c8:	4a99      	ldr	r2, [pc, #612]	; (10009530 <system_peripheral_reset+0x3b0>)
100092ca:	400a      	ands	r2, r1
100092cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092ce:	685a      	ldr	r2, [r3, #4]
100092d0:	2180      	movs	r1, #128	; 0x80
100092d2:	0209      	lsls	r1, r1, #8
100092d4:	430a      	orrs	r2, r1
100092d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092d8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
100092da:	e17a      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092dc:	4b8c      	ldr	r3, [pc, #560]	; (10009510 <system_peripheral_reset+0x390>)
100092de:	6859      	ldr	r1, [r3, #4]
100092e0:	4a94      	ldr	r2, [pc, #592]	; (10009534 <system_peripheral_reset+0x3b4>)
100092e2:	400a      	ands	r2, r1
100092e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092e6:	685a      	ldr	r2, [r3, #4]
100092e8:	2180      	movs	r1, #128	; 0x80
100092ea:	0249      	lsls	r1, r1, #9
100092ec:	430a      	orrs	r2, r1
100092ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092f0:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
100092f2:	e16e      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092f4:	4b86      	ldr	r3, [pc, #536]	; (10009510 <system_peripheral_reset+0x390>)
100092f6:	6859      	ldr	r1, [r3, #4]
100092f8:	4a8f      	ldr	r2, [pc, #572]	; (10009538 <system_peripheral_reset+0x3b8>)
100092fa:	400a      	ands	r2, r1
100092fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092fe:	685a      	ldr	r2, [r3, #4]
10009300:	2180      	movs	r1, #128	; 0x80
10009302:	0289      	lsls	r1, r1, #10
10009304:	430a      	orrs	r2, r1
10009306:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009308:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
1000930a:	e162      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000930c:	4b80      	ldr	r3, [pc, #512]	; (10009510 <system_peripheral_reset+0x390>)
1000930e:	6859      	ldr	r1, [r3, #4]
10009310:	4a8a      	ldr	r2, [pc, #552]	; (1000953c <system_peripheral_reset+0x3bc>)
10009312:	400a      	ands	r2, r1
10009314:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009316:	685a      	ldr	r2, [r3, #4]
10009318:	2180      	movs	r1, #128	; 0x80
1000931a:	02c9      	lsls	r1, r1, #11
1000931c:	430a      	orrs	r2, r1
1000931e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009320:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
10009322:	e156      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009324:	4b7a      	ldr	r3, [pc, #488]	; (10009510 <system_peripheral_reset+0x390>)
10009326:	6859      	ldr	r1, [r3, #4]
10009328:	4a85      	ldr	r2, [pc, #532]	; (10009540 <system_peripheral_reset+0x3c0>)
1000932a:	400a      	ands	r2, r1
1000932c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000932e:	685a      	ldr	r2, [r3, #4]
10009330:	2180      	movs	r1, #128	; 0x80
10009332:	0309      	lsls	r1, r1, #12
10009334:	430a      	orrs	r2, r1
10009336:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009338:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000933a:	e14a      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000933c:	4b74      	ldr	r3, [pc, #464]	; (10009510 <system_peripheral_reset+0x390>)
1000933e:	6859      	ldr	r1, [r3, #4]
10009340:	4a80      	ldr	r2, [pc, #512]	; (10009544 <system_peripheral_reset+0x3c4>)
10009342:	400a      	ands	r2, r1
10009344:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009346:	685a      	ldr	r2, [r3, #4]
10009348:	2180      	movs	r1, #128	; 0x80
1000934a:	0349      	lsls	r1, r1, #13
1000934c:	430a      	orrs	r2, r1
1000934e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009350:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
10009352:	e13e      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009354:	4b6e      	ldr	r3, [pc, #440]	; (10009510 <system_peripheral_reset+0x390>)
10009356:	6859      	ldr	r1, [r3, #4]
10009358:	4a7b      	ldr	r2, [pc, #492]	; (10009548 <system_peripheral_reset+0x3c8>)
1000935a:	400a      	ands	r2, r1
1000935c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000935e:	685a      	ldr	r2, [r3, #4]
10009360:	2180      	movs	r1, #128	; 0x80
10009362:	0389      	lsls	r1, r1, #14
10009364:	430a      	orrs	r2, r1
10009366:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009368:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000936a:	e132      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000936c:	4b68      	ldr	r3, [pc, #416]	; (10009510 <system_peripheral_reset+0x390>)
1000936e:	6859      	ldr	r1, [r3, #4]
10009370:	4a76      	ldr	r2, [pc, #472]	; (1000954c <system_peripheral_reset+0x3cc>)
10009372:	400a      	ands	r2, r1
10009374:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009376:	685a      	ldr	r2, [r3, #4]
10009378:	2180      	movs	r1, #128	; 0x80
1000937a:	03c9      	lsls	r1, r1, #15
1000937c:	430a      	orrs	r2, r1
1000937e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009380:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
10009382:	e126      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009384:	4b62      	ldr	r3, [pc, #392]	; (10009510 <system_peripheral_reset+0x390>)
10009386:	6859      	ldr	r1, [r3, #4]
10009388:	4a71      	ldr	r2, [pc, #452]	; (10009550 <system_peripheral_reset+0x3d0>)
1000938a:	400a      	ands	r2, r1
1000938c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000938e:	685a      	ldr	r2, [r3, #4]
10009390:	2180      	movs	r1, #128	; 0x80
10009392:	0409      	lsls	r1, r1, #16
10009394:	430a      	orrs	r2, r1
10009396:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009398:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000939a:	e11a      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000939c:	4b5c      	ldr	r3, [pc, #368]	; (10009510 <system_peripheral_reset+0x390>)
1000939e:	6859      	ldr	r1, [r3, #4]
100093a0:	4a6c      	ldr	r2, [pc, #432]	; (10009554 <system_peripheral_reset+0x3d4>)
100093a2:	400a      	ands	r2, r1
100093a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093a6:	685a      	ldr	r2, [r3, #4]
100093a8:	2180      	movs	r1, #128	; 0x80
100093aa:	0449      	lsls	r1, r1, #17
100093ac:	430a      	orrs	r2, r1
100093ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093b0:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
100093b2:	e10e      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093b4:	4b56      	ldr	r3, [pc, #344]	; (10009510 <system_peripheral_reset+0x390>)
100093b6:	6859      	ldr	r1, [r3, #4]
100093b8:	4a67      	ldr	r2, [pc, #412]	; (10009558 <system_peripheral_reset+0x3d8>)
100093ba:	400a      	ands	r2, r1
100093bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093be:	685a      	ldr	r2, [r3, #4]
100093c0:	2180      	movs	r1, #128	; 0x80
100093c2:	0489      	lsls	r1, r1, #18
100093c4:	430a      	orrs	r2, r1
100093c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093c8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
100093ca:	e102      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093cc:	4b50      	ldr	r3, [pc, #320]	; (10009510 <system_peripheral_reset+0x390>)
100093ce:	6859      	ldr	r1, [r3, #4]
100093d0:	4a62      	ldr	r2, [pc, #392]	; (1000955c <system_peripheral_reset+0x3dc>)
100093d2:	400a      	ands	r2, r1
100093d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093d6:	685a      	ldr	r2, [r3, #4]
100093d8:	2180      	movs	r1, #128	; 0x80
100093da:	04c9      	lsls	r1, r1, #19
100093dc:	430a      	orrs	r2, r1
100093de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093e0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
100093e2:	e0f6      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093e4:	4b4a      	ldr	r3, [pc, #296]	; (10009510 <system_peripheral_reset+0x390>)
100093e6:	6859      	ldr	r1, [r3, #4]
100093e8:	4a5d      	ldr	r2, [pc, #372]	; (10009560 <system_peripheral_reset+0x3e0>)
100093ea:	400a      	ands	r2, r1
100093ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093ee:	685a      	ldr	r2, [r3, #4]
100093f0:	2180      	movs	r1, #128	; 0x80
100093f2:	0509      	lsls	r1, r1, #20
100093f4:	430a      	orrs	r2, r1
100093f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093f8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
100093fa:	e0ea      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093fc:	4b44      	ldr	r3, [pc, #272]	; (10009510 <system_peripheral_reset+0x390>)
100093fe:	6859      	ldr	r1, [r3, #4]
10009400:	4a58      	ldr	r2, [pc, #352]	; (10009564 <system_peripheral_reset+0x3e4>)
10009402:	400a      	ands	r2, r1
10009404:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009406:	685a      	ldr	r2, [r3, #4]
10009408:	2180      	movs	r1, #128	; 0x80
1000940a:	0549      	lsls	r1, r1, #21
1000940c:	430a      	orrs	r2, r1
1000940e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009410:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
10009412:	e0de      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009414:	4b3e      	ldr	r3, [pc, #248]	; (10009510 <system_peripheral_reset+0x390>)
10009416:	6859      	ldr	r1, [r3, #4]
10009418:	4a53      	ldr	r2, [pc, #332]	; (10009568 <system_peripheral_reset+0x3e8>)
1000941a:	400a      	ands	r2, r1
1000941c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000941e:	685a      	ldr	r2, [r3, #4]
10009420:	2180      	movs	r1, #128	; 0x80
10009422:	0589      	lsls	r1, r1, #22
10009424:	430a      	orrs	r2, r1
10009426:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009428:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
1000942a:	e0d2      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000942c:	4b38      	ldr	r3, [pc, #224]	; (10009510 <system_peripheral_reset+0x390>)
1000942e:	6859      	ldr	r1, [r3, #4]
10009430:	4a4e      	ldr	r2, [pc, #312]	; (1000956c <system_peripheral_reset+0x3ec>)
10009432:	400a      	ands	r2, r1
10009434:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009436:	685a      	ldr	r2, [r3, #4]
10009438:	2180      	movs	r1, #128	; 0x80
1000943a:	05c9      	lsls	r1, r1, #23
1000943c:	430a      	orrs	r2, r1
1000943e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009440:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
10009442:	e0c6      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009444:	4a32      	ldr	r2, [pc, #200]	; (10009510 <system_peripheral_reset+0x390>)
10009446:	6853      	ldr	r3, [r2, #4]
10009448:	005b      	lsls	r3, r3, #1
1000944a:	085b      	lsrs	r3, r3, #1
1000944c:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000944e:	6853      	ldr	r3, [r2, #4]
10009450:	2180      	movs	r1, #128	; 0x80
10009452:	0609      	lsls	r1, r1, #24
10009454:	430b      	orrs	r3, r1
10009456:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009458:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
1000945a:	e0ba      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000945c:	4b2c      	ldr	r3, [pc, #176]	; (10009510 <system_peripheral_reset+0x390>)
1000945e:	891a      	ldrh	r2, [r3, #8]
10009460:	2101      	movs	r1, #1
10009462:	438a      	bics	r2, r1
10009464:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009466:	8919      	ldrh	r1, [r3, #8]
10009468:	2201      	movs	r2, #1
1000946a:	430a      	orrs	r2, r1
1000946c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000946e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
10009470:	e0af      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009472:	4b27      	ldr	r3, [pc, #156]	; (10009510 <system_peripheral_reset+0x390>)
10009474:	891a      	ldrh	r2, [r3, #8]
10009476:	2102      	movs	r1, #2
10009478:	438a      	bics	r2, r1
1000947a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000947c:	8919      	ldrh	r1, [r3, #8]
1000947e:	2202      	movs	r2, #2
10009480:	430a      	orrs	r2, r1
10009482:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009484:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
10009486:	e0a4      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009488:	4b21      	ldr	r3, [pc, #132]	; (10009510 <system_peripheral_reset+0x390>)
1000948a:	891a      	ldrh	r2, [r3, #8]
1000948c:	2104      	movs	r1, #4
1000948e:	438a      	bics	r2, r1
10009490:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009492:	8919      	ldrh	r1, [r3, #8]
10009494:	2204      	movs	r2, #4
10009496:	430a      	orrs	r2, r1
10009498:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000949a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
1000949c:	e099      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000949e:	4b1c      	ldr	r3, [pc, #112]	; (10009510 <system_peripheral_reset+0x390>)
100094a0:	891a      	ldrh	r2, [r3, #8]
100094a2:	2108      	movs	r1, #8
100094a4:	438a      	bics	r2, r1
100094a6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094a8:	8919      	ldrh	r1, [r3, #8]
100094aa:	2208      	movs	r2, #8
100094ac:	430a      	orrs	r2, r1
100094ae:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b0:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
100094b2:	e08e      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094b4:	4b16      	ldr	r3, [pc, #88]	; (10009510 <system_peripheral_reset+0x390>)
100094b6:	891a      	ldrh	r2, [r3, #8]
100094b8:	2110      	movs	r1, #16
100094ba:	438a      	bics	r2, r1
100094bc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094be:	8919      	ldrh	r1, [r3, #8]
100094c0:	2210      	movs	r2, #16
100094c2:	430a      	orrs	r2, r1
100094c4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c6:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
100094c8:	e083      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094ca:	4b11      	ldr	r3, [pc, #68]	; (10009510 <system_peripheral_reset+0x390>)
100094cc:	891a      	ldrh	r2, [r3, #8]
100094ce:	2120      	movs	r1, #32
100094d0:	438a      	bics	r2, r1
100094d2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094d4:	8919      	ldrh	r1, [r3, #8]
100094d6:	2220      	movs	r2, #32
100094d8:	430a      	orrs	r2, r1
100094da:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094dc:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
100094de:	e078      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094e0:	4b0b      	ldr	r3, [pc, #44]	; (10009510 <system_peripheral_reset+0x390>)
100094e2:	891a      	ldrh	r2, [r3, #8]
100094e4:	2140      	movs	r1, #64	; 0x40
100094e6:	438a      	bics	r2, r1
100094e8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094ea:	8919      	ldrh	r1, [r3, #8]
100094ec:	2240      	movs	r2, #64	; 0x40
100094ee:	430a      	orrs	r2, r1
100094f0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f2:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
100094f4:	e06d      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094f6:	4b06      	ldr	r3, [pc, #24]	; (10009510 <system_peripheral_reset+0x390>)
100094f8:	891a      	ldrh	r2, [r3, #8]
100094fa:	2180      	movs	r1, #128	; 0x80
100094fc:	438a      	bics	r2, r1
100094fe:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009500:	8919      	ldrh	r1, [r3, #8]
10009502:	2280      	movs	r2, #128	; 0x80
10009504:	430a      	orrs	r2, r1
10009506:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009508:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
1000950a:	e062      	b.n	100095d2 <system_peripheral_reset+0x452>
1000950c:	10011654 	.word	0x10011654
10009510:	4000b000 	.word	0x4000b000
10009514:	fffffeff 	.word	0xfffffeff
10009518:	fffffdff 	.word	0xfffffdff
1000951c:	fffffbff 	.word	0xfffffbff
10009520:	fffff7ff 	.word	0xfffff7ff
10009524:	ffffefff 	.word	0xffffefff
10009528:	ffffdfff 	.word	0xffffdfff
1000952c:	ffffbfff 	.word	0xffffbfff
10009530:	ffff7fff 	.word	0xffff7fff
10009534:	fffeffff 	.word	0xfffeffff
10009538:	fffdffff 	.word	0xfffdffff
1000953c:	fffbffff 	.word	0xfffbffff
10009540:	fff7ffff 	.word	0xfff7ffff
10009544:	ffefffff 	.word	0xffefffff
10009548:	ffdfffff 	.word	0xffdfffff
1000954c:	ffbfffff 	.word	0xffbfffff
10009550:	ff7fffff 	.word	0xff7fffff
10009554:	feffffff 	.word	0xfeffffff
10009558:	fdffffff 	.word	0xfdffffff
1000955c:	fbffffff 	.word	0xfbffffff
10009560:	f7ffffff 	.word	0xf7ffffff
10009564:	efffffff 	.word	0xefffffff
10009568:	dfffffff 	.word	0xdfffffff
1000956c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009570:	4b18      	ldr	r3, [pc, #96]	; (100095d4 <system_peripheral_reset+0x454>)
10009572:	8919      	ldrh	r1, [r3, #8]
10009574:	4a18      	ldr	r2, [pc, #96]	; (100095d8 <system_peripheral_reset+0x458>)
10009576:	400a      	ands	r2, r1
10009578:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000957a:	8919      	ldrh	r1, [r3, #8]
1000957c:	2280      	movs	r2, #128	; 0x80
1000957e:	0052      	lsls	r2, r2, #1
10009580:	430a      	orrs	r2, r1
10009582:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009584:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
10009586:	e024      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009588:	4b12      	ldr	r3, [pc, #72]	; (100095d4 <system_peripheral_reset+0x454>)
1000958a:	8919      	ldrh	r1, [r3, #8]
1000958c:	4a13      	ldr	r2, [pc, #76]	; (100095dc <system_peripheral_reset+0x45c>)
1000958e:	400a      	ands	r2, r1
10009590:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009592:	8919      	ldrh	r1, [r3, #8]
10009594:	2280      	movs	r2, #128	; 0x80
10009596:	0092      	lsls	r2, r2, #2
10009598:	430a      	orrs	r2, r1
1000959a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000959c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000959e:	e018      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100095a0:	4b0c      	ldr	r3, [pc, #48]	; (100095d4 <system_peripheral_reset+0x454>)
100095a2:	8919      	ldrh	r1, [r3, #8]
100095a4:	4a0e      	ldr	r2, [pc, #56]	; (100095e0 <system_peripheral_reset+0x460>)
100095a6:	400a      	ands	r2, r1
100095a8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100095aa:	8919      	ldrh	r1, [r3, #8]
100095ac:	2280      	movs	r2, #128	; 0x80
100095ae:	00d2      	lsls	r2, r2, #3
100095b0:	430a      	orrs	r2, r1
100095b2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
100095b6:	e00c      	b.n	100095d2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100095b8:	4b06      	ldr	r3, [pc, #24]	; (100095d4 <system_peripheral_reset+0x454>)
100095ba:	8919      	ldrh	r1, [r3, #8]
100095bc:	4a09      	ldr	r2, [pc, #36]	; (100095e4 <system_peripheral_reset+0x464>)
100095be:	400a      	ands	r2, r1
100095c0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100095c2:	8919      	ldrh	r1, [r3, #8]
100095c4:	2280      	movs	r2, #128	; 0x80
100095c6:	0112      	lsls	r2, r2, #4
100095c8:	430a      	orrs	r2, r1
100095ca:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095cc:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
100095ce:	e000      	b.n	100095d2 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
100095d0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100095d2:	bd00      	pop	{pc}
100095d4:	4000b000 	.word	0x4000b000
100095d8:	fffffeff 	.word	0xfffffeff
100095dc:	fffffdff 	.word	0xfffffdff
100095e0:	fffffbff 	.word	0xfffffbff
100095e4:	fffff7ff 	.word	0xfffff7ff

100095e8 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
100095e8:	2380      	movs	r3, #128	; 0x80
100095ea:	04db      	lsls	r3, r3, #19
100095ec:	469c      	mov	ip, r3
100095ee:	4460      	add	r0, ip
100095f0:	0080      	lsls	r0, r0, #2
100095f2:	6001      	str	r1, [r0, #0]
}
100095f4:	4770      	bx	lr
100095f6:	46c0      	nop			; (mov r8, r8)

100095f8 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
100095f8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100095fa:	4b20      	ldr	r3, [pc, #128]	; (1000967c <uart_rx0_isr_handler+0x84>)
100095fc:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100095fe:	6823      	ldr	r3, [r4, #0]
10009600:	7d1d      	ldrb	r5, [r3, #20]
10009602:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009604:	066a      	lsls	r2, r5, #25
10009606:	d513      	bpl.n	10009630 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009608:	211e      	movs	r1, #30
1000960a:	2222      	movs	r2, #34	; 0x22
1000960c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000960e:	7e1a      	ldrb	r2, [r3, #24]
10009610:	3123      	adds	r1, #35	; 0x23
10009612:	438a      	bics	r2, r1
10009614:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009616:	2321      	movs	r3, #33	; 0x21
10009618:	5ce3      	ldrb	r3, [r4, r3]
1000961a:	071b      	lsls	r3, r3, #28
1000961c:	d506      	bpl.n	1000962c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000961e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009620:	5ce3      	ldrb	r3, [r4, r3]
10009622:	071b      	lsls	r3, r3, #28
10009624:	d502      	bpl.n	1000962c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009626:	0020      	movs	r0, r4
10009628:	6923      	ldr	r3, [r4, #16]
1000962a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000962c:	6823      	ldr	r3, [r4, #0]
1000962e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009630:	07eb      	lsls	r3, r5, #31
10009632:	d522      	bpl.n	1000967a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009634:	6823      	ldr	r3, [r4, #0]
10009636:	7c1b      	ldrb	r3, [r3, #16]
10009638:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000963a:	6962      	ldr	r2, [r4, #20]
1000963c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000963e:	6963      	ldr	r3, [r4, #20]
10009640:	3301      	adds	r3, #1
10009642:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009644:	8ba3      	ldrh	r3, [r4, #28]
10009646:	3b01      	subs	r3, #1
10009648:	b29b      	uxth	r3, r3
1000964a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000964c:	8ba3      	ldrh	r3, [r4, #28]
1000964e:	b29b      	uxth	r3, r3
10009650:	2b00      	cmp	r3, #0
10009652:	d112      	bne.n	1000967a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009654:	3321      	adds	r3, #33	; 0x21
10009656:	5ce3      	ldrb	r3, [r4, r3]
10009658:	075b      	lsls	r3, r3, #29
1000965a:	d50e      	bpl.n	1000967a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000965c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000965e:	5ce3      	ldrb	r3, [r4, r3]
10009660:	075b      	lsls	r3, r3, #29
10009662:	d50a      	bpl.n	1000967a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009664:	2200      	movs	r2, #0
10009666:	2322      	movs	r3, #34	; 0x22
10009668:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000966a:	6822      	ldr	r2, [r4, #0]
1000966c:	7e13      	ldrb	r3, [r2, #24]
1000966e:	2101      	movs	r1, #1
10009670:	438b      	bics	r3, r1
10009672:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009674:	68e3      	ldr	r3, [r4, #12]
10009676:	0020      	movs	r0, r4
10009678:	4798      	blx	r3
			}
		}
	}
}
1000967a:	bd70      	pop	{r4, r5, r6, pc}
1000967c:	10013ed8 	.word	0x10013ed8

10009680 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
10009680:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
10009682:	4b21      	ldr	r3, [pc, #132]	; (10009708 <uart_tx0_isr_handler+0x88>)
10009684:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009686:	6823      	ldr	r3, [r4, #0]
10009688:	791d      	ldrb	r5, [r3, #4]
1000968a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000968c:	07ea      	lsls	r2, r5, #31
1000968e:	d517      	bpl.n	100096c0 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009690:	69a2      	ldr	r2, [r4, #24]
10009692:	7811      	ldrb	r1, [r2, #0]
10009694:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009696:	3201      	adds	r2, #1
10009698:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000969a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000969c:	8be3      	ldrh	r3, [r4, #30]
1000969e:	3b01      	subs	r3, #1
100096a0:	b29b      	uxth	r3, r3
100096a2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100096a4:	8be3      	ldrh	r3, [r4, #30]
100096a6:	b29b      	uxth	r3, r3
100096a8:	2b00      	cmp	r3, #0
100096aa:	d109      	bne.n	100096c0 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100096ac:	6822      	ldr	r2, [r4, #0]
100096ae:	7a13      	ldrb	r3, [r2, #8]
100096b0:	2101      	movs	r1, #1
100096b2:	438b      	bics	r3, r1
100096b4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100096b6:	6822      	ldr	r2, [r4, #0]
100096b8:	7a11      	ldrb	r1, [r2, #8]
100096ba:	2310      	movs	r3, #16
100096bc:	430b      	orrs	r3, r1
100096be:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100096c0:	06eb      	lsls	r3, r5, #27
100096c2:	d512      	bpl.n	100096ea <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100096c4:	2321      	movs	r3, #33	; 0x21
100096c6:	5ce3      	ldrb	r3, [r4, r3]
100096c8:	07db      	lsls	r3, r3, #31
100096ca:	d50e      	bpl.n	100096ea <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100096cc:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100096ce:	5ce3      	ldrb	r3, [r4, r3]
100096d0:	07db      	lsls	r3, r3, #31
100096d2:	d50a      	bpl.n	100096ea <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100096d4:	2200      	movs	r2, #0
100096d6:	2322      	movs	r3, #34	; 0x22
100096d8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100096da:	6822      	ldr	r2, [r4, #0]
100096dc:	7a13      	ldrb	r3, [r2, #8]
100096de:	2110      	movs	r1, #16
100096e0:	438b      	bics	r3, r1
100096e2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100096e4:	0020      	movs	r0, r4
100096e6:	6863      	ldr	r3, [r4, #4]
100096e8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100096ea:	06ab      	lsls	r3, r5, #26
100096ec:	d50a      	bpl.n	10009704 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100096ee:	2321      	movs	r3, #33	; 0x21
100096f0:	5ce3      	ldrb	r3, [r4, r3]
100096f2:	079b      	lsls	r3, r3, #30
100096f4:	d506      	bpl.n	10009704 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
100096f6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100096f8:	5ce3      	ldrb	r3, [r4, r3]
100096fa:	079b      	lsls	r3, r3, #30
100096fc:	d502      	bpl.n	10009704 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
100096fe:	68a3      	ldr	r3, [r4, #8]
10009700:	0020      	movs	r0, r4
10009702:	4798      	blx	r3
		}

	}
}
10009704:	bd70      	pop	{r4, r5, r6, pc}
10009706:	46c0      	nop			; (mov r8, r8)
10009708:	10013ed8 	.word	0x10013ed8

1000970c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000970c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000970e:	4b20      	ldr	r3, [pc, #128]	; (10009790 <uart_rx1_isr_handler+0x84>)
10009710:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
10009712:	6823      	ldr	r3, [r4, #0]
10009714:	7d1d      	ldrb	r5, [r3, #20]
10009716:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009718:	066a      	lsls	r2, r5, #25
1000971a:	d513      	bpl.n	10009744 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000971c:	211e      	movs	r1, #30
1000971e:	2222      	movs	r2, #34	; 0x22
10009720:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
10009722:	7e1a      	ldrb	r2, [r3, #24]
10009724:	3123      	adds	r1, #35	; 0x23
10009726:	438a      	bics	r2, r1
10009728:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000972a:	2321      	movs	r3, #33	; 0x21
1000972c:	5ce3      	ldrb	r3, [r4, r3]
1000972e:	071b      	lsls	r3, r3, #28
10009730:	d506      	bpl.n	10009740 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
10009732:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009734:	5ce3      	ldrb	r3, [r4, r3]
10009736:	071b      	lsls	r3, r3, #28
10009738:	d502      	bpl.n	10009740 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000973a:	0020      	movs	r0, r4
1000973c:	6923      	ldr	r3, [r4, #16]
1000973e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009740:	6823      	ldr	r3, [r4, #0]
10009742:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009744:	07eb      	lsls	r3, r5, #31
10009746:	d522      	bpl.n	1000978e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009748:	6823      	ldr	r3, [r4, #0]
1000974a:	7c1b      	ldrb	r3, [r3, #16]
1000974c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000974e:	6962      	ldr	r2, [r4, #20]
10009750:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
10009752:	6963      	ldr	r3, [r4, #20]
10009754:	3301      	adds	r3, #1
10009756:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009758:	8ba3      	ldrh	r3, [r4, #28]
1000975a:	3b01      	subs	r3, #1
1000975c:	b29b      	uxth	r3, r3
1000975e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009760:	8ba3      	ldrh	r3, [r4, #28]
10009762:	b29b      	uxth	r3, r3
10009764:	2b00      	cmp	r3, #0
10009766:	d112      	bne.n	1000978e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009768:	3321      	adds	r3, #33	; 0x21
1000976a:	5ce3      	ldrb	r3, [r4, r3]
1000976c:	075b      	lsls	r3, r3, #29
1000976e:	d50e      	bpl.n	1000978e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009770:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009772:	5ce3      	ldrb	r3, [r4, r3]
10009774:	075b      	lsls	r3, r3, #29
10009776:	d50a      	bpl.n	1000978e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009778:	2200      	movs	r2, #0
1000977a:	2322      	movs	r3, #34	; 0x22
1000977c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000977e:	6822      	ldr	r2, [r4, #0]
10009780:	7e13      	ldrb	r3, [r2, #24]
10009782:	2101      	movs	r1, #1
10009784:	438b      	bics	r3, r1
10009786:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009788:	68e3      	ldr	r3, [r4, #12]
1000978a:	0020      	movs	r0, r4
1000978c:	4798      	blx	r3
			}
		}
	}
}
1000978e:	bd70      	pop	{r4, r5, r6, pc}
10009790:	10013ed8 	.word	0x10013ed8

10009794 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009794:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009796:	4b21      	ldr	r3, [pc, #132]	; (1000981c <uart_tx1_isr_handler+0x88>)
10009798:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000979a:	6823      	ldr	r3, [r4, #0]
1000979c:	791d      	ldrb	r5, [r3, #4]
1000979e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
100097a0:	07ea      	lsls	r2, r5, #31
100097a2:	d517      	bpl.n	100097d4 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
100097a4:	69a2      	ldr	r2, [r4, #24]
100097a6:	7811      	ldrb	r1, [r2, #0]
100097a8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
100097aa:	3201      	adds	r2, #1
100097ac:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
100097ae:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
100097b0:	8be3      	ldrh	r3, [r4, #30]
100097b2:	3b01      	subs	r3, #1
100097b4:	b29b      	uxth	r3, r3
100097b6:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100097b8:	8be3      	ldrh	r3, [r4, #30]
100097ba:	b29b      	uxth	r3, r3
100097bc:	2b00      	cmp	r3, #0
100097be:	d109      	bne.n	100097d4 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100097c0:	6822      	ldr	r2, [r4, #0]
100097c2:	7a13      	ldrb	r3, [r2, #8]
100097c4:	2101      	movs	r1, #1
100097c6:	438b      	bics	r3, r1
100097c8:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100097ca:	6822      	ldr	r2, [r4, #0]
100097cc:	7a11      	ldrb	r1, [r2, #8]
100097ce:	2310      	movs	r3, #16
100097d0:	430b      	orrs	r3, r1
100097d2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100097d4:	06eb      	lsls	r3, r5, #27
100097d6:	d512      	bpl.n	100097fe <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100097d8:	2321      	movs	r3, #33	; 0x21
100097da:	5ce3      	ldrb	r3, [r4, r3]
100097dc:	07db      	lsls	r3, r3, #31
100097de:	d50e      	bpl.n	100097fe <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100097e0:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100097e2:	5ce3      	ldrb	r3, [r4, r3]
100097e4:	07db      	lsls	r3, r3, #31
100097e6:	d50a      	bpl.n	100097fe <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100097e8:	2200      	movs	r2, #0
100097ea:	2322      	movs	r3, #34	; 0x22
100097ec:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100097ee:	6822      	ldr	r2, [r4, #0]
100097f0:	7a13      	ldrb	r3, [r2, #8]
100097f2:	2110      	movs	r1, #16
100097f4:	438b      	bics	r3, r1
100097f6:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100097f8:	0020      	movs	r0, r4
100097fa:	6863      	ldr	r3, [r4, #4]
100097fc:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100097fe:	06ab      	lsls	r3, r5, #26
10009800:	d50a      	bpl.n	10009818 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
10009802:	2321      	movs	r3, #33	; 0x21
10009804:	5ce3      	ldrb	r3, [r4, r3]
10009806:	079b      	lsls	r3, r3, #30
10009808:	d506      	bpl.n	10009818 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000980a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000980c:	5ce3      	ldrb	r3, [r4, r3]
1000980e:	079b      	lsls	r3, r3, #30
10009810:	d502      	bpl.n	10009818 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
10009812:	68a3      	ldr	r3, [r4, #8]
10009814:	0020      	movs	r0, r4
10009816:	4798      	blx	r3
		}

	}
}
10009818:	bd70      	pop	{r4, r5, r6, pc}
1000981a:	46c0      	nop			; (mov r8, r8)
1000981c:	10013ed8 	.word	0x10013ed8

10009820 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
10009820:	23e1      	movs	r3, #225	; 0xe1
10009822:	025b      	lsls	r3, r3, #9
10009824:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10009826:	2300      	movs	r3, #0
10009828:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000982a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000982c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000982e:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
10009830:	3302      	adds	r3, #2
10009832:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
10009834:	2203      	movs	r2, #3
10009836:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10009838:	3201      	adds	r2, #1
1000983a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
1000983c:	3201      	adds	r2, #1
1000983e:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
10009840:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
10009842:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10009844:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
10009846:	6243      	str	r3, [r0, #36]	; 0x24
}
10009848:	4770      	bx	lr
1000984a:	46c0      	nop			; (mov r8, r8)

1000984c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000984e:	464f      	mov	r7, r9
10009850:	4646      	mov	r6, r8
10009852:	b4c0      	push	{r6, r7}
10009854:	0005      	movs	r5, r0
10009856:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10009858:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000985a:	2300      	movs	r3, #0
1000985c:	6043      	str	r3, [r0, #4]
1000985e:	6083      	str	r3, [r0, #8]
10009860:	60c3      	str	r3, [r0, #12]
10009862:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009864:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
10009866:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
10009868:	2200      	movs	r2, #0
1000986a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000986c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000986e:	3320      	adds	r3, #32
10009870:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
10009872:	3301      	adds	r3, #1
10009874:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
10009876:	3301      	adds	r3, #1
10009878:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000987a:	4b55      	ldr	r3, [pc, #340]	; (100099d0 <uart_init+0x184>)
1000987c:	4299      	cmp	r1, r3
1000987e:	d118      	bne.n	100098b2 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
10009880:	2009      	movs	r0, #9
10009882:	4c54      	ldr	r4, [pc, #336]	; (100099d4 <uart_init+0x188>)
10009884:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
10009886:	200a      	movs	r0, #10
10009888:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000988a:	2009      	movs	r0, #9
1000988c:	4c52      	ldr	r4, [pc, #328]	; (100099d8 <uart_init+0x18c>)
1000988e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
10009890:	200a      	movs	r0, #10
10009892:	47a0      	blx	r4
		_uart_instances[0] = module;
10009894:	4b51      	ldr	r3, [pc, #324]	; (100099dc <uart_init+0x190>)
10009896:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10009898:	4951      	ldr	r1, [pc, #324]	; (100099e0 <uart_init+0x194>)
1000989a:	2010      	movs	r0, #16
1000989c:	4c51      	ldr	r4, [pc, #324]	; (100099e4 <uart_init+0x198>)
1000989e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
100098a0:	4951      	ldr	r1, [pc, #324]	; (100099e8 <uart_init+0x19c>)
100098a2:	2011      	movs	r0, #17
100098a4:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100098a6:	4b51      	ldr	r3, [pc, #324]	; (100099ec <uart_init+0x1a0>)
100098a8:	2201      	movs	r2, #1
100098aa:	601a      	str	r2, [r3, #0]
100098ac:	3201      	adds	r2, #1
100098ae:	601a      	str	r2, [r3, #0]
100098b0:	e01a      	b.n	100098e8 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
100098b2:	4b4f      	ldr	r3, [pc, #316]	; (100099f0 <uart_init+0x1a4>)
100098b4:	4299      	cmp	r1, r3
100098b6:	d117      	bne.n	100098e8 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
100098b8:	200b      	movs	r0, #11
100098ba:	4c46      	ldr	r4, [pc, #280]	; (100099d4 <uart_init+0x188>)
100098bc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
100098be:	200c      	movs	r0, #12
100098c0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
100098c2:	200b      	movs	r0, #11
100098c4:	4c44      	ldr	r4, [pc, #272]	; (100099d8 <uart_init+0x18c>)
100098c6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
100098c8:	200c      	movs	r0, #12
100098ca:	47a0      	blx	r4
		_uart_instances[1] = module;
100098cc:	4b43      	ldr	r3, [pc, #268]	; (100099dc <uart_init+0x190>)
100098ce:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
100098d0:	4948      	ldr	r1, [pc, #288]	; (100099f4 <uart_init+0x1a8>)
100098d2:	2012      	movs	r0, #18
100098d4:	4c43      	ldr	r4, [pc, #268]	; (100099e4 <uart_init+0x198>)
100098d6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
100098d8:	4947      	ldr	r1, [pc, #284]	; (100099f8 <uart_init+0x1ac>)
100098da:	2013      	movs	r0, #19
100098dc:	47a0      	blx	r4
100098de:	4b43      	ldr	r3, [pc, #268]	; (100099ec <uart_init+0x1a0>)
100098e0:	2204      	movs	r2, #4
100098e2:	601a      	str	r2, [r3, #0]
100098e4:	3204      	adds	r2, #4
100098e6:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100098e8:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
100098ea:	2204      	movs	r2, #4
100098ec:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100098ee:	2b00      	cmp	r3, #0
100098f0:	d152      	bne.n	10009998 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
100098f2:	3302      	adds	r3, #2
100098f4:	4698      	mov	r8, r3
100098f6:	e04f      	b.n	10009998 <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100098f8:	8a31      	ldrh	r1, [r6, #16]
100098fa:	ce01      	ldmia	r6!, {r0}
100098fc:	b2c0      	uxtb	r0, r0
100098fe:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
10009900:	3401      	adds	r4, #1
10009902:	b2e4      	uxtb	r4, r4
10009904:	4544      	cmp	r4, r8
10009906:	d3f7      	bcc.n	100098f8 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009908:	682b      	ldr	r3, [r5, #0]
1000990a:	7d1a      	ldrb	r2, [r3, #20]
1000990c:	07d2      	lsls	r2, r2, #31
1000990e:	d504      	bpl.n	1000991a <uart_init+0xce>
10009910:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
10009912:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009914:	7d1a      	ldrb	r2, [r3, #20]
10009916:	420a      	tst	r2, r1
10009918:	d1fb      	bne.n	10009912 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000991a:	2100      	movs	r1, #0
1000991c:	2220      	movs	r2, #32
1000991e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
10009920:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
10009922:	1e59      	subs	r1, r3, #1
10009924:	418b      	sbcs	r3, r1
10009926:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009928:	793b      	ldrb	r3, [r7, #4]
1000992a:	797a      	ldrb	r2, [r7, #5]
1000992c:	4313      	orrs	r3, r2
1000992e:	430b      	orrs	r3, r1
	switch(config->parity) {
10009930:	79ba      	ldrb	r2, [r7, #6]
10009932:	2a02      	cmp	r2, #2
10009934:	d00d      	beq.n	10009952 <uart_init+0x106>
10009936:	b2d1      	uxtb	r1, r2
10009938:	2902      	cmp	r1, #2
1000993a:	d802      	bhi.n	10009942 <uart_init+0xf6>
1000993c:	2a01      	cmp	r2, #1
1000993e:	d005      	beq.n	1000994c <uart_init+0x100>
10009940:	e00f      	b.n	10009962 <uart_init+0x116>
10009942:	2a03      	cmp	r2, #3
10009944:	d008      	beq.n	10009958 <uart_init+0x10c>
10009946:	2a04      	cmp	r2, #4
10009948:	d009      	beq.n	1000995e <uart_init+0x112>
1000994a:	e00a      	b.n	10009962 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
1000994c:	2202      	movs	r2, #2
1000994e:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
10009950:	e007      	b.n	10009962 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
10009952:	2206      	movs	r2, #6
10009954:	4313      	orrs	r3, r2
			break;
10009956:	e004      	b.n	10009962 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
10009958:	220a      	movs	r2, #10
1000995a:	4313      	orrs	r3, r2
			break;
1000995c:	e001      	b.n	10009962 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
1000995e:	220e      	movs	r2, #14
10009960:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
10009962:	2220      	movs	r2, #32
10009964:	6829      	ldr	r1, [r5, #0]
10009966:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10009968:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000996a:	4b24      	ldr	r3, [pc, #144]	; (100099fc <uart_init+0x1b0>)
1000996c:	4798      	blx	r3
1000996e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
10009970:	0031      	movs	r1, r6
10009972:	4b23      	ldr	r3, [pc, #140]	; (10009a00 <uart_init+0x1b4>)
10009974:	4798      	blx	r3
10009976:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10009978:	0400      	lsls	r0, r0, #16
1000997a:	0c00      	lsrs	r0, r0, #16
1000997c:	4370      	muls	r0, r6
1000997e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
10009980:	0931      	lsrs	r1, r6, #4
10009982:	4288      	cmp	r0, r1
10009984:	d906      	bls.n	10009994 <uart_init+0x148>
10009986:	2300      	movs	r3, #0
		i++;
10009988:	3301      	adds	r3, #1
1000998a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000998c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000998e:	4288      	cmp	r0, r1
10009990:	d8fa      	bhi.n	10009988 <uart_init+0x13c>
10009992:	e007      	b.n	100099a4 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009994:	2300      	movs	r3, #0
10009996:	e005      	b.n	100099a4 <uart_init+0x158>
10009998:	003e      	movs	r6, r7
1000999a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000999c:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000999e:	4b19      	ldr	r3, [pc, #100]	; (10009a04 <uart_init+0x1b8>)
100099a0:	4699      	mov	r9, r3
100099a2:	e7a9      	b.n	100098f8 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
100099a4:	2100      	movs	r1, #0
100099a6:	2028      	movs	r0, #40	; 0x28
100099a8:	682c      	ldr	r4, [r5, #0]
100099aa:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
100099ac:	3301      	adds	r3, #1
100099ae:	071b      	lsls	r3, r3, #28
100099b0:	0f5b      	lsrs	r3, r3, #29
100099b2:	00d2      	lsls	r2, r2, #3
100099b4:	4313      	orrs	r3, r2
100099b6:	b29b      	uxth	r3, r3
100099b8:	682a      	ldr	r2, [r5, #0]
100099ba:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
100099bc:	682b      	ldr	r3, [r5, #0]
100099be:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
100099c0:	682b      	ldr	r3, [r5, #0]
100099c2:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
100099c4:	2000      	movs	r0, #0
100099c6:	bc0c      	pop	{r2, r3}
100099c8:	4690      	mov	r8, r2
100099ca:	4699      	mov	r9, r3
100099cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100099ce:	46c0      	nop			; (mov r8, r8)
100099d0:	40004000 	.word	0x40004000
100099d4:	10009181 	.word	0x10009181
100099d8:	10008e25 	.word	0x10008e25
100099dc:	10013ed8 	.word	0x10013ed8
100099e0:	100095f9 	.word	0x100095f9
100099e4:	100095e9 	.word	0x100095e9
100099e8:	10009681 	.word	0x10009681
100099ec:	e000e100 	.word	0xe000e100
100099f0:	40005000 	.word	0x40005000
100099f4:	1000970d 	.word	0x1000970d
100099f8:	10009795 	.word	0x10009795
100099fc:	10008e19 	.word	0x10008e19
10009a00:	1000ead1 	.word	0x1000ead1
10009a04:	10008c49 	.word	0x10008c49

10009a08 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
10009a08:	6802      	ldr	r2, [r0, #0]
10009a0a:	2001      	movs	r0, #1
10009a0c:	7913      	ldrb	r3, [r2, #4]
10009a0e:	4203      	tst	r3, r0
10009a10:	d0fc      	beq.n	10009a0c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
10009a12:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009a14:	2000      	movs	r0, #0
10009a16:	4770      	bx	lr

10009a18 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009a18:	6802      	ldr	r2, [r0, #0]
10009a1a:	2001      	movs	r0, #1
10009a1c:	7d13      	ldrb	r3, [r2, #20]
10009a1e:	4203      	tst	r3, r0
10009a20:	d0fc      	beq.n	10009a1c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009a22:	7c13      	ldrb	r3, [r2, #16]
10009a24:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009a26:	2000      	movs	r0, #0
10009a28:	4770      	bx	lr
10009a2a:	46c0      	nop			; (mov r8, r8)

10009a2c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009a2c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009a2e:	2a00      	cmp	r2, #0
10009a30:	d00d      	beq.n	10009a4e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009a32:	330b      	adds	r3, #11
10009a34:	5cc3      	ldrb	r3, [r0, r3]
10009a36:	b2db      	uxtb	r3, r3
10009a38:	2b05      	cmp	r3, #5
10009a3a:	d008      	beq.n	10009a4e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009a3c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009a3e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009a40:	2205      	movs	r2, #5
10009a42:	2322      	movs	r3, #34	; 0x22
10009a44:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009a46:	6803      	ldr	r3, [r0, #0]
10009a48:	3a04      	subs	r2, #4
10009a4a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009a4c:	2300      	movs	r3, #0
}
10009a4e:	0018      	movs	r0, r3
10009a50:	4770      	bx	lr
10009a52:	46c0      	nop			; (mov r8, r8)

10009a54 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009a54:	0093      	lsls	r3, r2, #2
10009a56:	18c3      	adds	r3, r0, r3
10009a58:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
10009a5a:	2120      	movs	r1, #32
10009a5c:	2301      	movs	r3, #1
10009a5e:	4093      	lsls	r3, r2
10009a60:	5c42      	ldrb	r2, [r0, r1]
10009a62:	4313      	orrs	r3, r2
10009a64:	5443      	strb	r3, [r0, r1]
}
10009a66:	4770      	bx	lr

10009a68 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009a68:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009a6a:	2221      	movs	r2, #33	; 0x21
10009a6c:	2301      	movs	r3, #1
10009a6e:	408b      	lsls	r3, r1
10009a70:	5c84      	ldrb	r4, [r0, r2]
10009a72:	4323      	orrs	r3, r4
10009a74:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
10009a76:	2901      	cmp	r1, #1
10009a78:	d104      	bne.n	10009a84 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009a7a:	6802      	ldr	r2, [r0, #0]
10009a7c:	7a11      	ldrb	r1, [r2, #8]
10009a7e:	2320      	movs	r3, #32
10009a80:	430b      	orrs	r3, r1
10009a82:	7213      	strb	r3, [r2, #8]
	}
}
10009a84:	bd10      	pop	{r4, pc}
10009a86:	46c0      	nop			; (mov r8, r8)

10009a88 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009a88:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009a8a:	2201      	movs	r2, #1
10009a8c:	408a      	lsls	r2, r1
10009a8e:	2421      	movs	r4, #33	; 0x21
10009a90:	5d03      	ldrb	r3, [r0, r4]
10009a92:	4393      	bics	r3, r2
10009a94:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009a96:	2901      	cmp	r1, #1
10009a98:	d104      	bne.n	10009aa4 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009a9a:	6802      	ldr	r2, [r0, #0]
10009a9c:	7a13      	ldrb	r3, [r2, #8]
10009a9e:	311f      	adds	r1, #31
10009aa0:	438b      	bics	r3, r1
10009aa2:	7213      	strb	r3, [r2, #8]
	}

}
10009aa4:	bd10      	pop	{r4, pc}
10009aa6:	46c0      	nop			; (mov r8, r8)

10009aa8 <uart_enable_transmit_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
10009aa8:	6802      	ldr	r2, [r0, #0]
10009aaa:	7a11      	ldrb	r1, [r2, #8]
10009aac:	2310      	movs	r3, #16
10009aae:	430b      	orrs	r3, r1
10009ab0:	7213      	strb	r3, [r2, #8]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009ab2:	6803      	ldr	r3, [r0, #0]
10009ab4:	4a07      	ldr	r2, [pc, #28]	; (10009ad4 <uart_enable_transmit_dma+0x2c>)
10009ab6:	4293      	cmp	r3, r2
10009ab8:	d104      	bne.n	10009ac4 <uart_enable_transmit_dma+0x1c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009aba:	2102      	movs	r1, #2
10009abc:	2380      	movs	r3, #128	; 0x80
10009abe:	4a06      	ldr	r2, [pc, #24]	; (10009ad8 <uart_enable_transmit_dma+0x30>)
10009ac0:	50d1      	str	r1, [r2, r3]
10009ac2:	e006      	b.n	10009ad2 <uart_enable_transmit_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009ac4:	4a05      	ldr	r2, [pc, #20]	; (10009adc <uart_enable_transmit_dma+0x34>)
10009ac6:	4293      	cmp	r3, r2
10009ac8:	d103      	bne.n	10009ad2 <uart_enable_transmit_dma+0x2a>
10009aca:	2108      	movs	r1, #8
10009acc:	2380      	movs	r3, #128	; 0x80
10009ace:	4a02      	ldr	r2, [pc, #8]	; (10009ad8 <uart_enable_transmit_dma+0x30>)
10009ad0:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009ad2:	4770      	bx	lr
10009ad4:	40004000 	.word	0x40004000
10009ad8:	e000e100 	.word	0xe000e100
10009adc:	40005000 	.word	0x40005000

10009ae0 <uart_enable_receive_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->RX_INTERRUPT_MASK.reg |= UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009ae0:	6802      	ldr	r2, [r0, #0]
10009ae2:	7e11      	ldrb	r1, [r2, #24]
10009ae4:	2301      	movs	r3, #1
10009ae6:	430b      	orrs	r3, r1
10009ae8:	7613      	strb	r3, [r2, #24]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009aea:	6803      	ldr	r3, [r0, #0]
10009aec:	4a07      	ldr	r2, [pc, #28]	; (10009b0c <uart_enable_receive_dma+0x2c>)
10009aee:	4293      	cmp	r3, r2
10009af0:	d104      	bne.n	10009afc <uart_enable_receive_dma+0x1c>
10009af2:	2102      	movs	r1, #2
10009af4:	2380      	movs	r3, #128	; 0x80
10009af6:	4a06      	ldr	r2, [pc, #24]	; (10009b10 <uart_enable_receive_dma+0x30>)
10009af8:	50d1      	str	r1, [r2, r3]
10009afa:	e006      	b.n	10009b0a <uart_enable_receive_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009afc:	4a05      	ldr	r2, [pc, #20]	; (10009b14 <uart_enable_receive_dma+0x34>)
10009afe:	4293      	cmp	r3, r2
10009b00:	d103      	bne.n	10009b0a <uart_enable_receive_dma+0x2a>
10009b02:	2108      	movs	r1, #8
10009b04:	2380      	movs	r3, #128	; 0x80
10009b06:	4a02      	ldr	r2, [pc, #8]	; (10009b10 <uart_enable_receive_dma+0x30>)
10009b08:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009b0a:	4770      	bx	lr
10009b0c:	40004000 	.word	0x40004000
10009b10:	e000e100 	.word	0xe000e100
10009b14:	40005000 	.word	0x40005000

10009b18 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009b18:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b1a:	4647      	mov	r7, r8
10009b1c:	b480      	push	{r7}
10009b1e:	000c      	movs	r4, r1
10009b20:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009b22:	2800      	cmp	r0, #0
10009b24:	d10d      	bne.n	10009b42 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009b26:	2a00      	cmp	r2, #0
10009b28:	dd0e      	ble.n	10009b48 <_read+0x30>
10009b2a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009b2c:	4e08      	ldr	r6, [pc, #32]	; (10009b50 <_read+0x38>)
10009b2e:	4d09      	ldr	r5, [pc, #36]	; (10009b54 <_read+0x3c>)
10009b30:	6830      	ldr	r0, [r6, #0]
10009b32:	0021      	movs	r1, r4
10009b34:	682b      	ldr	r3, [r5, #0]
10009b36:	4798      	blx	r3
		ptr++;
10009b38:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009b3a:	42a7      	cmp	r7, r4
10009b3c:	d1f8      	bne.n	10009b30 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009b3e:	4640      	mov	r0, r8
10009b40:	e003      	b.n	10009b4a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009b42:	2001      	movs	r0, #1
10009b44:	4240      	negs	r0, r0
10009b46:	e000      	b.n	10009b4a <_read+0x32>
	}

	for (; len > 0; --len) {
10009b48:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009b4a:	bc04      	pop	{r2}
10009b4c:	4690      	mov	r8, r2
10009b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b50:	10013ee8 	.word	0x10013ee8
10009b54:	10013ee0 	.word	0x10013ee0

10009b58 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009b58:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b5a:	4647      	mov	r7, r8
10009b5c:	b480      	push	{r7}
10009b5e:	000e      	movs	r6, r1
10009b60:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009b62:	3801      	subs	r0, #1
10009b64:	2802      	cmp	r0, #2
10009b66:	d811      	bhi.n	10009b8c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009b68:	2a00      	cmp	r2, #0
10009b6a:	d012      	beq.n	10009b92 <_write+0x3a>
10009b6c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009b6e:	4b0c      	ldr	r3, [pc, #48]	; (10009ba0 <_write+0x48>)
10009b70:	4698      	mov	r8, r3
10009b72:	4f0c      	ldr	r7, [pc, #48]	; (10009ba4 <_write+0x4c>)
10009b74:	4643      	mov	r3, r8
10009b76:	6818      	ldr	r0, [r3, #0]
10009b78:	5d31      	ldrb	r1, [r6, r4]
10009b7a:	683b      	ldr	r3, [r7, #0]
10009b7c:	4798      	blx	r3
10009b7e:	2800      	cmp	r0, #0
10009b80:	db09      	blt.n	10009b96 <_write+0x3e>
			return -1;
		}
		++nChars;
10009b82:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009b84:	42a5      	cmp	r5, r4
10009b86:	d1f5      	bne.n	10009b74 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009b88:	0020      	movs	r0, r4
10009b8a:	e006      	b.n	10009b9a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009b8c:	2001      	movs	r0, #1
10009b8e:	4240      	negs	r0, r0
10009b90:	e003      	b.n	10009b9a <_write+0x42>
	}

	for (; len != 0; --len) {
10009b92:	2000      	movs	r0, #0
10009b94:	e001      	b.n	10009b9a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
10009b96:	2001      	movs	r0, #1
10009b98:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009b9a:	bc04      	pop	{r2}
10009b9c:	4690      	mov	r8, r2
10009b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ba0:	10013ee8 	.word	0x10013ee8
10009ba4:	10013ee4 	.word	0x10013ee4

10009ba8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10009ba8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10009baa:	4a06      	ldr	r2, [pc, #24]	; (10009bc4 <_sbrk+0x1c>)
10009bac:	6812      	ldr	r2, [r2, #0]
10009bae:	2a00      	cmp	r2, #0
10009bb0:	d102      	bne.n	10009bb8 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10009bb2:	4905      	ldr	r1, [pc, #20]	; (10009bc8 <_sbrk+0x20>)
10009bb4:	4a03      	ldr	r2, [pc, #12]	; (10009bc4 <_sbrk+0x1c>)
10009bb6:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009bb8:	4a02      	ldr	r2, [pc, #8]	; (10009bc4 <_sbrk+0x1c>)
10009bba:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009bbc:	18c3      	adds	r3, r0, r3
10009bbe:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10009bc0:	4770      	bx	lr
10009bc2:	46c0      	nop			; (mov r8, r8)
10009bc4:	10012400 	.word	0x10012400
10009bc8:	10015878 	.word	0x10015878

10009bcc <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009bcc:	2001      	movs	r0, #1
10009bce:	4240      	negs	r0, r0
10009bd0:	4770      	bx	lr
10009bd2:	46c0      	nop			; (mov r8, r8)

10009bd4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009bd4:	2380      	movs	r3, #128	; 0x80
10009bd6:	019b      	lsls	r3, r3, #6
10009bd8:	604b      	str	r3, [r1, #4]

	return 0;
}
10009bda:	2000      	movs	r0, #0
10009bdc:	4770      	bx	lr
10009bde:	46c0      	nop			; (mov r8, r8)

10009be0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009be0:	2001      	movs	r0, #1
10009be2:	4770      	bx	lr

10009be4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009be4:	2000      	movs	r0, #0
10009be6:	4770      	bx	lr

10009be8 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
10009be8:	2000      	movs	r0, #0
10009bea:	4770      	bx	lr

10009bec <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
10009bec:	2000      	movs	r0, #0
10009bee:	4770      	bx	lr

10009bf0 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009bf0:	78c0      	ldrb	r0, [r0, #3]
10009bf2:	2800      	cmp	r0, #0
10009bf4:	d000      	beq.n	10009bf8 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009bf6:	20e2      	movs	r0, #226	; 0xe2
}
10009bf8:	4770      	bx	lr
10009bfa:	46c0      	nop			; (mov r8, r8)

10009bfc <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
10009bfc:	2000      	movs	r0, #0
10009bfe:	4770      	bx	lr

10009c00 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
10009c00:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
10009c02:	7800      	ldrb	r0, [r0, #0]
10009c04:	2800      	cmp	r0, #0
10009c06:	d006      	beq.n	10009c16 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
10009c08:	4803      	ldr	r0, [pc, #12]	; (10009c18 <ble_scan_report_handler+0x18>)
10009c0a:	4b04      	ldr	r3, [pc, #16]	; (10009c1c <ble_scan_report_handler+0x1c>)
10009c0c:	4798      	blx	r3
10009c0e:	4804      	ldr	r0, [pc, #16]	; (10009c20 <ble_scan_report_handler+0x20>)
10009c10:	4b04      	ldr	r3, [pc, #16]	; (10009c24 <ble_scan_report_handler+0x24>)
10009c12:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10009c14:	20e2      	movs	r0, #226	; 0xe2
}
10009c16:	bd10      	pop	{r4, pc}
10009c18:	100118d4 	.word	0x100118d4
10009c1c:	10010499 	.word	0x10010499
10009c20:	100118d8 	.word	0x100118d8
10009c24:	10010379 	.word	0x10010379

10009c28 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
10009c28:	b510      	push	{r4, lr}
10009c2a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
10009c2c:	78c0      	ldrb	r0, [r0, #3]
10009c2e:	2800      	cmp	r0, #0
10009c30:	d008      	beq.n	10009c44 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
10009c32:	4805      	ldr	r0, [pc, #20]	; (10009c48 <ble_mtu_changed_cmd_complete_handler+0x20>)
10009c34:	4b05      	ldr	r3, [pc, #20]	; (10009c4c <ble_mtu_changed_cmd_complete_handler+0x24>)
10009c36:	4798      	blx	r3
10009c38:	78a2      	ldrb	r2, [r4, #2]
10009c3a:	8821      	ldrh	r1, [r4, #0]
10009c3c:	4804      	ldr	r0, [pc, #16]	; (10009c50 <ble_mtu_changed_cmd_complete_handler+0x28>)
10009c3e:	4b05      	ldr	r3, [pc, #20]	; (10009c54 <ble_mtu_changed_cmd_complete_handler+0x2c>)
10009c40:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
10009c42:	20e2      	movs	r0, #226	; 0xe2
}
10009c44:	bd10      	pop	{r4, pc}
10009c46:	46c0      	nop			; (mov r8, r8)
10009c48:	100118d4 	.word	0x100118d4
10009c4c:	10010499 	.word	0x10010499
10009c50:	100118ec 	.word	0x100118ec
10009c54:	10010379 	.word	0x10010379

10009c58 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
10009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009c5a:	0004      	movs	r4, r0
10009c5c:	4b19      	ldr	r3, [pc, #100]	; (10009cc4 <ble_disconnected_state_handler+0x6c>)
10009c5e:	229b      	movs	r2, #155	; 0x9b
10009c60:	0092      	lsls	r2, r2, #2
10009c62:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009c64:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c66:	2600      	movs	r6, #0
10009c68:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009c6a:	001a      	movs	r2, r3
10009c6c:	3a56      	subs	r2, #86	; 0x56
10009c6e:	8811      	ldrh	r1, [r2, #0]
10009c70:	8822      	ldrh	r2, [r4, #0]
10009c72:	4291      	cmp	r1, r2
10009c74:	d119      	bne.n	10009caa <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009c76:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
10009c78:	2a05      	cmp	r2, #5
10009c7a:	d001      	beq.n	10009c80 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
10009c7c:	2a08      	cmp	r2, #8
10009c7e:	d101      	bne.n	10009c84 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
10009c80:	7007      	strb	r7, [r0, #0]
10009c82:	e012      	b.n	10009caa <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
10009c84:	2a07      	cmp	r2, #7
10009c86:	d80f      	bhi.n	10009ca8 <ble_disconnected_state_handler+0x50>
10009c88:	0092      	lsls	r2, r2, #2
10009c8a:	490f      	ldr	r1, [pc, #60]	; (10009cc8 <ble_disconnected_state_handler+0x70>)
10009c8c:	588a      	ldr	r2, [r1, r2]
10009c8e:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009c90:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
10009c92:	4a0e      	ldr	r2, [pc, #56]	; (10009ccc <ble_disconnected_state_handler+0x74>)
10009c94:	7812      	ldrb	r2, [r2, #0]
10009c96:	2a00      	cmp	r2, #0
10009c98:	d007      	beq.n	10009caa <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
10009c9a:	4a0c      	ldr	r2, [pc, #48]	; (10009ccc <ble_disconnected_state_handler+0x74>)
10009c9c:	7812      	ldrb	r2, [r2, #0]
10009c9e:	3a01      	subs	r2, #1
10009ca0:	b2d2      	uxtb	r2, r2
10009ca2:	490a      	ldr	r1, [pc, #40]	; (10009ccc <ble_disconnected_state_handler+0x74>)
10009ca4:	700a      	strb	r2, [r1, #0]
10009ca6:	e000      	b.n	10009caa <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
10009ca8:	7006      	strb	r6, [r0, #0]
10009caa:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cac:	42ab      	cmp	r3, r5
10009cae:	d1db      	bne.n	10009c68 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
10009cb0:	4807      	ldr	r0, [pc, #28]	; (10009cd0 <ble_disconnected_state_handler+0x78>)
10009cb2:	4b08      	ldr	r3, [pc, #32]	; (10009cd4 <ble_disconnected_state_handler+0x7c>)
10009cb4:	4798      	blx	r3
10009cb6:	8822      	ldrh	r2, [r4, #0]
10009cb8:	78a1      	ldrb	r1, [r4, #2]
10009cba:	4807      	ldr	r0, [pc, #28]	; (10009cd8 <ble_disconnected_state_handler+0x80>)
10009cbc:	4b07      	ldr	r3, [pc, #28]	; (10009cdc <ble_disconnected_state_handler+0x84>)
10009cbe:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10009cc0:	2000      	movs	r0, #0
10009cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009cc4:	10013f62 	.word	0x10013f62
10009cc8:	10011764 	.word	0x10011764
10009ccc:	10014170 	.word	0x10014170
10009cd0:	100118d4 	.word	0x100118d4
10009cd4:	10010499 	.word	0x10010499
10009cd8:	10011924 	.word	0x10011924
10009cdc:	10010379 	.word	0x10010379

10009ce0 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
10009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009ce2:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009ce4:	8801      	ldrh	r1, [r0, #0]
10009ce6:	4b28      	ldr	r3, [pc, #160]	; (10009d88 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ce8:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
10009cea:	891a      	ldrh	r2, [r3, #8]
10009cec:	428a      	cmp	r2, r1
10009cee:	d104      	bne.n	10009cfa <ble_encryption_status_change_handler+0x1a>
10009cf0:	001a      	movs	r2, r3
10009cf2:	325e      	adds	r2, #94	; 0x5e
10009cf4:	7812      	ldrb	r2, [r2, #0]
10009cf6:	2a06      	cmp	r2, #6
10009cf8:	d02e      	beq.n	10009d58 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009cfa:	3401      	adds	r4, #1
10009cfc:	b2e4      	uxtb	r4, r4
10009cfe:	337c      	adds	r3, #124	; 0x7c
10009d00:	2c05      	cmp	r4, #5
10009d02:	d1f2      	bne.n	10009cea <ble_encryption_status_change_handler+0xa>
10009d04:	e039      	b.n	10009d7a <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
10009d06:	4920      	ldr	r1, [pc, #128]	; (10009d88 <ble_encryption_status_change_handler+0xa8>)
10009d08:	0163      	lsls	r3, r4, #5
10009d0a:	1b1a      	subs	r2, r3, r4
10009d0c:	0092      	lsls	r2, r2, #2
10009d0e:	188a      	adds	r2, r1, r2
10009d10:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
10009d12:	0014      	movs	r4, r2
10009d14:	345e      	adds	r4, #94	; 0x5e
10009d16:	2307      	movs	r3, #7
10009d18:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
10009d1a:	481c      	ldr	r0, [pc, #112]	; (10009d8c <ble_encryption_status_change_handler+0xac>)
10009d1c:	4b1c      	ldr	r3, [pc, #112]	; (10009d90 <ble_encryption_status_change_handler+0xb0>)
10009d1e:	4798      	blx	r3
10009d20:	481c      	ldr	r0, [pc, #112]	; (10009d94 <ble_encryption_status_change_handler+0xb4>)
10009d22:	4b1d      	ldr	r3, [pc, #116]	; (10009d98 <ble_encryption_status_change_handler+0xb8>)
10009d24:	4798      	blx	r3
		return AT_BLE_FAILURE;
10009d26:	25e2      	movs	r5, #226	; 0xe2
10009d28:	e02b      	b.n	10009d82 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
10009d2a:	4818      	ldr	r0, [pc, #96]	; (10009d8c <ble_encryption_status_change_handler+0xac>)
10009d2c:	4b18      	ldr	r3, [pc, #96]	; (10009d90 <ble_encryption_status_change_handler+0xb0>)
10009d2e:	4798      	blx	r3
10009d30:	481a      	ldr	r0, [pc, #104]	; (10009d9c <ble_encryption_status_change_handler+0xbc>)
10009d32:	4b19      	ldr	r3, [pc, #100]	; (10009d98 <ble_encryption_status_change_handler+0xb8>)
10009d34:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
10009d36:	4914      	ldr	r1, [pc, #80]	; (10009d88 <ble_encryption_status_change_handler+0xa8>)
10009d38:	0163      	lsls	r3, r4, #5
10009d3a:	1b1a      	subs	r2, r3, r4
10009d3c:	0092      	lsls	r2, r2, #2
10009d3e:	188a      	adds	r2, r1, r2
10009d40:	0010      	movs	r0, r2
10009d42:	305e      	adds	r0, #94	; 0x5e
10009d44:	2708      	movs	r7, #8
10009d46:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
10009d48:	78f0      	ldrb	r0, [r6, #3]
10009d4a:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
10009d4c:	78b2      	ldrb	r2, [r6, #2]
10009d4e:	1b1c      	subs	r4, r3, r4
10009d50:	00a4      	lsls	r4, r4, #2
10009d52:	190c      	adds	r4, r1, r4
10009d54:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
10009d56:	e014      	b.n	10009d82 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009d58:	78b5      	ldrb	r5, [r6, #2]
10009d5a:	2d00      	cmp	r5, #0
10009d5c:	d0e5      	beq.n	10009d2a <ble_encryption_status_change_handler+0x4a>
10009d5e:	e7d2      	b.n	10009d06 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
10009d60:	4e0a      	ldr	r6, [pc, #40]	; (10009d8c <ble_encryption_status_change_handler+0xac>)
10009d62:	0030      	movs	r0, r6
10009d64:	4d0a      	ldr	r5, [pc, #40]	; (10009d90 <ble_encryption_status_change_handler+0xb0>)
10009d66:	47a8      	blx	r5
10009d68:	480c      	ldr	r0, [pc, #48]	; (10009d9c <ble_encryption_status_change_handler+0xbc>)
10009d6a:	4c0b      	ldr	r4, [pc, #44]	; (10009d98 <ble_encryption_status_change_handler+0xb8>)
10009d6c:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
10009d6e:	0030      	movs	r0, r6
10009d70:	47a8      	blx	r5
10009d72:	480b      	ldr	r0, [pc, #44]	; (10009da0 <ble_encryption_status_change_handler+0xc0>)
10009d74:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009d76:	25e2      	movs	r5, #226	; 0xe2
10009d78:	e003      	b.n	10009d82 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
10009d7a:	78b5      	ldrb	r5, [r6, #2]
10009d7c:	2d00      	cmp	r5, #0
10009d7e:	d1c2      	bne.n	10009d06 <ble_encryption_status_change_handler+0x26>
10009d80:	e7ee      	b.n	10009d60 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
10009d82:	0028      	movs	r0, r5
10009d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009d86:	46c0      	nop			; (mov r8, r8)
10009d88:	10013f04 	.word	0x10013f04
10009d8c:	100118d4 	.word	0x100118d4
10009d90:	10010499 	.word	0x10010499
10009d94:	10011954 	.word	0x10011954
10009d98:	10010379 	.word	0x10010379
10009d9c:	10011968 	.word	0x10011968
10009da0:	1001198c 	.word	0x1001198c

10009da4 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
10009da4:	b510      	push	{r4, lr}
10009da6:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
10009da8:	4b15      	ldr	r3, [pc, #84]	; (10009e00 <ble_scan_info_handler+0x5c>)
10009daa:	781b      	ldrb	r3, [r3, #0]
10009dac:	b2db      	uxtb	r3, r3
10009dae:	2b13      	cmp	r3, #19
10009db0:	d812      	bhi.n	10009dd8 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
10009db2:	4c13      	ldr	r4, [pc, #76]	; (10009e00 <ble_scan_info_handler+0x5c>)
10009db4:	7823      	ldrb	r3, [r4, #0]
10009db6:	b2db      	uxtb	r3, r3
10009db8:	0098      	lsls	r0, r3, #2
10009dba:	18c0      	adds	r0, r0, r3
10009dbc:	00c0      	lsls	r0, r0, #3
10009dbe:	18c3      	adds	r3, r0, r3
10009dc0:	4810      	ldr	r0, [pc, #64]	; (10009e04 <ble_scan_info_handler+0x60>)
10009dc2:	1818      	adds	r0, r3, r0
10009dc4:	2229      	movs	r2, #41	; 0x29
10009dc6:	4b10      	ldr	r3, [pc, #64]	; (10009e08 <ble_scan_info_handler+0x64>)
10009dc8:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
10009dca:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
10009dcc:	7823      	ldrb	r3, [r4, #0]
10009dce:	3301      	adds	r3, #1
10009dd0:	b2db      	uxtb	r3, r3
10009dd2:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
10009dd4:	2300      	movs	r3, #0
10009dd6:	e011      	b.n	10009dfc <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
10009dd8:	480c      	ldr	r0, [pc, #48]	; (10009e0c <ble_scan_info_handler+0x68>)
10009dda:	4b0d      	ldr	r3, [pc, #52]	; (10009e10 <ble_scan_info_handler+0x6c>)
10009ddc:	4798      	blx	r3
10009dde:	480d      	ldr	r0, [pc, #52]	; (10009e14 <ble_scan_info_handler+0x70>)
10009de0:	4b0d      	ldr	r3, [pc, #52]	; (10009e18 <ble_scan_info_handler+0x74>)
10009de2:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009de4:	4b0d      	ldr	r3, [pc, #52]	; (10009e1c <ble_scan_info_handler+0x78>)
10009de6:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009de8:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
10009dea:	2800      	cmp	r0, #0
10009dec:	d006      	beq.n	10009dfc <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
10009dee:	4807      	ldr	r0, [pc, #28]	; (10009e0c <ble_scan_info_handler+0x68>)
10009df0:	4b07      	ldr	r3, [pc, #28]	; (10009e10 <ble_scan_info_handler+0x6c>)
10009df2:	4798      	blx	r3
10009df4:	480a      	ldr	r0, [pc, #40]	; (10009e20 <ble_scan_info_handler+0x7c>)
10009df6:	4b08      	ldr	r3, [pc, #32]	; (10009e18 <ble_scan_info_handler+0x74>)
10009df8:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
10009dfa:	23e2      	movs	r3, #226	; 0xe2
	}
}
10009dfc:	0018      	movs	r0, r3
10009dfe:	bd10      	pop	{r4, pc}
10009e00:	10012ce8 	.word	0x10012ce8
10009e04:	100141e8 	.word	0x100141e8
10009e08:	10010357 	.word	0x10010357
10009e0c:	100118d4 	.word	0x100118d4
10009e10:	10010499 	.word	0x10010499
10009e14:	100119b4 	.word	0x100119b4
10009e18:	10010379 	.word	0x10010379
10009e1c:	1000ca3d 	.word	0x1000ca3d
10009e20:	100119ec 	.word	0x100119ec

10009e24 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
10009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10009e26:	464f      	mov	r7, r9
10009e28:	4646      	mov	r6, r8
10009e2a:	b4c0      	push	{r6, r7}
10009e2c:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009e2e:	8841      	ldrh	r1, [r0, #2]
10009e30:	4b3a      	ldr	r3, [pc, #232]	; (10009f1c <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e32:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
10009e34:	891a      	ldrh	r2, [r3, #8]
10009e36:	428a      	cmp	r2, r1
10009e38:	d104      	bne.n	10009e44 <ble_pair_done_handler+0x20>
10009e3a:	001a      	movs	r2, r3
10009e3c:	325e      	adds	r2, #94	; 0x5e
10009e3e:	7812      	ldrb	r2, [r2, #0]
10009e40:	2a03      	cmp	r2, #3
10009e42:	d062      	beq.n	10009f0a <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009e44:	3401      	adds	r4, #1
10009e46:	b2e4      	uxtb	r4, r4
10009e48:	337c      	adds	r3, #124	; 0x7c
10009e4a:	2c05      	cmp	r4, #5
10009e4c:	d1f2      	bne.n	10009e34 <ble_pair_done_handler+0x10>
10009e4e:	e02b      	b.n	10009ea8 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
10009e50:	0163      	lsls	r3, r4, #5
10009e52:	1b1c      	subs	r4, r3, r4
10009e54:	00a4      	lsls	r4, r4, #2
10009e56:	4b31      	ldr	r3, [pc, #196]	; (10009f1c <ble_pair_done_handler+0xf8>)
10009e58:	191c      	adds	r4, r3, r4
10009e5a:	345e      	adds	r4, #94	; 0x5e
10009e5c:	7823      	ldrb	r3, [r4, #0]
10009e5e:	2b01      	cmp	r3, #1
10009e60:	d913      	bls.n	10009e8a <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
10009e62:	482f      	ldr	r0, [pc, #188]	; (10009f20 <ble_pair_done_handler+0xfc>)
10009e64:	4b2f      	ldr	r3, [pc, #188]	; (10009f24 <ble_pair_done_handler+0x100>)
10009e66:	4798      	blx	r3
10009e68:	482f      	ldr	r0, [pc, #188]	; (10009f28 <ble_pair_done_handler+0x104>)
10009e6a:	4b30      	ldr	r3, [pc, #192]	; (10009f2c <ble_pair_done_handler+0x108>)
10009e6c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
10009e6e:	8868      	ldrh	r0, [r5, #2]
10009e70:	2113      	movs	r1, #19
10009e72:	4b2f      	ldr	r3, [pc, #188]	; (10009f30 <ble_pair_done_handler+0x10c>)
10009e74:	4798      	blx	r3
10009e76:	1e06      	subs	r6, r0, #0
10009e78:	d04b      	beq.n	10009f12 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
10009e7a:	4829      	ldr	r0, [pc, #164]	; (10009f20 <ble_pair_done_handler+0xfc>)
10009e7c:	4b29      	ldr	r3, [pc, #164]	; (10009f24 <ble_pair_done_handler+0x100>)
10009e7e:	4798      	blx	r3
10009e80:	482c      	ldr	r0, [pc, #176]	; (10009f34 <ble_pair_done_handler+0x110>)
10009e82:	4b2a      	ldr	r3, [pc, #168]	; (10009f2c <ble_pair_done_handler+0x108>)
10009e84:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009e86:	26e2      	movs	r6, #226	; 0xe2
10009e88:	e043      	b.n	10009f12 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
10009e8a:	2600      	movs	r6, #0
10009e8c:	e041      	b.n	10009f12 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
10009e8e:	4e24      	ldr	r6, [pc, #144]	; (10009f20 <ble_pair_done_handler+0xfc>)
10009e90:	0030      	movs	r0, r6
10009e92:	4d24      	ldr	r5, [pc, #144]	; (10009f24 <ble_pair_done_handler+0x100>)
10009e94:	47a8      	blx	r5
10009e96:	4828      	ldr	r0, [pc, #160]	; (10009f38 <ble_pair_done_handler+0x114>)
10009e98:	4c24      	ldr	r4, [pc, #144]	; (10009f2c <ble_pair_done_handler+0x108>)
10009e9a:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
10009e9c:	0030      	movs	r0, r6
10009e9e:	47a8      	blx	r5
10009ea0:	4826      	ldr	r0, [pc, #152]	; (10009f3c <ble_pair_done_handler+0x118>)
10009ea2:	47a0      	blx	r4
			return AT_BLE_FAILURE;
10009ea4:	26e2      	movs	r6, #226	; 0xe2
10009ea6:	e034      	b.n	10009f12 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009ea8:	792b      	ldrb	r3, [r5, #4]
10009eaa:	2b00      	cmp	r3, #0
10009eac:	d1d0      	bne.n	10009e50 <ble_pair_done_handler+0x2c>
10009eae:	e7ee      	b.n	10009e8e <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
10009eb0:	481b      	ldr	r0, [pc, #108]	; (10009f20 <ble_pair_done_handler+0xfc>)
10009eb2:	4b1c      	ldr	r3, [pc, #112]	; (10009f24 <ble_pair_done_handler+0x100>)
10009eb4:	4798      	blx	r3
10009eb6:	4820      	ldr	r0, [pc, #128]	; (10009f38 <ble_pair_done_handler+0x114>)
10009eb8:	4b1c      	ldr	r3, [pc, #112]	; (10009f2c <ble_pair_done_handler+0x108>)
10009eba:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
10009ebc:	782a      	ldrb	r2, [r5, #0]
10009ebe:	4b17      	ldr	r3, [pc, #92]	; (10009f1c <ble_pair_done_handler+0xf8>)
10009ec0:	4699      	mov	r9, r3
10009ec2:	0167      	lsls	r7, r4, #5
10009ec4:	1b3b      	subs	r3, r7, r4
10009ec6:	009b      	lsls	r3, r3, #2
10009ec8:	444b      	add	r3, r9
10009eca:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
10009ecc:	792a      	ldrb	r2, [r5, #4]
10009ece:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
10009ed0:	335e      	adds	r3, #94	; 0x5e
10009ed2:	2205      	movs	r2, #5
10009ed4:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
10009ed6:	1b38      	subs	r0, r7, r4
10009ed8:	0080      	lsls	r0, r0, #2
10009eda:	4448      	add	r0, r9
10009edc:	3036      	adds	r0, #54	; 0x36
10009ede:	0029      	movs	r1, r5
10009ee0:	3122      	adds	r1, #34	; 0x22
10009ee2:	320b      	adds	r2, #11
10009ee4:	4b16      	ldr	r3, [pc, #88]	; (10009f40 <ble_pair_done_handler+0x11c>)
10009ee6:	4698      	mov	r8, r3
10009ee8:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
10009eea:	1b38      	subs	r0, r7, r4
10009eec:	0080      	lsls	r0, r0, #2
10009eee:	4448      	add	r0, r9
10009ef0:	3046      	adds	r0, #70	; 0x46
10009ef2:	0029      	movs	r1, r5
10009ef4:	3132      	adds	r1, #50	; 0x32
10009ef6:	2217      	movs	r2, #23
10009ef8:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
10009efa:	1b38      	subs	r0, r7, r4
10009efc:	0080      	lsls	r0, r0, #2
10009efe:	4448      	add	r0, r9
10009f00:	301a      	adds	r0, #26
10009f02:	1da9      	adds	r1, r5, #6
10009f04:	221c      	movs	r2, #28
10009f06:	47c0      	blx	r8
10009f08:	e003      	b.n	10009f12 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
10009f0a:	792e      	ldrb	r6, [r5, #4]
10009f0c:	2e00      	cmp	r6, #0
10009f0e:	d0cf      	beq.n	10009eb0 <ble_pair_done_handler+0x8c>
10009f10:	e79e      	b.n	10009e50 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
10009f12:	0030      	movs	r0, r6
10009f14:	bc0c      	pop	{r2, r3}
10009f16:	4690      	mov	r8, r2
10009f18:	4699      	mov	r9, r3
10009f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f1c:	10013f04 	.word	0x10013f04
10009f20:	100118d4 	.word	0x100118d4
10009f24:	10010499 	.word	0x10010499
10009f28:	10011a04 	.word	0x10011a04
10009f2c:	10010379 	.word	0x10010379
10009f30:	1000ca5d 	.word	0x1000ca5d
10009f34:	10011a24 	.word	0x10011a24
10009f38:	10011a40 	.word	0x10011a40
10009f3c:	10011a6c 	.word	0x10011a6c
10009f40:	10010357 	.word	0x10010357

10009f44 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
10009f44:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
10009f46:	8800      	ldrh	r0, [r0, #0]
10009f48:	2378      	movs	r3, #120	; 0x78
10009f4a:	2201      	movs	r2, #1
10009f4c:	2101      	movs	r1, #1
10009f4e:	4c02      	ldr	r4, [pc, #8]	; (10009f58 <ble_conn_param_update_req+0x14>)
10009f50:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
10009f52:	2000      	movs	r0, #0
10009f54:	bd10      	pop	{r4, pc}
10009f56:	46c0      	nop			; (mov r8, r8)
10009f58:	1000ca7d 	.word	0x1000ca7d

10009f5c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
10009f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f5e:	4657      	mov	r7, sl
10009f60:	464e      	mov	r6, r9
10009f62:	4645      	mov	r5, r8
10009f64:	b4e0      	push	{r5, r6, r7}
10009f66:	b084      	sub	sp, #16
10009f68:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
10009f6a:	2209      	movs	r2, #9
10009f6c:	2100      	movs	r1, #0
10009f6e:	a801      	add	r0, sp, #4
10009f70:	4b6b      	ldr	r3, [pc, #428]	; (1000a120 <ble_slave_security_request_handler+0x1c4>)
10009f72:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009f74:	8825      	ldrh	r5, [r4, #0]
10009f76:	496b      	ldr	r1, [pc, #428]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
10009f78:	000a      	movs	r2, r1
10009f7a:	2300      	movs	r3, #0
10009f7c:	8910      	ldrh	r0, [r2, #8]
10009f7e:	42a8      	cmp	r0, r5
10009f80:	d116      	bne.n	10009fb0 <ble_slave_security_request_handler+0x54>
10009f82:	0010      	movs	r0, r2
10009f84:	305e      	adds	r0, #94	; 0x5e
10009f86:	7800      	ldrb	r0, [r0, #0]
10009f88:	2802      	cmp	r0, #2
10009f8a:	d111      	bne.n	10009fb0 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
10009f8c:	4865      	ldr	r0, [pc, #404]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
10009f8e:	015a      	lsls	r2, r3, #5
10009f90:	1ad6      	subs	r6, r2, r3
10009f92:	00b6      	lsls	r6, r6, #2
10009f94:	1986      	adds	r6, r0, r6
10009f96:	365e      	adds	r6, #94	; 0x5e
10009f98:	2206      	movs	r2, #6
10009f9a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009f9c:	32f9      	adds	r2, #249	; 0xf9
10009f9e:	4013      	ands	r3, r2
10009fa0:	015a      	lsls	r2, r3, #5
10009fa2:	1ad2      	subs	r2, r2, r3
10009fa4:	0092      	lsls	r2, r2, #2
10009fa6:	1882      	adds	r2, r0, r2
10009fa8:	7d12      	ldrb	r2, [r2, #20]
10009faa:	07d0      	lsls	r0, r2, #31
10009fac:	d405      	bmi.n	10009fba <ble_slave_security_request_handler+0x5e>
10009fae:	e01b      	b.n	10009fe8 <ble_slave_security_request_handler+0x8c>
10009fb0:	3301      	adds	r3, #1
10009fb2:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009fb4:	2b05      	cmp	r3, #5
10009fb6:	d1e1      	bne.n	10009f7c <ble_slave_security_request_handler+0x20>
10009fb8:	e01e      	b.n	10009ff8 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
10009fba:	78e0      	ldrb	r0, [r4, #3]
10009fbc:	2800      	cmp	r0, #0
10009fbe:	d013      	beq.n	10009fe8 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
10009fc0:	0159      	lsls	r1, r3, #5
10009fc2:	1ac9      	subs	r1, r1, r3
10009fc4:	008b      	lsls	r3, r1, #2
10009fc6:	4957      	ldr	r1, [pc, #348]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
10009fc8:	18c9      	adds	r1, r1, r3
10009fca:	311a      	adds	r1, #26
10009fcc:	8820      	ldrh	r0, [r4, #0]
10009fce:	4b56      	ldr	r3, [pc, #344]	; (1000a128 <ble_slave_security_request_handler+0x1cc>)
10009fd0:	4798      	blx	r3
10009fd2:	2800      	cmp	r0, #0
10009fd4:	d100      	bne.n	10009fd8 <ble_slave_security_request_handler+0x7c>
10009fd6:	e09d      	b.n	1000a114 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
10009fd8:	4854      	ldr	r0, [pc, #336]	; (1000a12c <ble_slave_security_request_handler+0x1d0>)
10009fda:	4b55      	ldr	r3, [pc, #340]	; (1000a130 <ble_slave_security_request_handler+0x1d4>)
10009fdc:	4798      	blx	r3
10009fde:	4855      	ldr	r0, [pc, #340]	; (1000a134 <ble_slave_security_request_handler+0x1d8>)
10009fe0:	4b55      	ldr	r3, [pc, #340]	; (1000a138 <ble_slave_security_request_handler+0x1dc>)
10009fe2:	4798      	blx	r3
				return AT_BLE_FAILURE;
10009fe4:	20e2      	movs	r0, #226	; 0xe2
10009fe6:	e095      	b.n	1000a114 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
10009fe8:	015a      	lsls	r2, r3, #5
10009fea:	1ad3      	subs	r3, r2, r3
10009fec:	009b      	lsls	r3, r3, #2
10009fee:	4a4d      	ldr	r2, [pc, #308]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
10009ff0:	18d3      	adds	r3, r2, r3
10009ff2:	335e      	adds	r3, #94	; 0x5e
10009ff4:	2202      	movs	r2, #2
10009ff6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009ff8:	8825      	ldrh	r5, [r4, #0]
10009ffa:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
10009ffc:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
10009ffe:	0016      	movs	r6, r2
1000a000:	8908      	ldrh	r0, [r1, #8]
1000a002:	42a8      	cmp	r0, r5
1000a004:	d10d      	bne.n	1000a022 <ble_slave_security_request_handler+0xc6>
1000a006:	0008      	movs	r0, r1
1000a008:	305e      	adds	r0, #94	; 0x5e
1000a00a:	7800      	ldrb	r0, [r0, #0]
1000a00c:	2802      	cmp	r0, #2
1000a00e:	d108      	bne.n	1000a022 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a010:	0152      	lsls	r2, r2, #5
1000a012:	1b92      	subs	r2, r2, r6
1000a014:	0096      	lsls	r6, r2, #2
1000a016:	4a43      	ldr	r2, [pc, #268]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
1000a018:	1992      	adds	r2, r2, r6
1000a01a:	325e      	adds	r2, #94	; 0x5e
1000a01c:	2103      	movs	r1, #3
1000a01e:	7011      	strb	r1, [r2, #0]
			break;
1000a020:	e005      	b.n	1000a02e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a022:	3301      	adds	r3, #1
1000a024:	b2db      	uxtb	r3, r3
1000a026:	3201      	adds	r2, #1
1000a028:	317c      	adds	r1, #124	; 0x7c
1000a02a:	2b05      	cmp	r3, #5
1000a02c:	d1e7      	bne.n	10009ffe <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a02e:	aa01      	add	r2, sp, #4
1000a030:	2102      	movs	r1, #2
1000a032:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000a034:	78e1      	ldrb	r1, [r4, #3]
1000a036:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a038:	2101      	movs	r1, #1
1000a03a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a03c:	3103      	adds	r1, #3
1000a03e:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a040:	001f      	movs	r7, r3
1000a042:	015a      	lsls	r2, r3, #5
1000a044:	1ad2      	subs	r2, r2, r3
1000a046:	0092      	lsls	r2, r2, #2
1000a048:	4936      	ldr	r1, [pc, #216]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
1000a04a:	5c52      	ldrb	r2, [r2, r1]
1000a04c:	2a02      	cmp	r2, #2
1000a04e:	d104      	bne.n	1000a05a <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a050:	aa01      	add	r2, sp, #4
1000a052:	2103      	movs	r1, #3
1000a054:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a056:	71d1      	strb	r1, [r2, #7]
1000a058:	e003      	b.n	1000a062 <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a05a:	aa01      	add	r2, sp, #4
1000a05c:	2101      	movs	r1, #1
1000a05e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a060:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a062:	aa01      	add	r2, sp, #4
1000a064:	2110      	movs	r1, #16
1000a066:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a068:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a06a:	017a      	lsls	r2, r7, #5
1000a06c:	1bd2      	subs	r2, r2, r7
1000a06e:	0092      	lsls	r2, r2, #2
1000a070:	492c      	ldr	r1, [pc, #176]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
1000a072:	188a      	adds	r2, r1, r2
1000a074:	7e12      	ldrb	r2, [r2, #24]
1000a076:	2a40      	cmp	r2, #64	; 0x40
1000a078:	d134      	bne.n	1000a0e4 <ble_slave_security_request_handler+0x188>
1000a07a:	015a      	lsls	r2, r3, #5
1000a07c:	1ad3      	subs	r3, r2, r3
1000a07e:	009b      	lsls	r3, r3, #2
1000a080:	469a      	mov	sl, r3
1000a082:	001e      	movs	r6, r3
1000a084:	3660      	adds	r6, #96	; 0x60
1000a086:	1876      	adds	r6, r6, r1
1000a088:	4655      	mov	r5, sl
1000a08a:	3568      	adds	r5, #104	; 0x68
1000a08c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a08e:	4b2b      	ldr	r3, [pc, #172]	; (1000a13c <ble_slave_security_request_handler+0x1e0>)
1000a090:	4699      	mov	r9, r3
1000a092:	230f      	movs	r3, #15
1000a094:	4698      	mov	r8, r3
1000a096:	47c8      	blx	r9
1000a098:	4643      	mov	r3, r8
1000a09a:	4018      	ands	r0, r3
1000a09c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a09e:	47c8      	blx	r9
1000a0a0:	4643      	mov	r3, r8
1000a0a2:	4018      	ands	r0, r3
1000a0a4:	74b0      	strb	r0, [r6, #18]
1000a0a6:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a0a8:	42ae      	cmp	r6, r5
1000a0aa:	d1f4      	bne.n	1000a096 <ble_slave_security_request_handler+0x13a>
1000a0ac:	4656      	mov	r6, sl
1000a0ae:	3670      	adds	r6, #112	; 0x70
1000a0b0:	4a1c      	ldr	r2, [pc, #112]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
1000a0b2:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a0b4:	4b21      	ldr	r3, [pc, #132]	; (1000a13c <ble_slave_security_request_handler+0x1e0>)
1000a0b6:	4699      	mov	r9, r3
1000a0b8:	230f      	movs	r3, #15
1000a0ba:	4698      	mov	r8, r3
1000a0bc:	47c8      	blx	r9
1000a0be:	4643      	mov	r3, r8
1000a0c0:	4018      	ands	r0, r3
1000a0c2:	7028      	strb	r0, [r5, #0]
1000a0c4:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a0c6:	42b5      	cmp	r5, r6
1000a0c8:	d1f8      	bne.n	1000a0bc <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a0ca:	4b1c      	ldr	r3, [pc, #112]	; (1000a13c <ble_slave_security_request_handler+0x1e0>)
1000a0cc:	4798      	blx	r3
1000a0ce:	017b      	lsls	r3, r7, #5
1000a0d0:	1bdb      	subs	r3, r3, r7
1000a0d2:	009b      	lsls	r3, r3, #2
1000a0d4:	4a13      	ldr	r2, [pc, #76]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
1000a0d6:	18d3      	adds	r3, r2, r3
1000a0d8:	001a      	movs	r2, r3
1000a0da:	3270      	adds	r2, #112	; 0x70
1000a0dc:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a0de:	337a      	adds	r3, #122	; 0x7a
1000a0e0:	2210      	movs	r2, #16
1000a0e2:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a0e4:	017a      	lsls	r2, r7, #5
1000a0e6:	1bd7      	subs	r7, r2, r7
1000a0e8:	00bf      	lsls	r7, r7, #2
1000a0ea:	3760      	adds	r7, #96	; 0x60
1000a0ec:	4a0d      	ldr	r2, [pc, #52]	; (1000a124 <ble_slave_security_request_handler+0x1c8>)
1000a0ee:	18ba      	adds	r2, r7, r2
1000a0f0:	8820      	ldrh	r0, [r4, #0]
1000a0f2:	2300      	movs	r3, #0
1000a0f4:	a901      	add	r1, sp, #4
1000a0f6:	4c12      	ldr	r4, [pc, #72]	; (1000a140 <ble_slave_security_request_handler+0x1e4>)
1000a0f8:	47a0      	blx	r4
1000a0fa:	2800      	cmp	r0, #0
1000a0fc:	d00a      	beq.n	1000a114 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000a0fe:	ab01      	add	r3, sp, #4
1000a100:	2200      	movs	r2, #0
1000a102:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a104:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a106:	4809      	ldr	r0, [pc, #36]	; (1000a12c <ble_slave_security_request_handler+0x1d0>)
1000a108:	4b09      	ldr	r3, [pc, #36]	; (1000a130 <ble_slave_security_request_handler+0x1d4>)
1000a10a:	4798      	blx	r3
1000a10c:	480d      	ldr	r0, [pc, #52]	; (1000a144 <ble_slave_security_request_handler+0x1e8>)
1000a10e:	4b0a      	ldr	r3, [pc, #40]	; (1000a138 <ble_slave_security_request_handler+0x1dc>)
1000a110:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a112:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a114:	b004      	add	sp, #16
1000a116:	bc1c      	pop	{r2, r3, r4}
1000a118:	4690      	mov	r8, r2
1000a11a:	4699      	mov	r9, r3
1000a11c:	46a2      	mov	sl, r4
1000a11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a120:	10010369 	.word	0x10010369
1000a124:	10013f04 	.word	0x10013f04
1000a128:	1000cfb5 	.word	0x1000cfb5
1000a12c:	100118d4 	.word	0x100118d4
1000a130:	10010499 	.word	0x10010499
1000a134:	10011a9c 	.word	0x10011a9c
1000a138:	10010379 	.word	0x10010379
1000a13c:	100104ad 	.word	0x100104ad
1000a140:	1000cdc9 	.word	0x1000cdc9
1000a144:	10011ab4 	.word	0x10011ab4

1000a148 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a148:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a14a:	465f      	mov	r7, fp
1000a14c:	4656      	mov	r6, sl
1000a14e:	464d      	mov	r5, r9
1000a150:	4644      	mov	r4, r8
1000a152:	b4f0      	push	{r4, r5, r6, r7}
1000a154:	b085      	sub	sp, #20
1000a156:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a158:	8804      	ldrh	r4, [r0, #0]
1000a15a:	4a49      	ldr	r2, [pc, #292]	; (1000a280 <ble_pair_request_handler+0x138>)
1000a15c:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a15e:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a160:	8910      	ldrh	r0, [r2, #8]
1000a162:	42a0      	cmp	r0, r4
1000a164:	d10d      	bne.n	1000a182 <ble_pair_request_handler+0x3a>
1000a166:	0010      	movs	r0, r2
1000a168:	305e      	adds	r0, #94	; 0x5e
1000a16a:	7800      	ldrb	r0, [r0, #0]
1000a16c:	2802      	cmp	r0, #2
1000a16e:	d108      	bne.n	1000a182 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a170:	014a      	lsls	r2, r1, #5
1000a172:	1a52      	subs	r2, r2, r1
1000a174:	0095      	lsls	r5, r2, #2
1000a176:	4a42      	ldr	r2, [pc, #264]	; (1000a280 <ble_pair_request_handler+0x138>)
1000a178:	1952      	adds	r2, r2, r5
1000a17a:	325e      	adds	r2, #94	; 0x5e
1000a17c:	2103      	movs	r1, #3
1000a17e:	7011      	strb	r1, [r2, #0]
			break;
1000a180:	e005      	b.n	1000a18e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a182:	3301      	adds	r3, #1
1000a184:	b2db      	uxtb	r3, r3
1000a186:	3101      	adds	r1, #1
1000a188:	327c      	adds	r2, #124	; 0x7c
1000a18a:	2b05      	cmp	r3, #5
1000a18c:	d1e8      	bne.n	1000a160 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a18e:	aa01      	add	r2, sp, #4
1000a190:	2102      	movs	r1, #2
1000a192:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a194:	3901      	subs	r1, #1
1000a196:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a198:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a19a:	2100      	movs	r1, #0
1000a19c:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a19e:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a1a0:	001f      	movs	r7, r3
1000a1a2:	015a      	lsls	r2, r3, #5
1000a1a4:	1ad2      	subs	r2, r2, r3
1000a1a6:	0092      	lsls	r2, r2, #2
1000a1a8:	4935      	ldr	r1, [pc, #212]	; (1000a280 <ble_pair_request_handler+0x138>)
1000a1aa:	5c52      	ldrb	r2, [r2, r1]
1000a1ac:	2a02      	cmp	r2, #2
1000a1ae:	d104      	bne.n	1000a1ba <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a1b0:	aa01      	add	r2, sp, #4
1000a1b2:	2103      	movs	r1, #3
1000a1b4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a1b6:	71d1      	strb	r1, [r2, #7]
1000a1b8:	e003      	b.n	1000a1c2 <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a1ba:	aa01      	add	r2, sp, #4
1000a1bc:	2101      	movs	r1, #1
1000a1be:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a1c0:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a1c2:	aa01      	add	r2, sp, #4
1000a1c4:	2110      	movs	r1, #16
1000a1c6:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a1c8:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a1ca:	017a      	lsls	r2, r7, #5
1000a1cc:	1bd2      	subs	r2, r2, r7
1000a1ce:	0092      	lsls	r2, r2, #2
1000a1d0:	492b      	ldr	r1, [pc, #172]	; (1000a280 <ble_pair_request_handler+0x138>)
1000a1d2:	188a      	adds	r2, r1, r2
1000a1d4:	7e12      	ldrb	r2, [r2, #24]
1000a1d6:	2a40      	cmp	r2, #64	; 0x40
1000a1d8:	d131      	bne.n	1000a23e <ble_pair_request_handler+0xf6>
1000a1da:	015a      	lsls	r2, r3, #5
1000a1dc:	1ad3      	subs	r3, r2, r3
1000a1de:	009b      	lsls	r3, r3, #2
1000a1e0:	469a      	mov	sl, r3
1000a1e2:	001d      	movs	r5, r3
1000a1e4:	3560      	adds	r5, #96	; 0x60
1000a1e6:	186d      	adds	r5, r5, r1
1000a1e8:	4654      	mov	r4, sl
1000a1ea:	3468      	adds	r4, #104	; 0x68
1000a1ec:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a1ee:	4b25      	ldr	r3, [pc, #148]	; (1000a284 <ble_pair_request_handler+0x13c>)
1000a1f0:	4699      	mov	r9, r3
1000a1f2:	260f      	movs	r6, #15
1000a1f4:	47c8      	blx	r9
1000a1f6:	4030      	ands	r0, r6
1000a1f8:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a1fa:	47c8      	blx	r9
1000a1fc:	4030      	ands	r0, r6
1000a1fe:	74a8      	strb	r0, [r5, #18]
1000a200:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a202:	42a5      	cmp	r5, r4
1000a204:	d1f6      	bne.n	1000a1f4 <ble_pair_request_handler+0xac>
1000a206:	4655      	mov	r5, sl
1000a208:	3570      	adds	r5, #112	; 0x70
1000a20a:	4a1d      	ldr	r2, [pc, #116]	; (1000a280 <ble_pair_request_handler+0x138>)
1000a20c:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a20e:	4b1d      	ldr	r3, [pc, #116]	; (1000a284 <ble_pair_request_handler+0x13c>)
1000a210:	4699      	mov	r9, r3
1000a212:	230f      	movs	r3, #15
1000a214:	4698      	mov	r8, r3
1000a216:	47c8      	blx	r9
1000a218:	4643      	mov	r3, r8
1000a21a:	4018      	ands	r0, r3
1000a21c:	7020      	strb	r0, [r4, #0]
1000a21e:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a220:	42ac      	cmp	r4, r5
1000a222:	d1f8      	bne.n	1000a216 <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a224:	4b17      	ldr	r3, [pc, #92]	; (1000a284 <ble_pair_request_handler+0x13c>)
1000a226:	4798      	blx	r3
1000a228:	017b      	lsls	r3, r7, #5
1000a22a:	1bdb      	subs	r3, r3, r7
1000a22c:	009b      	lsls	r3, r3, #2
1000a22e:	4a14      	ldr	r2, [pc, #80]	; (1000a280 <ble_pair_request_handler+0x138>)
1000a230:	18d3      	adds	r3, r2, r3
1000a232:	001a      	movs	r2, r3
1000a234:	3270      	adds	r2, #112	; 0x70
1000a236:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a238:	337a      	adds	r3, #122	; 0x7a
1000a23a:	2210      	movs	r2, #16
1000a23c:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a23e:	017a      	lsls	r2, r7, #5
1000a240:	1bd7      	subs	r7, r2, r7
1000a242:	00bf      	lsls	r7, r7, #2
1000a244:	3760      	adds	r7, #96	; 0x60
1000a246:	4a0e      	ldr	r2, [pc, #56]	; (1000a280 <ble_pair_request_handler+0x138>)
1000a248:	18ba      	adds	r2, r7, r2
1000a24a:	465b      	mov	r3, fp
1000a24c:	8818      	ldrh	r0, [r3, #0]
1000a24e:	2300      	movs	r3, #0
1000a250:	a901      	add	r1, sp, #4
1000a252:	4c0d      	ldr	r4, [pc, #52]	; (1000a288 <ble_pair_request_handler+0x140>)
1000a254:	47a0      	blx	r4
1000a256:	2800      	cmp	r0, #0
1000a258:	d00a      	beq.n	1000a270 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a25a:	ab01      	add	r3, sp, #4
1000a25c:	2200      	movs	r2, #0
1000a25e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a260:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a262:	480a      	ldr	r0, [pc, #40]	; (1000a28c <ble_pair_request_handler+0x144>)
1000a264:	4b0a      	ldr	r3, [pc, #40]	; (1000a290 <ble_pair_request_handler+0x148>)
1000a266:	4798      	blx	r3
1000a268:	480a      	ldr	r0, [pc, #40]	; (1000a294 <ble_pair_request_handler+0x14c>)
1000a26a:	4b0b      	ldr	r3, [pc, #44]	; (1000a298 <ble_pair_request_handler+0x150>)
1000a26c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a26e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a270:	b005      	add	sp, #20
1000a272:	bc3c      	pop	{r2, r3, r4, r5}
1000a274:	4690      	mov	r8, r2
1000a276:	4699      	mov	r9, r3
1000a278:	46a2      	mov	sl, r4
1000a27a:	46ab      	mov	fp, r5
1000a27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a27e:	46c0      	nop			; (mov r8, r8)
1000a280:	10013f04 	.word	0x10013f04
1000a284:	100104ad 	.word	0x100104ad
1000a288:	1000cdc9 	.word	0x1000cdc9
1000a28c:	100118d4 	.word	0x100118d4
1000a290:	10010499 	.word	0x10010499
1000a294:	10011ae0 	.word	0x10011ae0
1000a298:	10010379 	.word	0x10010379

1000a29c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a29c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a29e:	b085      	sub	sp, #20
1000a2a0:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a2a2:	2206      	movs	r2, #6
1000a2a4:	493d      	ldr	r1, [pc, #244]	; (1000a39c <ble_pair_key_request_handler+0x100>)
1000a2a6:	a802      	add	r0, sp, #8
1000a2a8:	4e3d      	ldr	r6, [pc, #244]	; (1000a3a0 <ble_pair_key_request_handler+0x104>)
1000a2aa:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a2ac:	ac01      	add	r4, sp, #4
1000a2ae:	2204      	movs	r2, #4
1000a2b0:	0029      	movs	r1, r5
1000a2b2:	0020      	movs	r0, r4
1000a2b4:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a2b6:	78e3      	ldrb	r3, [r4, #3]
1000a2b8:	2b00      	cmp	r3, #0
1000a2ba:	d162      	bne.n	1000a382 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a2bc:	4839      	ldr	r0, [pc, #228]	; (1000a3a4 <ble_pair_key_request_handler+0x108>)
1000a2be:	4b3a      	ldr	r3, [pc, #232]	; (1000a3a8 <ble_pair_key_request_handler+0x10c>)
1000a2c0:	4798      	blx	r3
1000a2c2:	483a      	ldr	r0, [pc, #232]	; (1000a3ac <ble_pair_key_request_handler+0x110>)
1000a2c4:	4b3a      	ldr	r3, [pc, #232]	; (1000a3b0 <ble_pair_key_request_handler+0x114>)
1000a2c6:	4798      	blx	r3
1000a2c8:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a2ca:	4c3a      	ldr	r4, [pc, #232]	; (1000a3b4 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a2cc:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a2ce:	201e      	movs	r0, #30
1000a2d0:	47a0      	blx	r4
1000a2d2:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a2d4:	2b00      	cmp	r3, #0
1000a2d6:	d11a      	bne.n	1000a30e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a2d8:	4f32      	ldr	r7, [pc, #200]	; (1000a3a4 <ble_pair_key_request_handler+0x108>)
1000a2da:	0038      	movs	r0, r7
1000a2dc:	4e32      	ldr	r6, [pc, #200]	; (1000a3a8 <ble_pair_key_request_handler+0x10c>)
1000a2de:	47b0      	blx	r6
1000a2e0:	4835      	ldr	r0, [pc, #212]	; (1000a3b8 <ble_pair_key_request_handler+0x11c>)
1000a2e2:	4c33      	ldr	r4, [pc, #204]	; (1000a3b0 <ble_pair_key_request_handler+0x114>)
1000a2e4:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a2e6:	0038      	movs	r0, r7
1000a2e8:	47b0      	blx	r6
1000a2ea:	4834      	ldr	r0, [pc, #208]	; (1000a3bc <ble_pair_key_request_handler+0x120>)
1000a2ec:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a2ee:	8828      	ldrh	r0, [r5, #0]
1000a2f0:	2113      	movs	r1, #19
1000a2f2:	4b33      	ldr	r3, [pc, #204]	; (1000a3c0 <ble_pair_key_request_handler+0x124>)
1000a2f4:	4798      	blx	r3
1000a2f6:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a2f8:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a2fa:	2b00      	cmp	r3, #0
1000a2fc:	d04c      	beq.n	1000a398 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a2fe:	4829      	ldr	r0, [pc, #164]	; (1000a3a4 <ble_pair_key_request_handler+0x108>)
1000a300:	4b29      	ldr	r3, [pc, #164]	; (1000a3a8 <ble_pair_key_request_handler+0x10c>)
1000a302:	4798      	blx	r3
1000a304:	482f      	ldr	r0, [pc, #188]	; (1000a3c4 <ble_pair_key_request_handler+0x128>)
1000a306:	4b2a      	ldr	r3, [pc, #168]	; (1000a3b0 <ble_pair_key_request_handler+0x114>)
1000a308:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a30a:	20e2      	movs	r0, #226	; 0xe2
1000a30c:	e044      	b.n	1000a398 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a30e:	001a      	movs	r2, r3
1000a310:	3a30      	subs	r2, #48	; 0x30
1000a312:	2a09      	cmp	r2, #9
1000a314:	d8db      	bhi.n	1000a2ce <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a316:	aa02      	add	r2, sp, #8
1000a318:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a31a:	4038      	ands	r0, r7
1000a31c:	4b2a      	ldr	r3, [pc, #168]	; (1000a3c8 <ble_pair_key_request_handler+0x12c>)
1000a31e:	4798      	blx	r3
1000a320:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a322:	2e06      	cmp	r6, #6
1000a324:	d026      	beq.n	1000a374 <ble_pair_key_request_handler+0xd8>
1000a326:	e7d2      	b.n	1000a2ce <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a328:	481e      	ldr	r0, [pc, #120]	; (1000a3a4 <ble_pair_key_request_handler+0x108>)
1000a32a:	4b1f      	ldr	r3, [pc, #124]	; (1000a3a8 <ble_pair_key_request_handler+0x10c>)
1000a32c:	4798      	blx	r3
1000a32e:	4827      	ldr	r0, [pc, #156]	; (1000a3cc <ble_pair_key_request_handler+0x130>)
1000a330:	4b1f      	ldr	r3, [pc, #124]	; (1000a3b0 <ble_pair_key_request_handler+0x114>)
1000a332:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a334:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a336:	4e24      	ldr	r6, [pc, #144]	; (1000a3c8 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a338:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a33a:	5ce0      	ldrb	r0, [r4, r3]
1000a33c:	47b0      	blx	r6
1000a33e:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a340:	2c06      	cmp	r4, #6
1000a342:	d1f9      	bne.n	1000a338 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a344:	ab01      	add	r3, sp, #4
1000a346:	7899      	ldrb	r1, [r3, #2]
1000a348:	8828      	ldrh	r0, [r5, #0]
1000a34a:	aa02      	add	r2, sp, #8
1000a34c:	4b20      	ldr	r3, [pc, #128]	; (1000a3d0 <ble_pair_key_request_handler+0x134>)
1000a34e:	4798      	blx	r3
1000a350:	2800      	cmp	r0, #0
1000a352:	d021      	beq.n	1000a398 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a354:	4813      	ldr	r0, [pc, #76]	; (1000a3a4 <ble_pair_key_request_handler+0x108>)
1000a356:	4b14      	ldr	r3, [pc, #80]	; (1000a3a8 <ble_pair_key_request_handler+0x10c>)
1000a358:	4798      	blx	r3
1000a35a:	481e      	ldr	r0, [pc, #120]	; (1000a3d4 <ble_pair_key_request_handler+0x138>)
1000a35c:	4b14      	ldr	r3, [pc, #80]	; (1000a3b0 <ble_pair_key_request_handler+0x114>)
1000a35e:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a360:	2000      	movs	r0, #0
1000a362:	e019      	b.n	1000a398 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a364:	480f      	ldr	r0, [pc, #60]	; (1000a3a4 <ble_pair_key_request_handler+0x108>)
1000a366:	4b10      	ldr	r3, [pc, #64]	; (1000a3a8 <ble_pair_key_request_handler+0x10c>)
1000a368:	4798      	blx	r3
1000a36a:	481b      	ldr	r0, [pc, #108]	; (1000a3d8 <ble_pair_key_request_handler+0x13c>)
1000a36c:	4b10      	ldr	r3, [pc, #64]	; (1000a3b0 <ble_pair_key_request_handler+0x114>)
1000a36e:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a370:	2000      	movs	r0, #0
1000a372:	e011      	b.n	1000a398 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a374:	480b      	ldr	r0, [pc, #44]	; (1000a3a4 <ble_pair_key_request_handler+0x108>)
1000a376:	4b0c      	ldr	r3, [pc, #48]	; (1000a3a8 <ble_pair_key_request_handler+0x10c>)
1000a378:	4798      	blx	r3
1000a37a:	4818      	ldr	r0, [pc, #96]	; (1000a3dc <ble_pair_key_request_handler+0x140>)
1000a37c:	4b0c      	ldr	r3, [pc, #48]	; (1000a3b0 <ble_pair_key_request_handler+0x114>)
1000a37e:	4798      	blx	r3
1000a380:	e7d8      	b.n	1000a334 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a382:	ab01      	add	r3, sp, #4
1000a384:	885a      	ldrh	r2, [r3, #2]
1000a386:	2380      	movs	r3, #128	; 0x80
1000a388:	005b      	lsls	r3, r3, #1
1000a38a:	429a      	cmp	r2, r3
1000a38c:	d0cc      	beq.n	1000a328 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a38e:	ab01      	add	r3, sp, #4
1000a390:	789b      	ldrb	r3, [r3, #2]
1000a392:	2b01      	cmp	r3, #1
1000a394:	d0e6      	beq.n	1000a364 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a396:	2000      	movs	r0, #0
}
1000a398:	b005      	add	sp, #20
1000a39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a39c:	10011890 	.word	0x10011890
1000a3a0:	10010357 	.word	0x10010357
1000a3a4:	100118d4 	.word	0x100118d4
1000a3a8:	10010499 	.word	0x10010499
1000a3ac:	10011b08 	.word	0x10011b08
1000a3b0:	10010379 	.word	0x10010379
1000a3b4:	1000afbd 	.word	0x1000afbd
1000a3b8:	10011b30 	.word	0x10011b30
1000a3bc:	10011b3c 	.word	0x10011b3c
1000a3c0:	1000ca5d 	.word	0x1000ca5d
1000a3c4:	10011a24 	.word	0x10011a24
1000a3c8:	100103ad 	.word	0x100103ad
1000a3cc:	10011b50 	.word	0x10011b50
1000a3d0:	1000cef9 	.word	0x1000cef9
1000a3d4:	10011b88 	.word	0x10011b88
1000a3d8:	10011ba0 	.word	0x10011ba0
1000a3dc:	10011bbc 	.word	0x10011bbc

1000a3e0 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a3e2:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a3e4:	8805      	ldrh	r5, [r0, #0]
1000a3e6:	4b2f      	ldr	r3, [pc, #188]	; (1000a4a4 <ble_encryption_request_handler+0xc4>)
1000a3e8:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a3ea:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a3ec:	0010      	movs	r0, r2
1000a3ee:	8919      	ldrh	r1, [r3, #8]
1000a3f0:	42a9      	cmp	r1, r5
1000a3f2:	d116      	bne.n	1000a422 <ble_encryption_request_handler+0x42>
1000a3f4:	0019      	movs	r1, r3
1000a3f6:	315e      	adds	r1, #94	; 0x5e
1000a3f8:	7809      	ldrb	r1, [r1, #0]
1000a3fa:	2901      	cmp	r1, #1
1000a3fc:	d911      	bls.n	1000a422 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a3fe:	4929      	ldr	r1, [pc, #164]	; (1000a4a4 <ble_encryption_request_handler+0xc4>)
1000a400:	0152      	lsls	r2, r2, #5
1000a402:	1a10      	subs	r0, r2, r0
1000a404:	0080      	lsls	r0, r0, #2
1000a406:	1808      	adds	r0, r1, r0
1000a408:	305e      	adds	r0, #94	; 0x5e
1000a40a:	2306      	movs	r3, #6
1000a40c:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a40e:	0162      	lsls	r2, r4, #5
1000a410:	1b13      	subs	r3, r2, r4
1000a412:	009b      	lsls	r3, r3, #2
1000a414:	18cb      	adds	r3, r1, r3
1000a416:	3370      	adds	r3, #112	; 0x70
1000a418:	881a      	ldrh	r2, [r3, #0]
1000a41a:	8873      	ldrh	r3, [r6, #2]
1000a41c:	429a      	cmp	r2, r3
1000a41e:	d113      	bne.n	1000a448 <ble_encryption_request_handler+0x68>
1000a420:	e006      	b.n	1000a430 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a422:	3401      	adds	r4, #1
1000a424:	b2e4      	uxtb	r4, r4
1000a426:	3201      	adds	r2, #1
1000a428:	337c      	adds	r3, #124	; 0x7c
1000a42a:	2c05      	cmp	r4, #5
1000a42c:	d1de      	bne.n	1000a3ec <ble_encryption_request_handler+0xc>
1000a42e:	e00b      	b.n	1000a448 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a430:	0161      	lsls	r1, r4, #5
1000a432:	1b09      	subs	r1, r1, r4
1000a434:	0089      	lsls	r1, r1, #2
1000a436:	4b1b      	ldr	r3, [pc, #108]	; (1000a4a4 <ble_encryption_request_handler+0xc4>)
1000a438:	1859      	adds	r1, r3, r1
1000a43a:	3172      	adds	r1, #114	; 0x72
1000a43c:	1d30      	adds	r0, r6, #4
1000a43e:	2208      	movs	r2, #8
1000a440:	4b19      	ldr	r3, [pc, #100]	; (1000a4a8 <ble_encryption_request_handler+0xc8>)
1000a442:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a444:	2800      	cmp	r0, #0
1000a446:	d015      	beq.n	1000a474 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a448:	4f18      	ldr	r7, [pc, #96]	; (1000a4ac <ble_encryption_request_handler+0xcc>)
1000a44a:	0038      	movs	r0, r7
1000a44c:	4e18      	ldr	r6, [pc, #96]	; (1000a4b0 <ble_encryption_request_handler+0xd0>)
1000a44e:	47b0      	blx	r6
1000a450:	4818      	ldr	r0, [pc, #96]	; (1000a4b4 <ble_encryption_request_handler+0xd4>)
1000a452:	4d19      	ldr	r5, [pc, #100]	; (1000a4b8 <ble_encryption_request_handler+0xd8>)
1000a454:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a456:	0038      	movs	r0, r7
1000a458:	47b0      	blx	r6
1000a45a:	4818      	ldr	r0, [pc, #96]	; (1000a4bc <ble_encryption_request_handler+0xdc>)
1000a45c:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a45e:	0163      	lsls	r3, r4, #5
1000a460:	1b1c      	subs	r4, r3, r4
1000a462:	00a4      	lsls	r4, r4, #2
1000a464:	4b0f      	ldr	r3, [pc, #60]	; (1000a4a4 <ble_encryption_request_handler+0xc4>)
1000a466:	191c      	adds	r4, r3, r4
1000a468:	8920      	ldrh	r0, [r4, #8]
1000a46a:	2105      	movs	r1, #5
1000a46c:	4b14      	ldr	r3, [pc, #80]	; (1000a4c0 <ble_encryption_request_handler+0xe0>)
1000a46e:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a470:	20e2      	movs	r0, #226	; 0xe2
1000a472:	e016      	b.n	1000a4a2 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a474:	0162      	lsls	r2, r4, #5
1000a476:	1b13      	subs	r3, r2, r4
1000a478:	009b      	lsls	r3, r3, #2
1000a47a:	3360      	adds	r3, #96	; 0x60
1000a47c:	4909      	ldr	r1, [pc, #36]	; (1000a4a4 <ble_encryption_request_handler+0xc4>)
1000a47e:	185b      	adds	r3, r3, r1
1000a480:	1b14      	subs	r4, r2, r4
1000a482:	00a4      	lsls	r4, r4, #2
1000a484:	190c      	adds	r4, r1, r4
1000a486:	7d21      	ldrb	r1, [r4, #20]
1000a488:	8830      	ldrh	r0, [r6, #0]
1000a48a:	2201      	movs	r2, #1
1000a48c:	4c0d      	ldr	r4, [pc, #52]	; (1000a4c4 <ble_encryption_request_handler+0xe4>)
1000a48e:	47a0      	blx	r4
1000a490:	2800      	cmp	r0, #0
1000a492:	d006      	beq.n	1000a4a2 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a494:	4805      	ldr	r0, [pc, #20]	; (1000a4ac <ble_encryption_request_handler+0xcc>)
1000a496:	4b06      	ldr	r3, [pc, #24]	; (1000a4b0 <ble_encryption_request_handler+0xd0>)
1000a498:	4798      	blx	r3
1000a49a:	480b      	ldr	r0, [pc, #44]	; (1000a4c8 <ble_encryption_request_handler+0xe8>)
1000a49c:	4b06      	ldr	r3, [pc, #24]	; (1000a4b8 <ble_encryption_request_handler+0xd8>)
1000a49e:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a4a0:	2000      	movs	r0, #0
}
1000a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a4a4:	10013f04 	.word	0x10013f04
1000a4a8:	10010339 	.word	0x10010339
1000a4ac:	100118d4 	.word	0x100118d4
1000a4b0:	10010499 	.word	0x10010499
1000a4b4:	10011bd0 	.word	0x10011bd0
1000a4b8:	10010379 	.word	0x10010379
1000a4bc:	10011c08 	.word	0x10011c08
1000a4c0:	1000ca5d 	.word	0x1000ca5d
1000a4c4:	1000d02d 	.word	0x1000d02d
1000a4c8:	10011c60 	.word	0x10011c60

1000a4cc <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a4cc:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a4ce:	2a00      	cmp	r2, #0
1000a4d0:	d047      	beq.n	1000a562 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a4d2:	2906      	cmp	r1, #6
1000a4d4:	d847      	bhi.n	1000a566 <ble_mgr_events_callback_handler+0x9a>
1000a4d6:	0089      	lsls	r1, r1, #2
1000a4d8:	4b28      	ldr	r3, [pc, #160]	; (1000a57c <ble_mgr_events_callback_handler+0xb0>)
1000a4da:	585b      	ldr	r3, [r3, r1]
1000a4dc:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a4de:	4b28      	ldr	r3, [pc, #160]	; (1000a580 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a4e0:	2405      	movs	r4, #5
1000a4e2:	e00a      	b.n	1000a4fa <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a4e4:	4b27      	ldr	r3, [pc, #156]	; (1000a584 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a4e6:	2401      	movs	r4, #1
			}
			break;
1000a4e8:	e007      	b.n	1000a4fa <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a4ea:	4b27      	ldr	r3, [pc, #156]	; (1000a588 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a4ec:	2405      	movs	r4, #5
			}
			break;
1000a4ee:	e004      	b.n	1000a4fa <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a4f0:	4b26      	ldr	r3, [pc, #152]	; (1000a58c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a4f2:	2401      	movs	r4, #1
			}
			break;
1000a4f4:	e001      	b.n	1000a4fa <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a4f6:	4b26      	ldr	r3, [pc, #152]	; (1000a590 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a4f8:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a4fa:	2800      	cmp	r0, #0
1000a4fc:	d116      	bne.n	1000a52c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a4fe:	6819      	ldr	r1, [r3, #0]
1000a500:	2900      	cmp	r1, #0
1000a502:	d10b      	bne.n	1000a51c <ble_mgr_events_callback_handler+0x50>
1000a504:	e006      	b.n	1000a514 <ble_mgr_events_callback_handler+0x48>
1000a506:	001d      	movs	r5, r3
1000a508:	3304      	adds	r3, #4
1000a50a:	1f18      	subs	r0, r3, #4
1000a50c:	6800      	ldr	r0, [r0, #0]
1000a50e:	2800      	cmp	r0, #0
1000a510:	d106      	bne.n	1000a520 <ble_mgr_events_callback_handler+0x54>
1000a512:	e000      	b.n	1000a516 <ble_mgr_events_callback_handler+0x4a>
1000a514:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a516:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a518:	2101      	movs	r1, #1
						break;
1000a51a:	e02c      	b.n	1000a576 <ble_mgr_events_callback_handler+0xaa>
1000a51c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a51e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a520:	3101      	adds	r1, #1
1000a522:	b2c9      	uxtb	r1, r1
1000a524:	42a1      	cmp	r1, r4
1000a526:	d3ee      	bcc.n	1000a506 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a528:	2100      	movs	r1, #0
1000a52a:	e024      	b.n	1000a576 <ble_mgr_events_callback_handler+0xaa>
1000a52c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a52e:	2801      	cmp	r0, #1
1000a530:	d121      	bne.n	1000a576 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a532:	6819      	ldr	r1, [r3, #0]
1000a534:	428a      	cmp	r2, r1
1000a536:	d10c      	bne.n	1000a552 <ble_mgr_events_callback_handler+0x86>
1000a538:	e006      	b.n	1000a548 <ble_mgr_events_callback_handler+0x7c>
1000a53a:	001d      	movs	r5, r3
1000a53c:	3304      	adds	r3, #4
1000a53e:	1f18      	subs	r0, r3, #4
1000a540:	6800      	ldr	r0, [r0, #0]
1000a542:	4282      	cmp	r2, r0
1000a544:	d107      	bne.n	1000a556 <ble_mgr_events_callback_handler+0x8a>
1000a546:	e000      	b.n	1000a54a <ble_mgr_events_callback_handler+0x7e>
1000a548:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a54a:	2300      	movs	r3, #0
1000a54c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a54e:	2101      	movs	r1, #1
						break;
1000a550:	e011      	b.n	1000a576 <ble_mgr_events_callback_handler+0xaa>
1000a552:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a554:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a556:	3101      	adds	r1, #1
1000a558:	b2c9      	uxtb	r1, r1
1000a55a:	42a1      	cmp	r1, r4
1000a55c:	d3ed      	bcc.n	1000a53a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a55e:	2100      	movs	r1, #0
1000a560:	e009      	b.n	1000a576 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a562:	2100      	movs	r1, #0
1000a564:	e007      	b.n	1000a576 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a566:	2100      	movs	r1, #0
1000a568:	e005      	b.n	1000a576 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a56a:	4b0a      	ldr	r3, [pc, #40]	; (1000a594 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a56c:	2405      	movs	r4, #5
1000a56e:	e7c4      	b.n	1000a4fa <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a570:	4b09      	ldr	r3, [pc, #36]	; (1000a598 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a572:	2401      	movs	r4, #1
1000a574:	e7c1      	b.n	1000a4fa <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a576:	0008      	movs	r0, r1
1000a578:	bd30      	pop	{r4, r5, pc}
1000a57a:	46c0      	nop			; (mov r8, r8)
1000a57c:	10011784 	.word	0x10011784
1000a580:	10013ef0 	.word	0x10013ef0
1000a584:	10013eec 	.word	0x10013eec
1000a588:	10014174 	.word	0x10014174
1000a58c:	10014728 	.word	0x10014728
1000a590:	10014188 	.word	0x10014188
1000a594:	1001419c 	.word	0x1001419c
1000a598:	100141e4 	.word	0x100141e4

1000a59c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a59c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a59e:	465f      	mov	r7, fp
1000a5a0:	4656      	mov	r6, sl
1000a5a2:	464d      	mov	r5, r9
1000a5a4:	4644      	mov	r4, r8
1000a5a6:	b4f0      	push	{r4, r5, r6, r7}
1000a5a8:	b091      	sub	sp, #68	; 0x44
1000a5aa:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000a5ac:	2400      	movs	r4, #0
1000a5ae:	4b7e      	ldr	r3, [pc, #504]	; (1000a7a8 <ble_device_init+0x20c>)
1000a5b0:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a5b2:	2207      	movs	r2, #7
1000a5b4:	2100      	movs	r1, #0
1000a5b6:	487d      	ldr	r0, [pc, #500]	; (1000a7ac <ble_device_init+0x210>)
1000a5b8:	4e7d      	ldr	r6, [pc, #500]	; (1000a7b0 <ble_device_init+0x214>)
1000a5ba:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000a5bc:	2212      	movs	r2, #18
1000a5be:	2100      	movs	r1, #0
1000a5c0:	487c      	ldr	r0, [pc, #496]	; (1000a7b4 <ble_device_init+0x218>)
1000a5c2:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000a5c4:	4a7c      	ldr	r2, [pc, #496]	; (1000a7b8 <ble_device_init+0x21c>)
1000a5c6:	2100      	movs	r1, #0
1000a5c8:	487c      	ldr	r0, [pc, #496]	; (1000a7bc <ble_device_init+0x220>)
1000a5ca:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000a5cc:	4b7c      	ldr	r3, [pc, #496]	; (1000a7c0 <ble_device_init+0x224>)
1000a5ce:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000a5d0:	22cd      	movs	r2, #205	; 0xcd
1000a5d2:	0092      	lsls	r2, r2, #2
1000a5d4:	2100      	movs	r1, #0
1000a5d6:	487b      	ldr	r0, [pc, #492]	; (1000a7c4 <ble_device_init+0x228>)
1000a5d8:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000a5da:	4b7b      	ldr	r3, [pc, #492]	; (1000a7c8 <ble_device_init+0x22c>)
1000a5dc:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000a5de:	2283      	movs	r2, #131	; 0x83
1000a5e0:	0092      	lsls	r2, r2, #2
1000a5e2:	2100      	movs	r1, #0
1000a5e4:	4879      	ldr	r0, [pc, #484]	; (1000a7cc <ble_device_init+0x230>)
1000a5e6:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000a5e8:	4b79      	ldr	r3, [pc, #484]	; (1000a7d0 <ble_device_init+0x234>)
1000a5ea:	469b      	mov	fp, r3
1000a5ec:	2380      	movs	r3, #128	; 0x80
1000a5ee:	00db      	lsls	r3, r3, #3
1000a5f0:	469a      	mov	sl, r3
1000a5f2:	001a      	movs	r2, r3
1000a5f4:	2100      	movs	r1, #0
1000a5f6:	4658      	mov	r0, fp
1000a5f8:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000a5fa:	4b76      	ldr	r3, [pc, #472]	; (1000a7d4 <ble_device_init+0x238>)
1000a5fc:	4699      	mov	r9, r3
1000a5fe:	2380      	movs	r3, #128	; 0x80
1000a600:	015b      	lsls	r3, r3, #5
1000a602:	4698      	mov	r8, r3
1000a604:	001a      	movs	r2, r3
1000a606:	2100      	movs	r1, #0
1000a608:	4648      	mov	r0, r9
1000a60a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000a60c:	4f72      	ldr	r7, [pc, #456]	; (1000a7d8 <ble_device_init+0x23c>)
1000a60e:	221c      	movs	r2, #28
1000a610:	2100      	movs	r1, #0
1000a612:	0038      	movs	r0, r7
1000a614:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000a616:	465b      	mov	r3, fp
1000a618:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000a61a:	4653      	mov	r3, sl
1000a61c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000a61e:	464b      	mov	r3, r9
1000a620:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000a622:	4643      	mov	r3, r8
1000a624:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000a626:	4b6d      	ldr	r3, [pc, #436]	; (1000a7dc <ble_device_init+0x240>)
1000a628:	601c      	str	r4, [r3, #0]
1000a62a:	605c      	str	r4, [r3, #4]
1000a62c:	609c      	str	r4, [r3, #8]
1000a62e:	60dc      	str	r4, [r3, #12]
1000a630:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000a632:	4b6b      	ldr	r3, [pc, #428]	; (1000a7e0 <ble_device_init+0x244>)
1000a634:	601c      	str	r4, [r3, #0]
1000a636:	605c      	str	r4, [r3, #4]
1000a638:	609c      	str	r4, [r3, #8]
1000a63a:	60dc      	str	r4, [r3, #12]
1000a63c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000a63e:	4b69      	ldr	r3, [pc, #420]	; (1000a7e4 <ble_device_init+0x248>)
1000a640:	601c      	str	r4, [r3, #0]
1000a642:	605c      	str	r4, [r3, #4]
1000a644:	609c      	str	r4, [r3, #8]
1000a646:	60dc      	str	r4, [r3, #12]
1000a648:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000a64a:	4b67      	ldr	r3, [pc, #412]	; (1000a7e8 <ble_device_init+0x24c>)
1000a64c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000a64e:	4b67      	ldr	r3, [pc, #412]	; (1000a7ec <ble_device_init+0x250>)
1000a650:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000a652:	4b67      	ldr	r3, [pc, #412]	; (1000a7f0 <ble_device_init+0x254>)
1000a654:	601c      	str	r4, [r3, #0]
1000a656:	605c      	str	r4, [r3, #4]
1000a658:	609c      	str	r4, [r3, #8]
1000a65a:	60dc      	str	r4, [r3, #12]
1000a65c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000a65e:	4b65      	ldr	r3, [pc, #404]	; (1000a7f4 <ble_device_init+0x258>)
1000a660:	601c      	str	r4, [r3, #0]
1000a662:	4c65      	ldr	r4, [pc, #404]	; (1000a7f8 <ble_device_init+0x25c>)
1000a664:	239b      	movs	r3, #155	; 0x9b
1000a666:	009b      	lsls	r3, r3, #2
1000a668:	4698      	mov	r8, r3
1000a66a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a66c:	4f50      	ldr	r7, [pc, #320]	; (1000a7b0 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a66e:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000a670:	227c      	movs	r2, #124	; 0x7c
1000a672:	2100      	movs	r1, #0
1000a674:	0020      	movs	r0, r4
1000a676:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a678:	0023      	movs	r3, r4
1000a67a:	335e      	adds	r3, #94	; 0x5e
1000a67c:	2200      	movs	r2, #0
1000a67e:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000a680:	7626      	strb	r6, [r4, #24]
1000a682:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a684:	45a0      	cmp	r8, r4
1000a686:	d1f3      	bne.n	1000a670 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000a688:	4b5c      	ldr	r3, [pc, #368]	; (1000a7fc <ble_device_init+0x260>)
1000a68a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000a68c:	4c52      	ldr	r4, [pc, #328]	; (1000a7d8 <ble_device_init+0x23c>)
1000a68e:	4b4a      	ldr	r3, [pc, #296]	; (1000a7b8 <ble_device_init+0x21c>)
1000a690:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000a692:	4b4a      	ldr	r3, [pc, #296]	; (1000a7bc <ble_device_init+0x220>)
1000a694:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000a696:	485a      	ldr	r0, [pc, #360]	; (1000a800 <ble_device_init+0x264>)
1000a698:	4b5a      	ldr	r3, [pc, #360]	; (1000a804 <ble_device_init+0x268>)
1000a69a:	4798      	blx	r3
1000a69c:	485a      	ldr	r0, [pc, #360]	; (1000a808 <ble_device_init+0x26c>)
1000a69e:	4b5b      	ldr	r3, [pc, #364]	; (1000a80c <ble_device_init+0x270>)
1000a6a0:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000a6a2:	0020      	movs	r0, r4
1000a6a4:	4b5a      	ldr	r3, [pc, #360]	; (1000a810 <ble_device_init+0x274>)
1000a6a6:	4798      	blx	r3
1000a6a8:	2800      	cmp	r0, #0
1000a6aa:	d00b      	beq.n	1000a6c4 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000a6ac:	4e54      	ldr	r6, [pc, #336]	; (1000a800 <ble_device_init+0x264>)
1000a6ae:	0030      	movs	r0, r6
1000a6b0:	4d54      	ldr	r5, [pc, #336]	; (1000a804 <ble_device_init+0x268>)
1000a6b2:	47a8      	blx	r5
1000a6b4:	4857      	ldr	r0, [pc, #348]	; (1000a814 <ble_device_init+0x278>)
1000a6b6:	4c55      	ldr	r4, [pc, #340]	; (1000a80c <ble_device_init+0x270>)
1000a6b8:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000a6ba:	0030      	movs	r0, r6
1000a6bc:	47a8      	blx	r5
1000a6be:	4856      	ldr	r0, [pc, #344]	; (1000a818 <ble_device_init+0x27c>)
1000a6c0:	47a0      	blx	r4
1000a6c2:	e7fe      	b.n	1000a6c2 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000a6c4:	4a55      	ldr	r2, [pc, #340]	; (1000a81c <ble_device_init+0x280>)
1000a6c6:	2100      	movs	r1, #0
1000a6c8:	2000      	movs	r0, #0
1000a6ca:	4c55      	ldr	r4, [pc, #340]	; (1000a820 <ble_device_init+0x284>)
1000a6cc:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000a6ce:	4a55      	ldr	r2, [pc, #340]	; (1000a824 <ble_device_init+0x288>)
1000a6d0:	2102      	movs	r1, #2
1000a6d2:	2000      	movs	r0, #0
1000a6d4:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000a6d6:	2109      	movs	r1, #9
1000a6d8:	4853      	ldr	r0, [pc, #332]	; (1000a828 <ble_device_init+0x28c>)
1000a6da:	4b54      	ldr	r3, [pc, #336]	; (1000a82c <ble_device_init+0x290>)
1000a6dc:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000a6de:	2800      	cmp	r0, #0
1000a6e0:	d005      	beq.n	1000a6ee <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000a6e2:	4847      	ldr	r0, [pc, #284]	; (1000a800 <ble_device_init+0x264>)
1000a6e4:	4b47      	ldr	r3, [pc, #284]	; (1000a804 <ble_device_init+0x268>)
1000a6e6:	4798      	blx	r3
1000a6e8:	4851      	ldr	r0, [pc, #324]	; (1000a830 <ble_device_init+0x294>)
1000a6ea:	4b48      	ldr	r3, [pc, #288]	; (1000a80c <ble_device_init+0x270>)
1000a6ec:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000a6ee:	2207      	movs	r2, #7
1000a6f0:	4950      	ldr	r1, [pc, #320]	; (1000a834 <ble_device_init+0x298>)
1000a6f2:	3108      	adds	r1, #8
1000a6f4:	a804      	add	r0, sp, #16
1000a6f6:	4b50      	ldr	r3, [pc, #320]	; (1000a838 <ble_device_init+0x29c>)
1000a6f8:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000a6fa:	2226      	movs	r2, #38	; 0x26
1000a6fc:	2100      	movs	r1, #0
1000a6fe:	a806      	add	r0, sp, #24
1000a700:	4b2b      	ldr	r3, [pc, #172]	; (1000a7b0 <ble_device_init+0x214>)
1000a702:	4798      	blx	r3
	
	if (addr == NULL)
1000a704:	2d00      	cmp	r5, #0
1000a706:	d10c      	bne.n	1000a722 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a708:	a804      	add	r0, sp, #16
1000a70a:	4b4c      	ldr	r3, [pc, #304]	; (1000a83c <ble_device_init+0x2a0>)
1000a70c:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a70e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000a710:	2800      	cmp	r0, #0
1000a712:	d006      	beq.n	1000a722 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000a714:	483a      	ldr	r0, [pc, #232]	; (1000a800 <ble_device_init+0x264>)
1000a716:	4b3b      	ldr	r3, [pc, #236]	; (1000a804 <ble_device_init+0x268>)
1000a718:	4798      	blx	r3
1000a71a:	4849      	ldr	r0, [pc, #292]	; (1000a840 <ble_device_init+0x2a4>)
1000a71c:	4b3b      	ldr	r3, [pc, #236]	; (1000a80c <ble_device_init+0x270>)
1000a71e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000a720:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000a722:	4837      	ldr	r0, [pc, #220]	; (1000a800 <ble_device_init+0x264>)
1000a724:	4b37      	ldr	r3, [pc, #220]	; (1000a804 <ble_device_init+0x268>)
1000a726:	4798      	blx	r3
1000a728:	792b      	ldrb	r3, [r5, #4]
1000a72a:	796a      	ldrb	r2, [r5, #5]
1000a72c:	79a9      	ldrb	r1, [r5, #6]
1000a72e:	7828      	ldrb	r0, [r5, #0]
1000a730:	9003      	str	r0, [sp, #12]
1000a732:	7868      	ldrb	r0, [r5, #1]
1000a734:	9002      	str	r0, [sp, #8]
1000a736:	78a8      	ldrb	r0, [r5, #2]
1000a738:	9001      	str	r0, [sp, #4]
1000a73a:	78e8      	ldrb	r0, [r5, #3]
1000a73c:	9000      	str	r0, [sp, #0]
1000a73e:	4841      	ldr	r0, [pc, #260]	; (1000a844 <ble_device_init+0x2a8>)
1000a740:	4c32      	ldr	r4, [pc, #200]	; (1000a80c <ble_device_init+0x270>)
1000a742:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000a744:	ac06      	add	r4, sp, #24
1000a746:	230f      	movs	r3, #15
1000a748:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000a74a:	4b3f      	ldr	r3, [pc, #252]	; (1000a848 <ble_device_init+0x2ac>)
1000a74c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000a74e:	2207      	movs	r2, #7
1000a750:	0029      	movs	r1, r5
1000a752:	a807      	add	r0, sp, #28
1000a754:	4b38      	ldr	r3, [pc, #224]	; (1000a838 <ble_device_init+0x29c>)
1000a756:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000a758:	2300      	movs	r3, #0
1000a75a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000a75c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000a75e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000a760:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000a762:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a764:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000a766:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000a768:	2380      	movs	r3, #128	; 0x80
1000a76a:	009b      	lsls	r3, r3, #2
1000a76c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000a76e:	0020      	movs	r0, r4
1000a770:	4b36      	ldr	r3, [pc, #216]	; (1000a84c <ble_device_init+0x2b0>)
1000a772:	4798      	blx	r3
1000a774:	2800      	cmp	r0, #0
1000a776:	d005      	beq.n	1000a784 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000a778:	4821      	ldr	r0, [pc, #132]	; (1000a800 <ble_device_init+0x264>)
1000a77a:	4b22      	ldr	r3, [pc, #136]	; (1000a804 <ble_device_init+0x268>)
1000a77c:	4798      	blx	r3
1000a77e:	4834      	ldr	r0, [pc, #208]	; (1000a850 <ble_device_init+0x2b4>)
1000a780:	4b22      	ldr	r3, [pc, #136]	; (1000a80c <ble_device_init+0x270>)
1000a782:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000a784:	0028      	movs	r0, r5
1000a786:	4b33      	ldr	r3, [pc, #204]	; (1000a854 <ble_device_init+0x2b8>)
1000a788:	4798      	blx	r3
1000a78a:	2800      	cmp	r0, #0
1000a78c:	d005      	beq.n	1000a79a <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000a78e:	481c      	ldr	r0, [pc, #112]	; (1000a800 <ble_device_init+0x264>)
1000a790:	4b1c      	ldr	r3, [pc, #112]	; (1000a804 <ble_device_init+0x268>)
1000a792:	4798      	blx	r3
1000a794:	4830      	ldr	r0, [pc, #192]	; (1000a858 <ble_device_init+0x2bc>)
1000a796:	4b1d      	ldr	r3, [pc, #116]	; (1000a80c <ble_device_init+0x270>)
1000a798:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000a79a:	b011      	add	sp, #68	; 0x44
1000a79c:	bc3c      	pop	{r2, r3, r4, r5}
1000a79e:	4690      	mov	r8, r2
1000a7a0:	4699      	mov	r9, r3
1000a7a2:	46a2      	mov	sl, r4
1000a7a4:	46ab      	mov	fp, r5
1000a7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7a8:	10012ce4 	.word	0x10012ce4
1000a7ac:	10012cec 	.word	0x10012cec
1000a7b0:	10010369 	.word	0x10010369
1000a7b4:	100141b0 	.word	0x100141b0
1000a7b8:	000004e2 	.word	0x000004e2
1000a7bc:	10012804 	.word	0x10012804
1000a7c0:	10012ce8 	.word	0x10012ce8
1000a7c4:	100141e8 	.word	0x100141e8
1000a7c8:	100141e0 	.word	0x100141e0
1000a7cc:	1001451c 	.word	0x1001451c
1000a7d0:	10012404 	.word	0x10012404
1000a7d4:	10012cf4 	.word	0x10012cf4
1000a7d8:	100141c4 	.word	0x100141c4
1000a7dc:	10014188 	.word	0x10014188
1000a7e0:	1001419c 	.word	0x1001419c
1000a7e4:	10013ef0 	.word	0x10013ef0
1000a7e8:	100141e4 	.word	0x100141e4
1000a7ec:	10013eec 	.word	0x10013eec
1000a7f0:	10014174 	.word	0x10014174
1000a7f4:	10014728 	.word	0x10014728
1000a7f8:	10013f04 	.word	0x10013f04
1000a7fc:	10014170 	.word	0x10014170
1000a800:	100118d4 	.word	0x100118d4
1000a804:	10010499 	.word	0x10010499
1000a808:	10011c80 	.word	0x10011c80
1000a80c:	10010379 	.word	0x10010379
1000a810:	1000c675 	.word	0x1000c675
1000a814:	10011c94 	.word	0x10011c94
1000a818:	10011cb4 	.word	0x10011cb4
1000a81c:	10011eec 	.word	0x10011eec
1000a820:	1000a4cd 	.word	0x1000a4cd
1000a824:	100118ac 	.word	0x100118ac
1000a828:	10011cf0 	.word	0x10011cf0
1000a82c:	1000c58d 	.word	0x1000c58d
1000a830:	10011cfc 	.word	0x10011cfc
1000a834:	10011890 	.word	0x10011890
1000a838:	10010357 	.word	0x10010357
1000a83c:	1000c5c1 	.word	0x1000c5c1
1000a840:	10011d14 	.word	0x10011d14
1000a844:	10011d2c 	.word	0x10011d2c
1000a848:	00003a98 	.word	0x00003a98
1000a84c:	1000c5e5 	.word	0x1000c5e5
1000a850:	10011d64 	.word	0x10011d64
1000a854:	1000c829 	.word	0x1000c829
1000a858:	10011d88 	.word	0x10011d88

1000a85c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000a85c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000a85e:	2201      	movs	r2, #1
1000a860:	2101      	movs	r1, #1
1000a862:	4b06      	ldr	r3, [pc, #24]	; (1000a87c <ble_send_slave_sec_request+0x20>)
1000a864:	4798      	blx	r3
1000a866:	2800      	cmp	r0, #0
1000a868:	d006      	beq.n	1000a878 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000a86a:	4805      	ldr	r0, [pc, #20]	; (1000a880 <ble_send_slave_sec_request+0x24>)
1000a86c:	4b05      	ldr	r3, [pc, #20]	; (1000a884 <ble_send_slave_sec_request+0x28>)
1000a86e:	4798      	blx	r3
1000a870:	4805      	ldr	r0, [pc, #20]	; (1000a888 <ble_send_slave_sec_request+0x2c>)
1000a872:	4b06      	ldr	r3, [pc, #24]	; (1000a88c <ble_send_slave_sec_request+0x30>)
1000a874:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000a876:	20e2      	movs	r0, #226	; 0xe2
}
1000a878:	bd10      	pop	{r4, pc}
1000a87a:	46c0      	nop			; (mov r8, r8)
1000a87c:	1000cf75 	.word	0x1000cf75
1000a880:	100118d4 	.word	0x100118d4
1000a884:	10010499 	.word	0x10010499
1000a888:	10011dc4 	.word	0x10011dc4
1000a88c:	10010379 	.word	0x10010379

1000a890 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a890:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a892:	465f      	mov	r7, fp
1000a894:	464e      	mov	r6, r9
1000a896:	4645      	mov	r5, r8
1000a898:	b4e0      	push	{r5, r6, r7}
1000a89a:	b09a      	sub	sp, #104	; 0x68
1000a89c:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000a89e:	7a86      	ldrb	r6, [r0, #10]
1000a8a0:	2e00      	cmp	r6, #0
1000a8a2:	d000      	beq.n	1000a8a6 <ble_connected_state_handler+0x16>
1000a8a4:	e0c6      	b.n	1000aa34 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000a8a6:	4875      	ldr	r0, [pc, #468]	; (1000aa7c <ble_connected_state_handler+0x1ec>)
1000a8a8:	4f75      	ldr	r7, [pc, #468]	; (1000aa80 <ble_connected_state_handler+0x1f0>)
1000a8aa:	47b8      	blx	r7
1000a8ac:	792b      	ldrb	r3, [r5, #4]
1000a8ae:	796a      	ldrb	r2, [r5, #5]
1000a8b0:	79a9      	ldrb	r1, [r5, #6]
1000a8b2:	7868      	ldrb	r0, [r5, #1]
1000a8b4:	9002      	str	r0, [sp, #8]
1000a8b6:	78a8      	ldrb	r0, [r5, #2]
1000a8b8:	9001      	str	r0, [sp, #4]
1000a8ba:	78e8      	ldrb	r0, [r5, #3]
1000a8bc:	9000      	str	r0, [sp, #0]
1000a8be:	4871      	ldr	r0, [pc, #452]	; (1000aa84 <ble_connected_state_handler+0x1f4>)
1000a8c0:	4c71      	ldr	r4, [pc, #452]	; (1000aa88 <ble_connected_state_handler+0x1f8>)
1000a8c2:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000a8c4:	486d      	ldr	r0, [pc, #436]	; (1000aa7c <ble_connected_state_handler+0x1ec>)
1000a8c6:	47b8      	blx	r7
1000a8c8:	8929      	ldrh	r1, [r5, #8]
1000a8ca:	4870      	ldr	r0, [pc, #448]	; (1000aa8c <ble_connected_state_handler+0x1fc>)
1000a8cc:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000a8ce:	2212      	movs	r2, #18
1000a8d0:	0029      	movs	r1, r5
1000a8d2:	486f      	ldr	r0, [pc, #444]	; (1000aa90 <ble_connected_state_handler+0x200>)
1000a8d4:	4b6f      	ldr	r3, [pc, #444]	; (1000aa94 <ble_connected_state_handler+0x204>)
1000a8d6:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a8d8:	9504      	str	r5, [sp, #16]
1000a8da:	2207      	movs	r2, #7
1000a8dc:	0029      	movs	r1, r5
1000a8de:	486e      	ldr	r0, [pc, #440]	; (1000aa98 <ble_connected_state_handler+0x208>)
1000a8e0:	4b6e      	ldr	r3, [pc, #440]	; (1000aa9c <ble_connected_state_handler+0x20c>)
1000a8e2:	4798      	blx	r3
1000a8e4:	2800      	cmp	r0, #0
1000a8e6:	d100      	bne.n	1000a8ea <ble_connected_state_handler+0x5a>
1000a8e8:	e0ad      	b.n	1000aa46 <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000a8ea:	782b      	ldrb	r3, [r5, #0]
1000a8ec:	2b02      	cmp	r3, #2
1000a8ee:	d000      	beq.n	1000a8f2 <ble_connected_state_handler+0x62>
1000a8f0:	e0a9      	b.n	1000aa46 <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000a8f2:	2250      	movs	r2, #80	; 0x50
1000a8f4:	2100      	movs	r1, #0
1000a8f6:	a806      	add	r0, sp, #24
1000a8f8:	4b69      	ldr	r3, [pc, #420]	; (1000aaa0 <ble_connected_state_handler+0x210>)
1000a8fa:	4798      	blx	r3
1000a8fc:	4f69      	ldr	r7, [pc, #420]	; (1000aaa4 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000a8fe:	2300      	movs	r3, #0
1000a900:	e00b      	b.n	1000a91a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a902:	1c59      	adds	r1, r3, #1
1000a904:	7814      	ldrb	r4, [r2, #0]
1000a906:	a806      	add	r0, sp, #24
1000a908:	54c4      	strb	r4, [r0, r3]
1000a90a:	3201      	adds	r2, #1
1000a90c:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000a90e:	42b3      	cmp	r3, r6
1000a910:	d1f7      	bne.n	1000a902 <ble_connected_state_handler+0x72>
1000a912:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000a914:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000a916:	2b50      	cmp	r3, #80	; 0x50
1000a918:	d004      	beq.n	1000a924 <ble_connected_state_handler+0x94>
1000a91a:	001e      	movs	r6, r3
1000a91c:	3610      	adds	r6, #16
1000a91e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000a920:	003a      	movs	r2, r7
1000a922:	e7ee      	b.n	1000a902 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000a924:	aa06      	add	r2, sp, #24
1000a926:	0029      	movs	r1, r5
1000a928:	2005      	movs	r0, #5
1000a92a:	4b5f      	ldr	r3, [pc, #380]	; (1000aaa8 <ble_connected_state_handler+0x218>)
1000a92c:	4798      	blx	r3
1000a92e:	1e06      	subs	r6, r0, #0
1000a930:	d100      	bne.n	1000a934 <ble_connected_state_handler+0xa4>
1000a932:	e09c      	b.n	1000aa6e <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000a934:	4851      	ldr	r0, [pc, #324]	; (1000aa7c <ble_connected_state_handler+0x1ec>)
1000a936:	4b52      	ldr	r3, [pc, #328]	; (1000aa80 <ble_connected_state_handler+0x1f0>)
1000a938:	4798      	blx	r3
1000a93a:	485c      	ldr	r0, [pc, #368]	; (1000aaac <ble_connected_state_handler+0x21c>)
1000a93c:	4b52      	ldr	r3, [pc, #328]	; (1000aa88 <ble_connected_state_handler+0x1f8>)
1000a93e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000a940:	26e2      	movs	r6, #226	; 0xe2
1000a942:	e094      	b.n	1000aa6e <ble_connected_state_handler+0x1de>
1000a944:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a946:	9405      	str	r4, [sp, #20]
1000a948:	2207      	movs	r2, #7
1000a94a:	9904      	ldr	r1, [sp, #16]
1000a94c:	4648      	mov	r0, r9
1000a94e:	47d8      	blx	fp
1000a950:	2800      	cmp	r0, #0
1000a952:	d109      	bne.n	1000a968 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a954:	9a05      	ldr	r2, [sp, #20]
1000a956:	0153      	lsls	r3, r2, #5
1000a958:	1a9b      	subs	r3, r3, r2
1000a95a:	009a      	lsls	r2, r3, #2
1000a95c:	4b54      	ldr	r3, [pc, #336]	; (1000aab0 <ble_connected_state_handler+0x220>)
1000a95e:	189b      	adds	r3, r3, r2
1000a960:	335e      	adds	r3, #94	; 0x5e
1000a962:	2202      	movs	r2, #2
1000a964:	701a      	strb	r2, [r3, #0]
1000a966:	e02b      	b.n	1000a9c0 <ble_connected_state_handler+0x130>
1000a968:	3401      	adds	r4, #1
1000a96a:	237c      	movs	r3, #124	; 0x7c
1000a96c:	469c      	mov	ip, r3
1000a96e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a970:	2c05      	cmp	r4, #5
1000a972:	d1e7      	bne.n	1000a944 <ble_connected_state_handler+0xb4>
1000a974:	e072      	b.n	1000aa5c <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000a976:	001c      	movs	r4, r3
1000a978:	7811      	ldrb	r1, [r2, #0]
1000a97a:	2900      	cmp	r1, #0
1000a97c:	d11a      	bne.n	1000a9b4 <ble_connected_state_handler+0x124>
1000a97e:	e001      	b.n	1000a984 <ble_connected_state_handler+0xf4>
1000a980:	2400      	movs	r4, #0
1000a982:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000a984:	0163      	lsls	r3, r4, #5
1000a986:	4699      	mov	r9, r3
1000a988:	1b18      	subs	r0, r3, r4
1000a98a:	0080      	lsls	r0, r0, #2
1000a98c:	4b48      	ldr	r3, [pc, #288]	; (1000aab0 <ble_connected_state_handler+0x220>)
1000a98e:	4698      	mov	r8, r3
1000a990:	4440      	add	r0, r8
1000a992:	2212      	movs	r2, #18
1000a994:	0029      	movs	r1, r5
1000a996:	4b3f      	ldr	r3, [pc, #252]	; (1000aa94 <ble_connected_state_handler+0x204>)
1000a998:	4798      	blx	r3
						ble_device_count++;
1000a99a:	4a46      	ldr	r2, [pc, #280]	; (1000aab4 <ble_connected_state_handler+0x224>)
1000a99c:	7813      	ldrb	r3, [r2, #0]
1000a99e:	3301      	adds	r3, #1
1000a9a0:	b2db      	uxtb	r3, r3
1000a9a2:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a9a4:	464b      	mov	r3, r9
1000a9a6:	1b1b      	subs	r3, r3, r4
1000a9a8:	009b      	lsls	r3, r3, #2
1000a9aa:	4443      	add	r3, r8
1000a9ac:	335e      	adds	r3, #94	; 0x5e
1000a9ae:	2202      	movs	r2, #2
1000a9b0:	701a      	strb	r2, [r3, #0]
						break;
1000a9b2:	e005      	b.n	1000a9c0 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a9b4:	1c79      	adds	r1, r7, #1
1000a9b6:	b2cf      	uxtb	r7, r1
1000a9b8:	3301      	adds	r3, #1
1000a9ba:	327c      	adds	r2, #124	; 0x7c
1000a9bc:	2f05      	cmp	r7, #5
1000a9be:	d1da      	bne.n	1000a976 <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000a9c0:	2207      	movs	r2, #7
1000a9c2:	0029      	movs	r1, r5
1000a9c4:	4834      	ldr	r0, [pc, #208]	; (1000aa98 <ble_connected_state_handler+0x208>)
1000a9c6:	4b35      	ldr	r3, [pc, #212]	; (1000aa9c <ble_connected_state_handler+0x20c>)
1000a9c8:	4798      	blx	r3
1000a9ca:	2800      	cmp	r0, #0
1000a9cc:	d10c      	bne.n	1000a9e8 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000a9ce:	017b      	lsls	r3, r7, #5
1000a9d0:	1bdb      	subs	r3, r3, r7
1000a9d2:	009b      	lsls	r3, r3, #2
1000a9d4:	4a36      	ldr	r2, [pc, #216]	; (1000aab0 <ble_connected_state_handler+0x220>)
1000a9d6:	18d3      	adds	r3, r2, r3
1000a9d8:	2205      	movs	r2, #5
1000a9da:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a9dc:	3202      	adds	r2, #2
1000a9de:	2100      	movs	r1, #0
1000a9e0:	482d      	ldr	r0, [pc, #180]	; (1000aa98 <ble_connected_state_handler+0x208>)
1000a9e2:	4b2f      	ldr	r3, [pc, #188]	; (1000aaa0 <ble_connected_state_handler+0x210>)
1000a9e4:	4798      	blx	r3
1000a9e6:	e042      	b.n	1000aa6e <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000a9e8:	4b31      	ldr	r3, [pc, #196]	; (1000aab0 <ble_connected_state_handler+0x220>)
1000a9ea:	4698      	mov	r8, r3
1000a9ec:	017c      	lsls	r4, r7, #5
1000a9ee:	1be3      	subs	r3, r4, r7
1000a9f0:	009b      	lsls	r3, r3, #2
1000a9f2:	4443      	add	r3, r8
1000a9f4:	220a      	movs	r2, #10
1000a9f6:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000a9f8:	3a03      	subs	r2, #3
1000a9fa:	2100      	movs	r1, #0
1000a9fc:	4826      	ldr	r0, [pc, #152]	; (1000aa98 <ble_connected_state_handler+0x208>)
1000a9fe:	4b28      	ldr	r3, [pc, #160]	; (1000aaa0 <ble_connected_state_handler+0x210>)
1000aa00:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000aa02:	1be4      	subs	r4, r4, r7
1000aa04:	00a4      	lsls	r4, r4, #2
1000aa06:	4444      	add	r4, r8
1000aa08:	7ca3      	ldrb	r3, [r4, #18]
1000aa0a:	2b0a      	cmp	r3, #10
1000aa0c:	d12f      	bne.n	1000aa6e <ble_connected_state_handler+0x1de>
1000aa0e:	e00d      	b.n	1000aa2c <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000aa10:	481a      	ldr	r0, [pc, #104]	; (1000aa7c <ble_connected_state_handler+0x1ec>)
1000aa12:	4b1b      	ldr	r3, [pc, #108]	; (1000aa80 <ble_connected_state_handler+0x1f0>)
1000aa14:	4798      	blx	r3
1000aa16:	4b27      	ldr	r3, [pc, #156]	; (1000aab4 <ble_connected_state_handler+0x224>)
1000aa18:	7819      	ldrb	r1, [r3, #0]
1000aa1a:	b2c9      	uxtb	r1, r1
1000aa1c:	4826      	ldr	r0, [pc, #152]	; (1000aab8 <ble_connected_state_handler+0x228>)
1000aa1e:	4b1a      	ldr	r3, [pc, #104]	; (1000aa88 <ble_connected_state_handler+0x1f8>)
1000aa20:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000aa22:	8928      	ldrh	r0, [r5, #8]
1000aa24:	2113      	movs	r1, #19
1000aa26:	4b25      	ldr	r3, [pc, #148]	; (1000aabc <ble_connected_state_handler+0x22c>)
1000aa28:	4798      	blx	r3
1000aa2a:	e020      	b.n	1000aa6e <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000aa2c:	8928      	ldrh	r0, [r5, #8]
1000aa2e:	4b24      	ldr	r3, [pc, #144]	; (1000aac0 <ble_connected_state_handler+0x230>)
1000aa30:	4798      	blx	r3
1000aa32:	e01c      	b.n	1000aa6e <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000aa34:	4811      	ldr	r0, [pc, #68]	; (1000aa7c <ble_connected_state_handler+0x1ec>)
1000aa36:	4b12      	ldr	r3, [pc, #72]	; (1000aa80 <ble_connected_state_handler+0x1f0>)
1000aa38:	4798      	blx	r3
1000aa3a:	7aa9      	ldrb	r1, [r5, #10]
1000aa3c:	4821      	ldr	r0, [pc, #132]	; (1000aac4 <ble_connected_state_handler+0x234>)
1000aa3e:	4b12      	ldr	r3, [pc, #72]	; (1000aa88 <ble_connected_state_handler+0x1f8>)
1000aa40:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000aa42:	2600      	movs	r6, #0
1000aa44:	e013      	b.n	1000aa6e <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000aa46:	4b1b      	ldr	r3, [pc, #108]	; (1000aab4 <ble_connected_state_handler+0x224>)
1000aa48:	781b      	ldrb	r3, [r3, #0]
1000aa4a:	b2db      	uxtb	r3, r3
1000aa4c:	2b04      	cmp	r3, #4
1000aa4e:	d8df      	bhi.n	1000aa10 <ble_connected_state_handler+0x180>
1000aa50:	4b17      	ldr	r3, [pc, #92]	; (1000aab0 <ble_connected_state_handler+0x220>)
1000aa52:	4699      	mov	r9, r3
1000aa54:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000aa56:	4b11      	ldr	r3, [pc, #68]	; (1000aa9c <ble_connected_state_handler+0x20c>)
1000aa58:	469b      	mov	fp, r3
1000aa5a:	e773      	b.n	1000a944 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aa5c:	235e      	movs	r3, #94	; 0x5e
1000aa5e:	4a14      	ldr	r2, [pc, #80]	; (1000aab0 <ble_connected_state_handler+0x220>)
1000aa60:	5cd3      	ldrb	r3, [r2, r3]
1000aa62:	2b00      	cmp	r3, #0
1000aa64:	d08c      	beq.n	1000a980 <ble_connected_state_handler+0xf0>
1000aa66:	4a18      	ldr	r2, [pc, #96]	; (1000aac8 <ble_connected_state_handler+0x238>)
1000aa68:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aa6a:	2701      	movs	r7, #1
1000aa6c:	e783      	b.n	1000a976 <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000aa6e:	0030      	movs	r0, r6
1000aa70:	b01a      	add	sp, #104	; 0x68
1000aa72:	bc1c      	pop	{r2, r3, r4}
1000aa74:	4690      	mov	r8, r2
1000aa76:	4699      	mov	r9, r3
1000aa78:	46a3      	mov	fp, r4
1000aa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa7c:	100118d4 	.word	0x100118d4
1000aa80:	10010499 	.word	0x10010499
1000aa84:	10011de4 	.word	0x10011de4
1000aa88:	10010379 	.word	0x10010379
1000aa8c:	10011e28 	.word	0x10011e28
1000aa90:	100141b0 	.word	0x100141b0
1000aa94:	10010357 	.word	0x10010357
1000aa98:	10012cec 	.word	0x10012cec
1000aa9c:	10010339 	.word	0x10010339
1000aaa0:	10010369 	.word	0x10010369
1000aaa4:	10013f4a 	.word	0x10013f4a
1000aaa8:	1000ca89 	.word	0x1000ca89
1000aaac:	10011e40 	.word	0x10011e40
1000aab0:	10013f04 	.word	0x10013f04
1000aab4:	10014170 	.word	0x10014170
1000aab8:	10011e64 	.word	0x10011e64
1000aabc:	1000ca5d 	.word	0x1000ca5d
1000aac0:	1000a85d 	.word	0x1000a85d
1000aac4:	10011ea0 	.word	0x10011ea0
1000aac8:	10013fde 	.word	0x10013fde

1000aacc <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000aacc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aace:	4647      	mov	r7, r8
1000aad0:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000aad2:	7803      	ldrb	r3, [r0, #0]
1000aad4:	2b00      	cmp	r3, #0
1000aad6:	d141      	bne.n	1000ab5c <ble_resolv_rand_addr_handler+0x90>
1000aad8:	4d2f      	ldr	r5, [pc, #188]	; (1000ab98 <ble_resolv_rand_addr_handler+0xcc>)
1000aada:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000aadc:	1c46      	adds	r6, r0, #1
1000aade:	4f2f      	ldr	r7, [pc, #188]	; (1000ab9c <ble_resolv_rand_addr_handler+0xd0>)
1000aae0:	2210      	movs	r2, #16
1000aae2:	0029      	movs	r1, r5
1000aae4:	0030      	movs	r0, r6
1000aae6:	47b8      	blx	r7
1000aae8:	2800      	cmp	r0, #0
1000aaea:	d03f      	beq.n	1000ab6c <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aaec:	3401      	adds	r4, #1
1000aaee:	b2e4      	uxtb	r4, r4
1000aaf0:	357c      	adds	r5, #124	; 0x7c
1000aaf2:	2c05      	cmp	r4, #5
1000aaf4:	d1f4      	bne.n	1000aae0 <ble_resolv_rand_addr_handler+0x14>
1000aaf6:	e031      	b.n	1000ab5c <ble_resolv_rand_addr_handler+0x90>
1000aaf8:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aafa:	001c      	movs	r4, r3
1000aafc:	7811      	ldrb	r1, [r2, #0]
1000aafe:	2900      	cmp	r1, #0
1000ab00:	d122      	bne.n	1000ab48 <ble_resolv_rand_addr_handler+0x7c>
1000ab02:	e001      	b.n	1000ab08 <ble_resolv_rand_addr_handler+0x3c>
1000ab04:	2400      	movs	r4, #0
1000ab06:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ab08:	4b25      	ldr	r3, [pc, #148]	; (1000aba0 <ble_resolv_rand_addr_handler+0xd4>)
1000ab0a:	4698      	mov	r8, r3
1000ab0c:	0166      	lsls	r6, r4, #5
1000ab0e:	1b37      	subs	r7, r6, r4
1000ab10:	00bf      	lsls	r7, r7, #2
1000ab12:	4447      	add	r7, r8
1000ab14:	2212      	movs	r2, #18
1000ab16:	4923      	ldr	r1, [pc, #140]	; (1000aba4 <ble_resolv_rand_addr_handler+0xd8>)
1000ab18:	0038      	movs	r0, r7
1000ab1a:	4b23      	ldr	r3, [pc, #140]	; (1000aba8 <ble_resolv_rand_addr_handler+0xdc>)
1000ab1c:	4798      	blx	r3
				ble_device_count++;
1000ab1e:	4a23      	ldr	r2, [pc, #140]	; (1000abac <ble_resolv_rand_addr_handler+0xe0>)
1000ab20:	7813      	ldrb	r3, [r2, #0]
1000ab22:	3301      	adds	r3, #1
1000ab24:	b2db      	uxtb	r3, r3
1000ab26:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ab28:	375e      	adds	r7, #94	; 0x5e
1000ab2a:	2302      	movs	r3, #2
1000ab2c:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ab2e:	1b34      	subs	r4, r6, r4
1000ab30:	00a4      	lsls	r4, r4, #2
1000ab32:	4444      	add	r4, r8
1000ab34:	3308      	adds	r3, #8
1000ab36:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ab38:	016b      	lsls	r3, r5, #5
1000ab3a:	1b5d      	subs	r5, r3, r5
1000ab3c:	00ad      	lsls	r5, r5, #2
1000ab3e:	4445      	add	r5, r8
1000ab40:	7cab      	ldrb	r3, [r5, #18]
1000ab42:	2b0a      	cmp	r3, #10
1000ab44:	d123      	bne.n	1000ab8e <ble_resolv_rand_addr_handler+0xc2>
1000ab46:	e004      	b.n	1000ab52 <ble_resolv_rand_addr_handler+0x86>
1000ab48:	3301      	adds	r3, #1
1000ab4a:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ab4c:	2b05      	cmp	r3, #5
1000ab4e:	d1d3      	bne.n	1000aaf8 <ble_resolv_rand_addr_handler+0x2c>
1000ab50:	e01d      	b.n	1000ab8e <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000ab52:	4b14      	ldr	r3, [pc, #80]	; (1000aba4 <ble_resolv_rand_addr_handler+0xd8>)
1000ab54:	8918      	ldrh	r0, [r3, #8]
1000ab56:	4b16      	ldr	r3, [pc, #88]	; (1000abb0 <ble_resolv_rand_addr_handler+0xe4>)
1000ab58:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000ab5a:	e018      	b.n	1000ab8e <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ab5c:	235e      	movs	r3, #94	; 0x5e
1000ab5e:	4a10      	ldr	r2, [pc, #64]	; (1000aba0 <ble_resolv_rand_addr_handler+0xd4>)
1000ab60:	5cd3      	ldrb	r3, [r2, r3]
1000ab62:	2b00      	cmp	r3, #0
1000ab64:	d0ce      	beq.n	1000ab04 <ble_resolv_rand_addr_handler+0x38>
1000ab66:	4a13      	ldr	r2, [pc, #76]	; (1000abb4 <ble_resolv_rand_addr_handler+0xe8>)
1000ab68:	2301      	movs	r3, #1
1000ab6a:	e7c5      	b.n	1000aaf8 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ab6c:	480c      	ldr	r0, [pc, #48]	; (1000aba0 <ble_resolv_rand_addr_handler+0xd4>)
1000ab6e:	0163      	lsls	r3, r4, #5
1000ab70:	1b1a      	subs	r2, r3, r4
1000ab72:	0092      	lsls	r2, r2, #2
1000ab74:	1882      	adds	r2, r0, r2
1000ab76:	0011      	movs	r1, r2
1000ab78:	315e      	adds	r1, #94	; 0x5e
1000ab7a:	2502      	movs	r5, #2
1000ab7c:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ab7e:	210a      	movs	r1, #10
1000ab80:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ab82:	0010      	movs	r0, r2
1000ab84:	2212      	movs	r2, #18
1000ab86:	4907      	ldr	r1, [pc, #28]	; (1000aba4 <ble_resolv_rand_addr_handler+0xd8>)
1000ab88:	4b07      	ldr	r3, [pc, #28]	; (1000aba8 <ble_resolv_rand_addr_handler+0xdc>)
1000ab8a:	4798      	blx	r3
1000ab8c:	e7e1      	b.n	1000ab52 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000ab8e:	2000      	movs	r0, #0
1000ab90:	bc04      	pop	{r2}
1000ab92:	4690      	mov	r8, r2
1000ab94:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab96:	46c0      	nop			; (mov r8, r8)
1000ab98:	10013f4a 	.word	0x10013f4a
1000ab9c:	10010339 	.word	0x10010339
1000aba0:	10013f04 	.word	0x10013f04
1000aba4:	100141b0 	.word	0x100141b0
1000aba8:	10010357 	.word	0x10010357
1000abac:	10014170 	.word	0x10014170
1000abb0:	1000a85d 	.word	0x1000a85d
1000abb4:	10013fde 	.word	0x10013fde

1000abb8 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000abba:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000abbc:	283b      	cmp	r0, #59	; 0x3b
1000abbe:	d872      	bhi.n	1000aca6 <ble_event_manager+0xee>
1000abc0:	0083      	lsls	r3, r0, #2
1000abc2:	4a3c      	ldr	r2, [pc, #240]	; (1000acb4 <ble_event_manager+0xfc>)
1000abc4:	58d3      	ldr	r3, [r2, r3]
1000abc6:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abc8:	0084      	lsls	r4, r0, #2
1000abca:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000abcc:	4f3a      	ldr	r7, [pc, #232]	; (1000acb8 <ble_event_manager+0x100>)
1000abce:	59bb      	ldr	r3, [r7, r6]
1000abd0:	2b00      	cmp	r3, #0
1000abd2:	d004      	beq.n	1000abde <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abd4:	591b      	ldr	r3, [r3, r4]
1000abd6:	2b00      	cmp	r3, #0
1000abd8:	d001      	beq.n	1000abde <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000abda:	0028      	movs	r0, r5
1000abdc:	4798      	blx	r3
1000abde:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000abe0:	2e14      	cmp	r6, #20
1000abe2:	d1f4      	bne.n	1000abce <ble_event_manager+0x16>
1000abe4:	e065      	b.n	1000acb2 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abe6:	3813      	subs	r0, #19
1000abe8:	b2c4      	uxtb	r4, r0
1000abea:	00a4      	lsls	r4, r4, #2
1000abec:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000abee:	4f33      	ldr	r7, [pc, #204]	; (1000acbc <ble_event_manager+0x104>)
1000abf0:	59bb      	ldr	r3, [r7, r6]
1000abf2:	2b00      	cmp	r3, #0
1000abf4:	d004      	beq.n	1000ac00 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000abf6:	591b      	ldr	r3, [r3, r4]
1000abf8:	2b00      	cmp	r3, #0
1000abfa:	d001      	beq.n	1000ac00 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000abfc:	0028      	movs	r0, r5
1000abfe:	4798      	blx	r3
1000ac00:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000ac02:	2e14      	cmp	r6, #20
1000ac04:	d1f4      	bne.n	1000abf0 <ble_event_manager+0x38>
1000ac06:	e054      	b.n	1000acb2 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac08:	381d      	subs	r0, #29
1000ac0a:	b2c4      	uxtb	r4, r0
1000ac0c:	00a4      	lsls	r4, r4, #2
1000ac0e:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ac10:	4f2b      	ldr	r7, [pc, #172]	; (1000acc0 <ble_event_manager+0x108>)
1000ac12:	59bb      	ldr	r3, [r7, r6]
1000ac14:	2b00      	cmp	r3, #0
1000ac16:	d004      	beq.n	1000ac22 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac18:	591b      	ldr	r3, [r3, r4]
1000ac1a:	2b00      	cmp	r3, #0
1000ac1c:	d001      	beq.n	1000ac22 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000ac1e:	0028      	movs	r0, r5
1000ac20:	4798      	blx	r3
1000ac22:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ac24:	2e14      	cmp	r6, #20
1000ac26:	d1f4      	bne.n	1000ac12 <ble_event_manager+0x5a>
1000ac28:	e043      	b.n	1000acb2 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000ac2a:	3827      	subs	r0, #39	; 0x27
1000ac2c:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000ac2e:	4b25      	ldr	r3, [pc, #148]	; (1000acc4 <ble_event_manager+0x10c>)
1000ac30:	681b      	ldr	r3, [r3, #0]
1000ac32:	2b00      	cmp	r3, #0
1000ac34:	d03d      	beq.n	1000acb2 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac36:	0080      	lsls	r0, r0, #2
1000ac38:	58c3      	ldr	r3, [r0, r3]
1000ac3a:	2b00      	cmp	r3, #0
1000ac3c:	d039      	beq.n	1000acb2 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac3e:	0008      	movs	r0, r1
1000ac40:	4798      	blx	r3
1000ac42:	e036      	b.n	1000acb2 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000ac44:	382d      	subs	r0, #45	; 0x2d
1000ac46:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000ac48:	4b1f      	ldr	r3, [pc, #124]	; (1000acc8 <ble_event_manager+0x110>)
1000ac4a:	681b      	ldr	r3, [r3, #0]
1000ac4c:	2b00      	cmp	r3, #0
1000ac4e:	d030      	beq.n	1000acb2 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac50:	0080      	lsls	r0, r0, #2
1000ac52:	58c3      	ldr	r3, [r0, r3]
1000ac54:	2b00      	cmp	r3, #0
1000ac56:	d02c      	beq.n	1000acb2 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac58:	0008      	movs	r0, r1
1000ac5a:	4798      	blx	r3
1000ac5c:	e029      	b.n	1000acb2 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac5e:	3836      	subs	r0, #54	; 0x36
1000ac60:	b2c4      	uxtb	r4, r0
1000ac62:	00a4      	lsls	r4, r4, #2
1000ac64:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000ac66:	4f19      	ldr	r7, [pc, #100]	; (1000accc <ble_event_manager+0x114>)
1000ac68:	59bb      	ldr	r3, [r7, r6]
1000ac6a:	2b00      	cmp	r3, #0
1000ac6c:	d004      	beq.n	1000ac78 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac6e:	591b      	ldr	r3, [r3, r4]
1000ac70:	2b00      	cmp	r3, #0
1000ac72:	d001      	beq.n	1000ac78 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000ac74:	0028      	movs	r0, r5
1000ac76:	4798      	blx	r3
1000ac78:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000ac7a:	2e14      	cmp	r6, #20
1000ac7c:	d1f4      	bne.n	1000ac68 <ble_event_manager+0xb0>
1000ac7e:	e018      	b.n	1000acb2 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000ac80:	3838      	subs	r0, #56	; 0x38
1000ac82:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000ac84:	4b12      	ldr	r3, [pc, #72]	; (1000acd0 <ble_event_manager+0x118>)
1000ac86:	681b      	ldr	r3, [r3, #0]
1000ac88:	2b00      	cmp	r3, #0
1000ac8a:	d012      	beq.n	1000acb2 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ac8c:	0080      	lsls	r0, r0, #2
1000ac8e:	58c3      	ldr	r3, [r0, r3]
1000ac90:	2b00      	cmp	r3, #0
1000ac92:	d00e      	beq.n	1000acb2 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000ac94:	0008      	movs	r0, r1
1000ac96:	4798      	blx	r3
1000ac98:	e00b      	b.n	1000acb2 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000ac9a:	4b0e      	ldr	r3, [pc, #56]	; (1000acd4 <ble_event_manager+0x11c>)
1000ac9c:	681b      	ldr	r3, [r3, #0]
1000ac9e:	2b00      	cmp	r3, #0
1000aca0:	d007      	beq.n	1000acb2 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000aca2:	4798      	blx	r3
1000aca4:	e005      	b.n	1000acb2 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000aca6:	4d0c      	ldr	r5, [pc, #48]	; (1000acd8 <ble_event_manager+0x120>)
1000aca8:	0028      	movs	r0, r5
1000acaa:	4c0c      	ldr	r4, [pc, #48]	; (1000acdc <ble_event_manager+0x124>)
1000acac:	47a0      	blx	r4
1000acae:	0028      	movs	r0, r5
1000acb0:	47a0      	blx	r4
	}
	break;		
	}
}
1000acb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000acb4:	100117a0 	.word	0x100117a0
1000acb8:	10014188 	.word	0x10014188
1000acbc:	1001419c 	.word	0x1001419c
1000acc0:	10013ef0 	.word	0x10013ef0
1000acc4:	100141e4 	.word	0x100141e4
1000acc8:	10013eec 	.word	0x10013eec
1000accc:	10014174 	.word	0x10014174
1000acd0:	10014728 	.word	0x10014728
1000acd4:	10012ce4 	.word	0x10012ce4
1000acd8:	100118d4 	.word	0x100118d4
1000acdc:	10010499 	.word	0x10010499

1000ace0 <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000ace0:	b510      	push	{r4, lr}
1000ace2:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000ace4:	4906      	ldr	r1, [pc, #24]	; (1000ad00 <ble_event_task+0x20>)
1000ace6:	4807      	ldr	r0, [pc, #28]	; (1000ad04 <ble_event_task+0x24>)
1000ace8:	4b07      	ldr	r3, [pc, #28]	; (1000ad08 <ble_event_task+0x28>)
1000acea:	4798      	blx	r3
1000acec:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000acee:	d104      	bne.n	1000acfa <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000acf0:	4b04      	ldr	r3, [pc, #16]	; (1000ad04 <ble_event_task+0x24>)
1000acf2:	7818      	ldrb	r0, [r3, #0]
1000acf4:	4902      	ldr	r1, [pc, #8]	; (1000ad00 <ble_event_task+0x20>)
1000acf6:	4b05      	ldr	r3, [pc, #20]	; (1000ad0c <ble_event_task+0x2c>)
1000acf8:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000acfa:	0020      	movs	r0, r4
1000acfc:	bd10      	pop	{r4, pc}
1000acfe:	46c0      	nop			; (mov r8, r8)
1000ad00:	1001451c 	.word	0x1001451c
1000ad04:	100141e0 	.word	0x100141e0
1000ad08:	1000be1d 	.word	0x1000be1d
1000ad0c:	1000abb9 	.word	0x1000abb9

1000ad10 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000ad10:	b570      	push	{r4, r5, r6, lr}
1000ad12:	b090      	sub	sp, #64	; 0x40
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000ad14:	ac08      	add	r4, sp, #32
1000ad16:	230a      	movs	r3, #10
1000ad18:	7023      	strb	r3, [r4, #0]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000ad1a:	2609      	movs	r6, #9
1000ad1c:	7066      	strb	r6, [r4, #1]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000ad1e:	2209      	movs	r2, #9
1000ad20:	4911      	ldr	r1, [pc, #68]	; (1000ad68 <ble_advertisement_data_set+0x58>)
1000ad22:	2022      	movs	r0, #34	; 0x22
1000ad24:	4468      	add	r0, sp
1000ad26:	4d11      	ldr	r5, [pc, #68]	; (1000ad6c <ble_advertisement_data_set+0x5c>)
1000ad28:	47a8      	blx	r5
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000ad2a:	2300      	movs	r3, #0
1000ad2c:	466a      	mov	r2, sp
1000ad2e:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000ad30:	3315      	adds	r3, #21
1000ad32:	7053      	strb	r3, [r2, #1]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000ad34:	72e6      	strb	r6, [r4, #11]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000ad36:	33ea      	adds	r3, #234	; 0xea
1000ad38:	7323      	strb	r3, [r4, #12]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000ad3a:	2208      	movs	r2, #8
1000ad3c:	490c      	ldr	r1, [pc, #48]	; (1000ad70 <ble_advertisement_data_set+0x60>)
1000ad3e:	3110      	adds	r1, #16
1000ad40:	202d      	movs	r0, #45	; 0x2d
1000ad42:	4468      	add	r0, sp
1000ad44:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000ad46:	2300      	movs	r3, #0
1000ad48:	466a      	mov	r2, sp
1000ad4a:	2115      	movs	r1, #21
1000ad4c:	0020      	movs	r0, r4
1000ad4e:	4c09      	ldr	r4, [pc, #36]	; (1000ad74 <ble_advertisement_data_set+0x64>)
1000ad50:	47a0      	blx	r4
1000ad52:	2800      	cmp	r0, #0
1000ad54:	d005      	beq.n	1000ad62 <ble_advertisement_data_set+0x52>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000ad56:	4808      	ldr	r0, [pc, #32]	; (1000ad78 <ble_advertisement_data_set+0x68>)
1000ad58:	4b08      	ldr	r3, [pc, #32]	; (1000ad7c <ble_advertisement_data_set+0x6c>)
1000ad5a:	4798      	blx	r3
1000ad5c:	4808      	ldr	r0, [pc, #32]	; (1000ad80 <ble_advertisement_data_set+0x70>)
1000ad5e:	4b09      	ldr	r3, [pc, #36]	; (1000ad84 <ble_advertisement_data_set+0x74>)
1000ad60:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000ad62:	2000      	movs	r0, #0
1000ad64:	b010      	add	sp, #64	; 0x40
1000ad66:	bd70      	pop	{r4, r5, r6, pc}
1000ad68:	10011cf0 	.word	0x10011cf0
1000ad6c:	10010357 	.word	0x10010357
1000ad70:	10011890 	.word	0x10011890
1000ad74:	1000c87d 	.word	0x1000c87d
1000ad78:	100118d4 	.word	0x100118d4
1000ad7c:	10010499 	.word	0x10010499
1000ad80:	10011ec8 	.word	0x10011ec8
1000ad84:	10010379 	.word	0x10010379

1000ad88 <dualtimer_callback2>:
extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
	//puts("Timer2 trigger\r\n");
}
1000ad88:	4770      	bx	lr
1000ad8a:	46c0      	nop			; (mov r8, r8)

1000ad8c <hw_timer_init>:

void hw_timer_init(void)
{
1000ad8c:	b500      	push	{lr}
1000ad8e:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000ad90:	a801      	add	r0, sp, #4
1000ad92:	4b05      	ldr	r3, [pc, #20]	; (1000ada8 <hw_timer_init+0x1c>)
1000ad94:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000ad96:	4b05      	ldr	r3, [pc, #20]	; (1000adac <hw_timer_init+0x20>)
1000ad98:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000ad9a:	4b05      	ldr	r3, [pc, #20]	; (1000adb0 <hw_timer_init+0x24>)
1000ad9c:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000ad9e:	a801      	add	r0, sp, #4
1000ada0:	4b04      	ldr	r3, [pc, #16]	; (1000adb4 <hw_timer_init+0x28>)
1000ada2:	4798      	blx	r3
}
1000ada4:	b009      	add	sp, #36	; 0x24
1000ada6:	bd00      	pop	{pc}
1000ada8:	100088d1 	.word	0x100088d1
1000adac:	018cba80 	.word	0x018cba80
1000adb0:	03197500 	.word	0x03197500
1000adb4:	10008965 	.word	0x10008965

1000adb8 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000adb8:	b510      	push	{r4, lr}
1000adba:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000adbc:	2000      	movs	r0, #0
1000adbe:	4c07      	ldr	r4, [pc, #28]	; (1000addc <hw_timer_register_callback+0x24>)
1000adc0:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000adc2:	4907      	ldr	r1, [pc, #28]	; (1000ade0 <hw_timer_register_callback+0x28>)
1000adc4:	2001      	movs	r0, #1
1000adc6:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000adc8:	2000      	movs	r0, #0
1000adca:	4c06      	ldr	r4, [pc, #24]	; (1000ade4 <hw_timer_register_callback+0x2c>)
1000adcc:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000adce:	2001      	movs	r0, #1
1000add0:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000add2:	2280      	movs	r2, #128	; 0x80
1000add4:	01d2      	lsls	r2, r2, #7
1000add6:	4b04      	ldr	r3, [pc, #16]	; (1000ade8 <hw_timer_register_callback+0x30>)
1000add8:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000adda:	bd10      	pop	{r4, pc}
1000addc:	10008a69 	.word	0x10008a69
1000ade0:	1000ad89 	.word	0x1000ad89
1000ade4:	10008941 	.word	0x10008941
1000ade8:	e000e100 	.word	0xe000e100

1000adec <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000adec:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000adee:	2800      	cmp	r0, #0
1000adf0:	d100      	bne.n	1000adf4 <hw_timer_start+0x8>
		delay = 1;
1000adf2:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000adf4:	4b05      	ldr	r3, [pc, #20]	; (1000ae0c <hw_timer_start+0x20>)
1000adf6:	4343      	muls	r3, r0
1000adf8:	001a      	movs	r2, r3
1000adfa:	2100      	movs	r1, #0
1000adfc:	2000      	movs	r0, #0
1000adfe:	4b04      	ldr	r3, [pc, #16]	; (1000ae10 <hw_timer_start+0x24>)
1000ae00:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000ae02:	2000      	movs	r0, #0
1000ae04:	4b03      	ldr	r3, [pc, #12]	; (1000ae14 <hw_timer_start+0x28>)
1000ae06:	4798      	blx	r3
}
1000ae08:	bd10      	pop	{r4, pc}
1000ae0a:	46c0      	nop			; (mov r8, r8)
1000ae0c:	018cba80 	.word	0x018cba80
1000ae10:	100088f5 	.word	0x100088f5
1000ae14:	1000891d 	.word	0x1000891d

1000ae18 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000ae18:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000ae1a:	2000      	movs	r0, #0
1000ae1c:	4b01      	ldr	r3, [pc, #4]	; (1000ae24 <hw_timer_stop+0xc>)
1000ae1e:	4798      	blx	r3
}
1000ae20:	bd10      	pop	{r4, pc}
1000ae22:	46c0      	nop			; (mov r8, r8)
1000ae24:	10008941 	.word	0x10008941

1000ae28 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ae28:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ae2a:	4b0e      	ldr	r3, [pc, #56]	; (1000ae64 <uart_read_complete_callback+0x3c>)
1000ae2c:	781b      	ldrb	r3, [r3, #0]
1000ae2e:	2b01      	cmp	r3, #1
1000ae30:	d10b      	bne.n	1000ae4a <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ae32:	2202      	movs	r2, #2
1000ae34:	4b0b      	ldr	r3, [pc, #44]	; (1000ae64 <uart_read_complete_callback+0x3c>)
1000ae36:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ae38:	4b0b      	ldr	r3, [pc, #44]	; (1000ae68 <uart_read_complete_callback+0x40>)
1000ae3a:	681b      	ldr	r3, [r3, #0]
1000ae3c:	2b00      	cmp	r3, #0
1000ae3e:	d110      	bne.n	1000ae62 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ae40:	2102      	movs	r1, #2
1000ae42:	480a      	ldr	r0, [pc, #40]	; (1000ae6c <uart_read_complete_callback+0x44>)
1000ae44:	4b0a      	ldr	r3, [pc, #40]	; (1000ae70 <uart_read_complete_callback+0x48>)
1000ae46:	4798      	blx	r3
1000ae48:	e00b      	b.n	1000ae62 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ae4a:	4b07      	ldr	r3, [pc, #28]	; (1000ae68 <uart_read_complete_callback+0x40>)
1000ae4c:	681b      	ldr	r3, [r3, #0]
1000ae4e:	2b00      	cmp	r3, #0
1000ae50:	d007      	beq.n	1000ae62 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ae52:	4c08      	ldr	r4, [pc, #32]	; (1000ae74 <uart_read_complete_callback+0x4c>)
1000ae54:	7820      	ldrb	r0, [r4, #0]
1000ae56:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ae58:	2201      	movs	r2, #1
1000ae5a:	0021      	movs	r1, r4
1000ae5c:	4803      	ldr	r0, [pc, #12]	; (1000ae6c <uart_read_complete_callback+0x44>)
1000ae5e:	4b06      	ldr	r3, [pc, #24]	; (1000ae78 <uart_read_complete_callback+0x50>)
1000ae60:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ae62:	bd10      	pop	{r4, pc}
1000ae64:	10013cf8 	.word	0x10013cf8
1000ae68:	10013d00 	.word	0x10013d00
1000ae6c:	1001472c 	.word	0x1001472c
1000ae70:	10009a89 	.word	0x10009a89
1000ae74:	10013cfc 	.word	0x10013cfc
1000ae78:	10009a2d 	.word	0x10009a2d

1000ae7c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ae7c:	b570      	push	{r4, r5, r6, lr}
1000ae7e:	0006      	movs	r6, r0
1000ae80:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ae82:	4c03      	ldr	r4, [pc, #12]	; (1000ae90 <usart_serial_getchar+0x14>)
1000ae84:	0029      	movs	r1, r5
1000ae86:	0030      	movs	r0, r6
1000ae88:	47a0      	blx	r4
1000ae8a:	2800      	cmp	r0, #0
1000ae8c:	d1fa      	bne.n	1000ae84 <usart_serial_getchar+0x8>
}
1000ae8e:	bd70      	pop	{r4, r5, r6, pc}
1000ae90:	10009a19 	.word	0x10009a19

1000ae94 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ae94:	b570      	push	{r4, r5, r6, lr}
1000ae96:	0006      	movs	r6, r0
1000ae98:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ae9a:	4c03      	ldr	r4, [pc, #12]	; (1000aea8 <usart_serial_putchar+0x14>)
1000ae9c:	0029      	movs	r1, r5
1000ae9e:	0030      	movs	r0, r6
1000aea0:	47a0      	blx	r4
1000aea2:	2800      	cmp	r0, #0
1000aea4:	d1fa      	bne.n	1000ae9c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000aea6:	bd70      	pop	{r4, r5, r6, pc}
1000aea8:	10009a09 	.word	0x10009a09

1000aeac <serial_console_init>:

void serial_console_init(void)
{
1000aeac:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000aeae:	2100      	movs	r1, #0
1000aeb0:	2000      	movs	r0, #0
1000aeb2:	4b19      	ldr	r3, [pc, #100]	; (1000af18 <serial_console_init+0x6c>)
1000aeb4:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000aeb6:	4c19      	ldr	r4, [pc, #100]	; (1000af1c <serial_console_init+0x70>)
1000aeb8:	0020      	movs	r0, r4
1000aeba:	4b19      	ldr	r3, [pc, #100]	; (1000af20 <serial_console_init+0x74>)
1000aebc:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000aebe:	23e1      	movs	r3, #225	; 0xe1
1000aec0:	025b      	lsls	r3, r3, #9
1000aec2:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000aec4:	2302      	movs	r3, #2
1000aec6:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000aec8:	2203      	movs	r2, #3
1000aeca:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000aecc:	3201      	adds	r2, #1
1000aece:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000aed0:	3201      	adds	r2, #1
1000aed2:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000aed4:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000aed6:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000aed8:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000aeda:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000aedc:	4d11      	ldr	r5, [pc, #68]	; (1000af24 <serial_console_init+0x78>)
1000aede:	4b12      	ldr	r3, [pc, #72]	; (1000af28 <serial_console_init+0x7c>)
1000aee0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000aee2:	4a12      	ldr	r2, [pc, #72]	; (1000af2c <serial_console_init+0x80>)
1000aee4:	4b12      	ldr	r3, [pc, #72]	; (1000af30 <serial_console_init+0x84>)
1000aee6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000aee8:	4a12      	ldr	r2, [pc, #72]	; (1000af34 <serial_console_init+0x88>)
1000aeea:	4b13      	ldr	r3, [pc, #76]	; (1000af38 <serial_console_init+0x8c>)
1000aeec:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000aeee:	0022      	movs	r2, r4
1000aef0:	4912      	ldr	r1, [pc, #72]	; (1000af3c <serial_console_init+0x90>)
1000aef2:	0028      	movs	r0, r5
1000aef4:	4b12      	ldr	r3, [pc, #72]	; (1000af40 <serial_console_init+0x94>)
1000aef6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000aef8:	4e12      	ldr	r6, [pc, #72]	; (1000af44 <serial_console_init+0x98>)
1000aefa:	6833      	ldr	r3, [r6, #0]
1000aefc:	6898      	ldr	r0, [r3, #8]
1000aefe:	2100      	movs	r1, #0
1000af00:	4c11      	ldr	r4, [pc, #68]	; (1000af48 <serial_console_init+0x9c>)
1000af02:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000af04:	6833      	ldr	r3, [r6, #0]
1000af06:	6858      	ldr	r0, [r3, #4]
1000af08:	2100      	movs	r1, #0
1000af0a:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000af0c:	2202      	movs	r2, #2
1000af0e:	490f      	ldr	r1, [pc, #60]	; (1000af4c <serial_console_init+0xa0>)
1000af10:	0028      	movs	r0, r5
1000af12:	4b0f      	ldr	r3, [pc, #60]	; (1000af50 <serial_console_init+0xa4>)
1000af14:	4798      	blx	r3
}
1000af16:	bd70      	pop	{r4, r5, r6, pc}
1000af18:	10008d95 	.word	0x10008d95
1000af1c:	10014750 	.word	0x10014750
1000af20:	10009821 	.word	0x10009821
1000af24:	1001472c 	.word	0x1001472c
1000af28:	10013ee8 	.word	0x10013ee8
1000af2c:	1000ae95 	.word	0x1000ae95
1000af30:	10013ee4 	.word	0x10013ee4
1000af34:	1000ae7d 	.word	0x1000ae7d
1000af38:	10013ee0 	.word	0x10013ee0
1000af3c:	40004000 	.word	0x40004000
1000af40:	1000984d 	.word	0x1000984d
1000af44:	100123cc 	.word	0x100123cc
1000af48:	10010525 	.word	0x10010525
1000af4c:	1000ae29 	.word	0x1000ae29
1000af50:	10009a55 	.word	0x10009a55

1000af54 <_time_start>:

void _time_start(unsigned int sec)
{
1000af54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af56:	b083      	sub	sp, #12
1000af58:	0005      	movs	r5, r0
	system_clock_get_value();
1000af5a:	4c0d      	ldr	r4, [pc, #52]	; (1000af90 <_time_start+0x3c>)
1000af5c:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000af5e:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000af60:	4f0c      	ldr	r7, [pc, #48]	; (1000af94 <_time_start+0x40>)
1000af62:	47b8      	blx	r7
1000af64:	4e0c      	ldr	r6, [pc, #48]	; (1000af98 <_time_start+0x44>)
1000af66:	4a0d      	ldr	r2, [pc, #52]	; (1000af9c <_time_start+0x48>)
1000af68:	4b0d      	ldr	r3, [pc, #52]	; (1000afa0 <_time_start+0x4c>)
1000af6a:	47b0      	blx	r6
1000af6c:	9000      	str	r0, [sp, #0]
1000af6e:	9101      	str	r1, [sp, #4]
1000af70:	20fa      	movs	r0, #250	; 0xfa
1000af72:	0080      	lsls	r0, r0, #2
1000af74:	4368      	muls	r0, r5
1000af76:	47b8      	blx	r7
1000af78:	0002      	movs	r2, r0
1000af7a:	000b      	movs	r3, r1
1000af7c:	9800      	ldr	r0, [sp, #0]
1000af7e:	9901      	ldr	r1, [sp, #4]
1000af80:	47b0      	blx	r6
1000af82:	4b08      	ldr	r3, [pc, #32]	; (1000afa4 <_time_start+0x50>)
1000af84:	4798      	blx	r3
1000af86:	4b08      	ldr	r3, [pc, #32]	; (1000afa8 <_time_start+0x54>)
1000af88:	6018      	str	r0, [r3, #0]
}
1000af8a:	b003      	add	sp, #12
1000af8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000af8e:	46c0      	nop			; (mov r8, r8)
1000af90:	10008e19 	.word	0x10008e19
1000af94:	1000fdd5 	.word	0x1000fdd5
1000af98:	1000f1cd 	.word	0x1000f1cd
1000af9c:	19feaec7 	.word	0x19feaec7
1000afa0:	3f09d8ef 	.word	0x3f09d8ef
1000afa4:	1000ec19 	.word	0x1000ec19
1000afa8:	10013cf4 	.word	0x10013cf4

1000afac <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000afac:	4b02      	ldr	r3, [pc, #8]	; (1000afb8 <_time_done+0xc>)
1000afae:	681a      	ldr	r2, [r3, #0]
1000afb0:	1e50      	subs	r0, r2, #1
1000afb2:	6018      	str	r0, [r3, #0]
}
1000afb4:	4770      	bx	lr
1000afb6:	46c0      	nop			; (mov r8, r8)
1000afb8:	10013cf4 	.word	0x10013cf4

1000afbc <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000afbc:	b570      	push	{r4, r5, r6, lr}
1000afbe:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000afc0:	2201      	movs	r2, #1
1000afc2:	4b11      	ldr	r3, [pc, #68]	; (1000b008 <getchar_b11_timeout+0x4c>)
1000afc4:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000afc6:	4b11      	ldr	r3, [pc, #68]	; (1000b00c <getchar_b11_timeout+0x50>)
1000afc8:	681b      	ldr	r3, [r3, #0]
1000afca:	2b00      	cmp	r3, #0
1000afcc:	d103      	bne.n	1000afd6 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000afce:	2102      	movs	r1, #2
1000afd0:	480f      	ldr	r0, [pc, #60]	; (1000b010 <getchar_b11_timeout+0x54>)
1000afd2:	4b10      	ldr	r3, [pc, #64]	; (1000b014 <getchar_b11_timeout+0x58>)
1000afd4:	4798      	blx	r3

	_time_start(sec);
1000afd6:	0020      	movs	r0, r4
1000afd8:	4b0f      	ldr	r3, [pc, #60]	; (1000b018 <getchar_b11_timeout+0x5c>)
1000afda:	4798      	blx	r3
	
	string_input[0] = 0;
1000afdc:	490f      	ldr	r1, [pc, #60]	; (1000b01c <getchar_b11_timeout+0x60>)
1000afde:	2300      	movs	r3, #0
1000afe0:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000afe2:	2201      	movs	r2, #1
1000afe4:	480a      	ldr	r0, [pc, #40]	; (1000b010 <getchar_b11_timeout+0x54>)
1000afe6:	4b0e      	ldr	r3, [pc, #56]	; (1000b020 <getchar_b11_timeout+0x64>)
1000afe8:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000afea:	4c07      	ldr	r4, [pc, #28]	; (1000b008 <getchar_b11_timeout+0x4c>)
1000afec:	4d0d      	ldr	r5, [pc, #52]	; (1000b024 <getchar_b11_timeout+0x68>)
1000afee:	7823      	ldrb	r3, [r4, #0]
1000aff0:	2b02      	cmp	r3, #2
1000aff2:	d002      	beq.n	1000affa <getchar_b11_timeout+0x3e>
1000aff4:	47a8      	blx	r5
1000aff6:	2800      	cmp	r0, #0
1000aff8:	d1f9      	bne.n	1000afee <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000affa:	2200      	movs	r2, #0
1000affc:	4b02      	ldr	r3, [pc, #8]	; (1000b008 <getchar_b11_timeout+0x4c>)
1000affe:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000b000:	4b06      	ldr	r3, [pc, #24]	; (1000b01c <getchar_b11_timeout+0x60>)
1000b002:	7818      	ldrb	r0, [r3, #0]
}
1000b004:	bd70      	pop	{r4, r5, r6, pc}
1000b006:	46c0      	nop			; (mov r8, r8)
1000b008:	10013cf8 	.word	0x10013cf8
1000b00c:	10013d00 	.word	0x10013d00
1000b010:	1001472c 	.word	0x1001472c
1000b014:	10009a69 	.word	0x10009a69
1000b018:	1000af55 	.word	0x1000af55
1000b01c:	10013cfc 	.word	0x10013cfc
1000b020:	10009a2d 	.word	0x10009a2d
1000b024:	1000afad 	.word	0x1000afad

1000b028 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000b028:	4b02      	ldr	r3, [pc, #8]	; (1000b034 <platform_event_free+0xc>)
1000b02a:	681a      	ldr	r2, [r3, #0]
1000b02c:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000b02e:	6018      	str	r0, [r3, #0]
}
1000b030:	4770      	bx	lr
1000b032:	46c0      	nop			; (mov r8, r8)
1000b034:	10013d08 	.word	0x10013d08

1000b038 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000b038:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000b03a:	4b0b      	ldr	r3, [pc, #44]	; (1000b068 <platform_event_post+0x30>)
1000b03c:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000b03e:	2c00      	cmp	r4, #0
1000b040:	d011      	beq.n	1000b066 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000b042:	6825      	ldr	r5, [r4, #0]
1000b044:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000b046:	2300      	movs	r3, #0
1000b048:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000b04a:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000b04c:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000b04e:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000b050:	4b06      	ldr	r3, [pc, #24]	; (1000b06c <platform_event_post+0x34>)
1000b052:	681a      	ldr	r2, [r3, #0]
1000b054:	2a00      	cmp	r2, #0
1000b056:	d102      	bne.n	1000b05e <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000b058:	601c      	str	r4, [r3, #0]
1000b05a:	e004      	b.n	1000b066 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000b05c:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000b05e:	6813      	ldr	r3, [r2, #0]
1000b060:	2b00      	cmp	r3, #0
1000b062:	d1fb      	bne.n	1000b05c <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000b064:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000b066:	bd30      	pop	{r4, r5, pc}
1000b068:	10013d08 	.word	0x10013d08
1000b06c:	10013d04 	.word	0x10013d04

1000b070 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000b070:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000b072:	2300      	movs	r3, #0
1000b074:	4a06      	ldr	r2, [pc, #24]	; (1000b090 <platform_event_init+0x20>)
1000b076:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000b078:	4a06      	ldr	r2, [pc, #24]	; (1000b094 <platform_event_init+0x24>)
1000b07a:	6013      	str	r3, [r2, #0]
1000b07c:	4c06      	ldr	r4, [pc, #24]	; (1000b098 <platform_event_init+0x28>)
1000b07e:	0026      	movs	r6, r4
1000b080:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000b082:	4d06      	ldr	r5, [pc, #24]	; (1000b09c <platform_event_init+0x2c>)
1000b084:	0020      	movs	r0, r4
1000b086:	47a8      	blx	r5
1000b088:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000b08a:	42b4      	cmp	r4, r6
1000b08c:	d1fa      	bne.n	1000b084 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000b08e:	bd70      	pop	{r4, r5, r6, pc}
1000b090:	10013d08 	.word	0x10013d08
1000b094:	10013d04 	.word	0x10013d04
1000b098:	10013d0c 	.word	0x10013d0c
1000b09c:	1000b029 	.word	0x1000b029

1000b0a0 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000b0a0:	b570      	push	{r4, r5, r6, lr}
1000b0a2:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000b0a4:	4b13      	ldr	r3, [pc, #76]	; (1000b0f4 <at_ke_msg_send+0x54>)
1000b0a6:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000b0a8:	4b13      	ldr	r3, [pc, #76]	; (1000b0f8 <at_ke_msg_send+0x58>)
1000b0aa:	681b      	ldr	r3, [r3, #0]
1000b0ac:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000b0ae:	2c0c      	cmp	r4, #12
1000b0b0:	d01f      	beq.n	1000b0f2 <at_ke_msg_send+0x52>
1000b0b2:	3c0c      	subs	r4, #12
1000b0b4:	88e3      	ldrh	r3, [r4, #6]
1000b0b6:	2b05      	cmp	r3, #5
1000b0b8:	d01b      	beq.n	1000b0f2 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000b0ba:	07eb      	lsls	r3, r5, #31
1000b0bc:	d414      	bmi.n	1000b0e8 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000b0be:	4b0f      	ldr	r3, [pc, #60]	; (1000b0fc <at_ke_msg_send+0x5c>)
1000b0c0:	681b      	ldr	r3, [r3, #0]
1000b0c2:	2002      	movs	r0, #2
1000b0c4:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000b0c6:	4b0e      	ldr	r3, [pc, #56]	; (1000b100 <at_ke_msg_send+0x60>)
1000b0c8:	681b      	ldr	r3, [r3, #0]
1000b0ca:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000b0cc:	4c0d      	ldr	r4, [pc, #52]	; (1000b104 <at_ke_msg_send+0x64>)
1000b0ce:	2003      	movs	r0, #3
1000b0d0:	6823      	ldr	r3, [r4, #0]
1000b0d2:	4798      	blx	r3
1000b0d4:	2800      	cmp	r0, #0
1000b0d6:	d1fa      	bne.n	1000b0ce <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000b0d8:	4b0b      	ldr	r3, [pc, #44]	; (1000b108 <at_ke_msg_send+0x68>)
1000b0da:	681b      	ldr	r3, [r3, #0]
1000b0dc:	3002      	adds	r0, #2
1000b0de:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000b0e0:	2201      	movs	r2, #1
1000b0e2:	4b0a      	ldr	r3, [pc, #40]	; (1000b10c <at_ke_msg_send+0x6c>)
1000b0e4:	601a      	str	r2, [r3, #0]
1000b0e6:	e004      	b.n	1000b0f2 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000b0e8:	4b09      	ldr	r3, [pc, #36]	; (1000b110 <at_ke_msg_send+0x70>)
1000b0ea:	6818      	ldr	r0, [r3, #0]
1000b0ec:	4b09      	ldr	r3, [pc, #36]	; (1000b114 <at_ke_msg_send+0x74>)
1000b0ee:	681b      	ldr	r3, [r3, #0]
1000b0f0:	4798      	blx	r3
		}
	}
}
1000b0f2:	bd70      	pop	{r4, r5, r6, pc}
1000b0f4:	4000b1ec 	.word	0x4000b1ec
1000b0f8:	10013db4 	.word	0x10013db4
1000b0fc:	10013dac 	.word	0x10013dac
1000b100:	10013dc0 	.word	0x10013dc0
1000b104:	10013d98 	.word	0x10013d98
1000b108:	10013da0 	.word	0x10013da0
1000b10c:	4000b020 	.word	0x4000b020
1000b110:	10013da4 	.word	0x10013da4
1000b114:	10013d94 	.word	0x10013d94

1000b118 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000b118:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000b11a:	4b06      	ldr	r3, [pc, #24]	; (1000b134 <samb11_plf_resume_callback+0x1c>)
1000b11c:	4a06      	ldr	r2, [pc, #24]	; (1000b138 <samb11_plf_resume_callback+0x20>)
1000b11e:	6819      	ldr	r1, [r3, #0]
1000b120:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000b122:	685a      	ldr	r2, [r3, #4]
1000b124:	4b05      	ldr	r3, [pc, #20]	; (1000b13c <samb11_plf_resume_callback+0x24>)
1000b126:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000b128:	4b05      	ldr	r3, [pc, #20]	; (1000b140 <samb11_plf_resume_callback+0x28>)
1000b12a:	681b      	ldr	r3, [r3, #0]
1000b12c:	2b00      	cmp	r3, #0
1000b12e:	d000      	beq.n	1000b132 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000b130:	4798      	blx	r3
	}
}
1000b132:	bd10      	pop	{r4, pc}
1000b134:	10014778 	.word	0x10014778
1000b138:	4000b00c 	.word	0x4000b00c
1000b13c:	4000b010 	.word	0x4000b010
1000b140:	10014a54 	.word	0x10014a54

1000b144 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000b144:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000b146:	2232      	movs	r2, #50	; 0x32
1000b148:	2100      	movs	r1, #0
1000b14a:	480d      	ldr	r0, [pc, #52]	; (1000b180 <init_port_list+0x3c>)
1000b14c:	4b0d      	ldr	r3, [pc, #52]	; (1000b184 <init_port_list+0x40>)
1000b14e:	4798      	blx	r3
1000b150:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b152:	480b      	ldr	r0, [pc, #44]	; (1000b180 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000b154:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000b156:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000b158:	004a      	lsls	r2, r1, #1
1000b15a:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000b15c:	1882      	adds	r2, r0, r2
1000b15e:	7853      	ldrb	r3, [r2, #1]
1000b160:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000b162:	b2db      	uxtb	r3, r3
1000b164:	43a3      	bics	r3, r4
1000b166:	7053      	strb	r3, [r2, #1]
1000b168:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000b16a:	2919      	cmp	r1, #25
1000b16c:	d1f4      	bne.n	1000b158 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000b16e:	4b04      	ldr	r3, [pc, #16]	; (1000b180 <init_port_list+0x3c>)
1000b170:	785a      	ldrb	r2, [r3, #1]
1000b172:	3918      	subs	r1, #24
1000b174:	438a      	bics	r2, r1
1000b176:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000b178:	78da      	ldrb	r2, [r3, #3]
1000b17a:	438a      	bics	r2, r1
1000b17c:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000b17e:	bd70      	pop	{r4, r5, r6, pc}
1000b180:	10014794 	.word	0x10014794
1000b184:	10010369 	.word	0x10010369

1000b188 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000b188:	4a06      	ldr	r2, [pc, #24]	; (1000b1a4 <init_clock+0x1c>)
1000b18a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000b18c:	4b06      	ldr	r3, [pc, #24]	; (1000b1a8 <init_clock+0x20>)
1000b18e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000b190:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000b192:	4a06      	ldr	r2, [pc, #24]	; (1000b1ac <init_clock+0x24>)
1000b194:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000b196:	4906      	ldr	r1, [pc, #24]	; (1000b1b0 <init_clock+0x28>)
1000b198:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000b19a:	4b06      	ldr	r3, [pc, #24]	; (1000b1b4 <init_clock+0x2c>)
1000b19c:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000b19e:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000b1a0:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000b1a2:	4770      	bx	lr
1000b1a4:	4000b00c 	.word	0x4000b00c
1000b1a8:	fffe0fd3 	.word	0xfffe0fd3
1000b1ac:	10014778 	.word	0x10014778
1000b1b0:	4000b010 	.word	0x4000b010
1000b1b4:	ffffe7c0 	.word	0xffffe7c0

1000b1b8 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000b1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b1ba:	4657      	mov	r7, sl
1000b1bc:	464e      	mov	r6, r9
1000b1be:	4645      	mov	r5, r8
1000b1c0:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000b1c2:	4b4f      	ldr	r3, [pc, #316]	; (1000b300 <platform_driver_init+0x148>)
1000b1c4:	781b      	ldrb	r3, [r3, #0]
1000b1c6:	2b00      	cmp	r3, #0
1000b1c8:	d004      	beq.n	1000b1d4 <platform_driver_init+0x1c>
1000b1ca:	4b4d      	ldr	r3, [pc, #308]	; (1000b300 <platform_driver_init+0x148>)
1000b1cc:	781b      	ldrb	r3, [r3, #0]
1000b1ce:	2b01      	cmp	r3, #1
1000b1d0:	d100      	bne.n	1000b1d4 <platform_driver_init+0x1c>
1000b1d2:	e08c      	b.n	1000b2ee <platform_driver_init+0x136>
		init_port_list();
1000b1d4:	4b4b      	ldr	r3, [pc, #300]	; (1000b304 <platform_driver_init+0x14c>)
1000b1d6:	4798      	blx	r3
		init_clock();
1000b1d8:	4b4b      	ldr	r3, [pc, #300]	; (1000b308 <platform_driver_init+0x150>)
1000b1da:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000b1dc:	2300      	movs	r3, #0
1000b1de:	4698      	mov	r8, r3
1000b1e0:	4b4a      	ldr	r3, [pc, #296]	; (1000b30c <platform_driver_init+0x154>)
1000b1e2:	4642      	mov	r2, r8
1000b1e4:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b1e6:	4c4a      	ldr	r4, [pc, #296]	; (1000b310 <platform_driver_init+0x158>)
1000b1e8:	2380      	movs	r3, #128	; 0x80
1000b1ea:	2280      	movs	r2, #128	; 0x80
1000b1ec:	0412      	lsls	r2, r2, #16
1000b1ee:	4692      	mov	sl, r2
1000b1f0:	50e2      	str	r2, [r4, r3]
1000b1f2:	2280      	movs	r2, #128	; 0x80
1000b1f4:	0452      	lsls	r2, r2, #17
1000b1f6:	4691      	mov	r9, r2
1000b1f8:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000b1fa:	4d46      	ldr	r5, [pc, #280]	; (1000b314 <platform_driver_init+0x15c>)
1000b1fc:	4b46      	ldr	r3, [pc, #280]	; (1000b318 <platform_driver_init+0x160>)
1000b1fe:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000b200:	4b46      	ldr	r3, [pc, #280]	; (1000b31c <platform_driver_init+0x164>)
1000b202:	4a47      	ldr	r2, [pc, #284]	; (1000b320 <platform_driver_init+0x168>)
1000b204:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000b206:	4947      	ldr	r1, [pc, #284]	; (1000b324 <platform_driver_init+0x16c>)
1000b208:	4a47      	ldr	r2, [pc, #284]	; (1000b328 <platform_driver_init+0x170>)
1000b20a:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000b20c:	4a47      	ldr	r2, [pc, #284]	; (1000b32c <platform_driver_init+0x174>)
1000b20e:	6811      	ldr	r1, [r2, #0]
1000b210:	4a47      	ldr	r2, [pc, #284]	; (1000b330 <platform_driver_init+0x178>)
1000b212:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000b214:	4a47      	ldr	r2, [pc, #284]	; (1000b334 <platform_driver_init+0x17c>)
1000b216:	6811      	ldr	r1, [r2, #0]
1000b218:	4a47      	ldr	r2, [pc, #284]	; (1000b338 <platform_driver_init+0x180>)
1000b21a:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000b21c:	4947      	ldr	r1, [pc, #284]	; (1000b33c <platform_driver_init+0x184>)
1000b21e:	4a48      	ldr	r2, [pc, #288]	; (1000b340 <platform_driver_init+0x188>)
1000b220:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000b222:	4948      	ldr	r1, [pc, #288]	; (1000b344 <platform_driver_init+0x18c>)
1000b224:	4a48      	ldr	r2, [pc, #288]	; (1000b348 <platform_driver_init+0x190>)
1000b226:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000b228:	4f48      	ldr	r7, [pc, #288]	; (1000b34c <platform_driver_init+0x194>)
1000b22a:	4a49      	ldr	r2, [pc, #292]	; (1000b350 <platform_driver_init+0x198>)
1000b22c:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000b22e:	4949      	ldr	r1, [pc, #292]	; (1000b354 <platform_driver_init+0x19c>)
1000b230:	4a49      	ldr	r2, [pc, #292]	; (1000b358 <platform_driver_init+0x1a0>)
1000b232:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000b234:	4949      	ldr	r1, [pc, #292]	; (1000b35c <platform_driver_init+0x1a4>)
1000b236:	4a4a      	ldr	r2, [pc, #296]	; (1000b360 <platform_driver_init+0x1a8>)
1000b238:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000b23a:	4e4a      	ldr	r6, [pc, #296]	; (1000b364 <platform_driver_init+0x1ac>)
1000b23c:	4a4a      	ldr	r2, [pc, #296]	; (1000b368 <platform_driver_init+0x1b0>)
1000b23e:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000b240:	494a      	ldr	r1, [pc, #296]	; (1000b36c <platform_driver_init+0x1b4>)
1000b242:	4a4b      	ldr	r2, [pc, #300]	; (1000b370 <platform_driver_init+0x1b8>)
1000b244:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000b246:	494b      	ldr	r1, [pc, #300]	; (1000b374 <platform_driver_init+0x1bc>)
1000b248:	4a4b      	ldr	r2, [pc, #300]	; (1000b378 <platform_driver_init+0x1c0>)
1000b24a:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000b24c:	494b      	ldr	r1, [pc, #300]	; (1000b37c <platform_driver_init+0x1c4>)
1000b24e:	4a4c      	ldr	r2, [pc, #304]	; (1000b380 <platform_driver_init+0x1c8>)
1000b250:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000b252:	494c      	ldr	r1, [pc, #304]	; (1000b384 <platform_driver_init+0x1cc>)
1000b254:	4a4c      	ldr	r2, [pc, #304]	; (1000b388 <platform_driver_init+0x1d0>)
1000b256:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000b258:	494c      	ldr	r1, [pc, #304]	; (1000b38c <platform_driver_init+0x1d4>)
1000b25a:	4a4d      	ldr	r2, [pc, #308]	; (1000b390 <platform_driver_init+0x1d8>)
1000b25c:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000b25e:	2028      	movs	r0, #40	; 0x28
1000b260:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000b262:	494c      	ldr	r1, [pc, #304]	; (1000b394 <platform_driver_init+0x1dc>)
1000b264:	2028      	movs	r0, #40	; 0x28
1000b266:	682b      	ldr	r3, [r5, #0]
1000b268:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000b26a:	682b      	ldr	r3, [r5, #0]
1000b26c:	494a      	ldr	r1, [pc, #296]	; (1000b398 <platform_driver_init+0x1e0>)
1000b26e:	2027      	movs	r0, #39	; 0x27
1000b270:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000b272:	4b4a      	ldr	r3, [pc, #296]	; (1000b39c <platform_driver_init+0x1e4>)
1000b274:	681a      	ldr	r2, [r3, #0]
1000b276:	4b4a      	ldr	r3, [pc, #296]	; (1000b3a0 <platform_driver_init+0x1e8>)
1000b278:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000b27a:	4a4a      	ldr	r2, [pc, #296]	; (1000b3a4 <platform_driver_init+0x1ec>)
1000b27c:	4b4a      	ldr	r3, [pc, #296]	; (1000b3a8 <platform_driver_init+0x1f0>)
1000b27e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000b280:	4a4a      	ldr	r2, [pc, #296]	; (1000b3ac <platform_driver_init+0x1f4>)
1000b282:	4b4b      	ldr	r3, [pc, #300]	; (1000b3b0 <platform_driver_init+0x1f8>)
1000b284:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000b286:	4a4b      	ldr	r2, [pc, #300]	; (1000b3b4 <platform_driver_init+0x1fc>)
1000b288:	4b4b      	ldr	r3, [pc, #300]	; (1000b3b8 <platform_driver_init+0x200>)
1000b28a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000b28c:	4a4b      	ldr	r2, [pc, #300]	; (1000b3bc <platform_driver_init+0x204>)
1000b28e:	4b4c      	ldr	r3, [pc, #304]	; (1000b3c0 <platform_driver_init+0x208>)
1000b290:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000b292:	4a4c      	ldr	r2, [pc, #304]	; (1000b3c4 <platform_driver_init+0x20c>)
1000b294:	4b4c      	ldr	r3, [pc, #304]	; (1000b3c8 <platform_driver_init+0x210>)
1000b296:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000b298:	4a4c      	ldr	r2, [pc, #304]	; (1000b3cc <platform_driver_init+0x214>)
1000b29a:	4b4d      	ldr	r3, [pc, #308]	; (1000b3d0 <platform_driver_init+0x218>)
1000b29c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000b29e:	4a4d      	ldr	r2, [pc, #308]	; (1000b3d4 <platform_driver_init+0x21c>)
1000b2a0:	4b4d      	ldr	r3, [pc, #308]	; (1000b3d8 <platform_driver_init+0x220>)
1000b2a2:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000b2a4:	22a0      	movs	r2, #160	; 0xa0
1000b2a6:	0092      	lsls	r2, r2, #2
1000b2a8:	2100      	movs	r1, #0
1000b2aa:	484c      	ldr	r0, [pc, #304]	; (1000b3dc <platform_driver_init+0x224>)
1000b2ac:	4b4c      	ldr	r3, [pc, #304]	; (1000b3e0 <platform_driver_init+0x228>)
1000b2ae:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b2b0:	2280      	movs	r2, #128	; 0x80
1000b2b2:	0092      	lsls	r2, r2, #2
1000b2b4:	4b4b      	ldr	r3, [pc, #300]	; (1000b3e4 <platform_driver_init+0x22c>)
1000b2b6:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000b2b8:	4b4b      	ldr	r3, [pc, #300]	; (1000b3e8 <platform_driver_init+0x230>)
1000b2ba:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b2bc:	4653      	mov	r3, sl
1000b2be:	6023      	str	r3, [r4, #0]
1000b2c0:	464b      	mov	r3, r9
1000b2c2:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000b2c4:	4b49      	ldr	r3, [pc, #292]	; (1000b3ec <platform_driver_init+0x234>)
1000b2c6:	4642      	mov	r2, r8
1000b2c8:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000b2ca:	683b      	ldr	r3, [r7, #0]
1000b2cc:	4a48      	ldr	r2, [pc, #288]	; (1000b3f0 <platform_driver_init+0x238>)
1000b2ce:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000b2d0:	6833      	ldr	r3, [r6, #0]
1000b2d2:	4a48      	ldr	r2, [pc, #288]	; (1000b3f4 <platform_driver_init+0x23c>)
1000b2d4:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000b2d6:	2000      	movs	r0, #0
1000b2d8:	4c47      	ldr	r4, [pc, #284]	; (1000b3f8 <platform_driver_init+0x240>)
1000b2da:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000b2dc:	2001      	movs	r0, #1
1000b2de:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000b2e0:	2002      	movs	r0, #2
1000b2e2:	47a0      	blx	r4
		platform_initialized = 1;
1000b2e4:	2201      	movs	r2, #1
1000b2e6:	4b06      	ldr	r3, [pc, #24]	; (1000b300 <platform_driver_init+0x148>)
1000b2e8:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000b2ea:	2000      	movs	r0, #0
1000b2ec:	e003      	b.n	1000b2f6 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000b2ee:	2201      	movs	r2, #1
1000b2f0:	4b03      	ldr	r3, [pc, #12]	; (1000b300 <platform_driver_init+0x148>)
1000b2f2:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000b2f4:	2001      	movs	r0, #1
	}
	return status;
}
1000b2f6:	bc1c      	pop	{r2, r3, r4}
1000b2f8:	4690      	mov	r8, r2
1000b2fa:	4699      	mov	r9, r3
1000b2fc:	46a2      	mov	sl, r4
1000b2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b300:	10013d9c 	.word	0x10013d9c
1000b304:	1000b145 	.word	0x1000b145
1000b308:	1000b189 	.word	0x1000b189
1000b30c:	10013dbc 	.word	0x10013dbc
1000b310:	e000e100 	.word	0xe000e100
1000b314:	10014a48 	.word	0x10014a48
1000b318:	000007d7 	.word	0x000007d7
1000b31c:	000007bd 	.word	0x000007bd
1000b320:	10014784 	.word	0x10014784
1000b324:	0001bc51 	.word	0x0001bc51
1000b328:	10014a4c 	.word	0x10014a4c
1000b32c:	100400bc 	.word	0x100400bc
1000b330:	10013d8c 	.word	0x10013d8c
1000b334:	100400b8 	.word	0x100400b8
1000b338:	10013d88 	.word	0x10013d88
1000b33c:	0001b99f 	.word	0x0001b99f
1000b340:	10014780 	.word	0x10014780
1000b344:	0001b9db 	.word	0x0001b9db
1000b348:	1001478c 	.word	0x1001478c
1000b34c:	10014a5c 	.word	0x10014a5c
1000b350:	1004003c 	.word	0x1004003c
1000b354:	10041fc0 	.word	0x10041fc0
1000b358:	10014790 	.word	0x10014790
1000b35c:	10041fc4 	.word	0x10041fc4
1000b360:	10014a58 	.word	0x10014a58
1000b364:	10014a50 	.word	0x10014a50
1000b368:	10041fd4 	.word	0x10041fd4
1000b36c:	10041fd8 	.word	0x10041fd8
1000b370:	10014788 	.word	0x10014788
1000b374:	0001cbe9 	.word	0x0001cbe9
1000b378:	10013dac 	.word	0x10013dac
1000b37c:	0001cd8f 	.word	0x0001cd8f
1000b380:	10013da0 	.word	0x10013da0
1000b384:	0001cea3 	.word	0x0001cea3
1000b388:	10013dc0 	.word	0x10013dc0
1000b38c:	0001cbcf 	.word	0x0001cbcf
1000b390:	10013d98 	.word	0x10013d98
1000b394:	1000b7d1 	.word	0x1000b7d1
1000b398:	1000b765 	.word	0x1000b765
1000b39c:	100400e4 	.word	0x100400e4
1000b3a0:	10013db4 	.word	0x10013db4
1000b3a4:	00019fe9 	.word	0x00019fe9
1000b3a8:	10013dc4 	.word	0x10013dc4
1000b3ac:	0001dbdd 	.word	0x0001dbdd
1000b3b0:	10013d94 	.word	0x10013d94
1000b3b4:	0001dc5b 	.word	0x0001dc5b
1000b3b8:	10013da8 	.word	0x10013da8
1000b3bc:	100405ec 	.word	0x100405ec
1000b3c0:	10013da4 	.word	0x10013da4
1000b3c4:	0001d5e3 	.word	0x0001d5e3
1000b3c8:	10013db0 	.word	0x10013db0
1000b3cc:	10040c20 	.word	0x10040c20
1000b3d0:	10013dc8 	.word	0x10013dc8
1000b3d4:	00019f09 	.word	0x00019f09
1000b3d8:	10013d84 	.word	0x10013d84
1000b3dc:	100147c8 	.word	0x100147c8
1000b3e0:	10010369 	.word	0x10010369
1000b3e4:	10014a60 	.word	0x10014a60
1000b3e8:	1000b071 	.word	0x1000b071
1000b3ec:	10014a54 	.word	0x10014a54
1000b3f0:	1000b119 	.word	0x1000b119
1000b3f4:	1000b82d 	.word	0x1000b82d
1000b3f8:	1000b815 	.word	0x1000b815

1000b3fc <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b3fc:	4b04      	ldr	r3, [pc, #16]	; (1000b410 <platform_register_ble_msg_handler+0x14>)
1000b3fe:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000b400:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000b402:	2a01      	cmp	r2, #1
1000b404:	d102      	bne.n	1000b40c <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000b406:	4b03      	ldr	r3, [pc, #12]	; (1000b414 <platform_register_ble_msg_handler+0x18>)
1000b408:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000b40a:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000b40c:	0018      	movs	r0, r3
1000b40e:	4770      	bx	lr
1000b410:	10013d9c 	.word	0x10013d9c
1000b414:	10013dbc 	.word	0x10013dbc

1000b418 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000b418:	b570      	push	{r4, r5, r6, lr}
1000b41a:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000b41c:	4b0e      	ldr	r3, [pc, #56]	; (1000b458 <platform_interface_send+0x40>)
1000b41e:	681b      	ldr	r3, [r3, #0]
1000b420:	2b00      	cmp	r3, #0
1000b422:	d002      	beq.n	1000b42a <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000b424:	8840      	ldrh	r0, [r0, #2]
1000b426:	4798      	blx	r3
1000b428:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000b42a:	88e3      	ldrh	r3, [r4, #6]
1000b42c:	88a2      	ldrh	r2, [r4, #4]
1000b42e:	8861      	ldrh	r1, [r4, #2]
1000b430:	8820      	ldrh	r0, [r4, #0]
1000b432:	4d0a      	ldr	r5, [pc, #40]	; (1000b45c <platform_interface_send+0x44>)
1000b434:	682d      	ldr	r5, [r5, #0]
1000b436:	47a8      	blx	r5
1000b438:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000b43a:	88e2      	ldrh	r2, [r4, #6]
1000b43c:	2a00      	cmp	r2, #0
1000b43e:	d102      	bne.n	1000b446 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000b440:	4b07      	ldr	r3, [pc, #28]	; (1000b460 <platform_interface_send+0x48>)
1000b442:	4798      	blx	r3
1000b444:	e006      	b.n	1000b454 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000b446:	0021      	movs	r1, r4
1000b448:	3108      	adds	r1, #8
1000b44a:	4b06      	ldr	r3, [pc, #24]	; (1000b464 <platform_interface_send+0x4c>)
1000b44c:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000b44e:	0028      	movs	r0, r5
1000b450:	4b03      	ldr	r3, [pc, #12]	; (1000b460 <platform_interface_send+0x48>)
1000b452:	4798      	blx	r3
	}
}
1000b454:	bd70      	pop	{r4, r5, r6, pc}
1000b456:	46c0      	nop			; (mov r8, r8)
1000b458:	10013d8c 	.word	0x10013d8c
1000b45c:	10013dc4 	.word	0x10013dc4
1000b460:	1000b0a1 	.word	0x1000b0a1
1000b464:	10010357 	.word	0x10010357

1000b468 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000b468:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b46a:	465f      	mov	r7, fp
1000b46c:	4656      	mov	r6, sl
1000b46e:	464d      	mov	r5, r9
1000b470:	4644      	mov	r4, r8
1000b472:	b4f0      	push	{r4, r5, r6, r7}
1000b474:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b476:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000b478:	2300      	movs	r3, #0
1000b47a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000b47c:	1ce3      	adds	r3, r4, #3
1000b47e:	d81c      	bhi.n	1000b4ba <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000b480:	220d      	movs	r2, #13
1000b482:	2100      	movs	r1, #0
1000b484:	a802      	add	r0, sp, #8
1000b486:	4b82      	ldr	r3, [pc, #520]	; (1000b690 <platform_event_wait+0x228>)
1000b488:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b48a:	2333      	movs	r3, #51	; 0x33
1000b48c:	aa02      	add	r2, sp, #8
1000b48e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b490:	3b30      	subs	r3, #48	; 0x30
1000b492:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b494:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b496:	3302      	adds	r3, #2
1000b498:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b49a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000b49c:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000b49e:	0a23      	lsrs	r3, r4, #8
1000b4a0:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000b4a2:	0c23      	lsrs	r3, r4, #16
1000b4a4:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000b4a6:	0e24      	lsrs	r4, r4, #24
1000b4a8:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000b4aa:	2301      	movs	r3, #1
1000b4ac:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000b4ae:	210d      	movs	r1, #13
1000b4b0:	0010      	movs	r0, r2
1000b4b2:	4b78      	ldr	r3, [pc, #480]	; (1000b694 <platform_event_wait+0x22c>)
1000b4b4:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000b4b6:	2301      	movs	r3, #1
1000b4b8:	4699      	mov	r9, r3
1000b4ba:	2400      	movs	r4, #0
1000b4bc:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000b4be:	4f76      	ldr	r7, [pc, #472]	; (1000b698 <platform_event_wait+0x230>)
1000b4c0:	4e76      	ldr	r6, [pc, #472]	; (1000b69c <platform_event_wait+0x234>)
1000b4c2:	4977      	ldr	r1, [pc, #476]	; (1000b6a0 <platform_event_wait+0x238>)
1000b4c4:	6838      	ldr	r0, [r7, #0]
1000b4c6:	6833      	ldr	r3, [r6, #0]
1000b4c8:	4798      	blx	r3
1000b4ca:	2800      	cmp	r0, #0
1000b4cc:	d000      	beq.n	1000b4d0 <platform_event_wait+0x68>
1000b4ce:	e088      	b.n	1000b5e2 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000b4d0:	4b73      	ldr	r3, [pc, #460]	; (1000b6a0 <platform_event_wait+0x238>)
1000b4d2:	681c      	ldr	r4, [r3, #0]
1000b4d4:	88a3      	ldrh	r3, [r4, #4]
1000b4d6:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b4d8:	23cd      	movs	r3, #205	; 0xcd
1000b4da:	009b      	lsls	r3, r3, #2
1000b4dc:	459a      	cmp	sl, r3
1000b4de:	d100      	bne.n	1000b4e2 <platform_event_wait+0x7a>
1000b4e0:	e0c7      	b.n	1000b672 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000b4e2:	8923      	ldrh	r3, [r4, #8]
1000b4e4:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000b4e6:	8963      	ldrh	r3, [r4, #10]
1000b4e8:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000b4ea:	464b      	mov	r3, r9
1000b4ec:	2b00      	cmp	r3, #0
1000b4ee:	d011      	beq.n	1000b514 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000b4f0:	220d      	movs	r2, #13
1000b4f2:	2100      	movs	r1, #0
1000b4f4:	a802      	add	r0, sp, #8
1000b4f6:	4b66      	ldr	r3, [pc, #408]	; (1000b690 <platform_event_wait+0x228>)
1000b4f8:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000b4fa:	2333      	movs	r3, #51	; 0x33
1000b4fc:	aa02      	add	r2, sp, #8
1000b4fe:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000b500:	3b30      	subs	r3, #48	; 0x30
1000b502:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000b504:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000b506:	3302      	adds	r3, #2
1000b508:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000b50a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000b50c:	210d      	movs	r1, #13
1000b50e:	0010      	movs	r0, r2
1000b510:	4b60      	ldr	r3, [pc, #384]	; (1000b694 <platform_event_wait+0x22c>)
1000b512:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000b514:	23a0      	movs	r3, #160	; 0xa0
1000b516:	00db      	lsls	r3, r3, #3
1000b518:	459a      	cmp	sl, r3
1000b51a:	d121      	bne.n	1000b560 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000b51c:	4b61      	ldr	r3, [pc, #388]	; (1000b6a4 <platform_event_wait+0x23c>)
1000b51e:	881b      	ldrh	r3, [r3, #0]
1000b520:	4443      	add	r3, r8
1000b522:	22a0      	movs	r2, #160	; 0xa0
1000b524:	0092      	lsls	r2, r2, #2
1000b526:	4293      	cmp	r3, r2
1000b528:	dd02      	ble.n	1000b530 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000b52a:	3a80      	subs	r2, #128	; 0x80
1000b52c:	4b5d      	ldr	r3, [pc, #372]	; (1000b6a4 <platform_event_wait+0x23c>)
1000b52e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000b530:	4b5c      	ldr	r3, [pc, #368]	; (1000b6a4 <platform_event_wait+0x23c>)
1000b532:	469a      	mov	sl, r3
1000b534:	881d      	ldrh	r5, [r3, #0]
1000b536:	4b5c      	ldr	r3, [pc, #368]	; (1000b6a8 <platform_event_wait+0x240>)
1000b538:	18ed      	adds	r5, r5, r3
1000b53a:	0021      	movs	r1, r4
1000b53c:	310c      	adds	r1, #12
1000b53e:	4642      	mov	r2, r8
1000b540:	0028      	movs	r0, r5
1000b542:	4b5a      	ldr	r3, [pc, #360]	; (1000b6ac <platform_event_wait+0x244>)
1000b544:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000b546:	4642      	mov	r2, r8
1000b548:	0029      	movs	r1, r5
1000b54a:	4658      	mov	r0, fp
1000b54c:	4b58      	ldr	r3, [pc, #352]	; (1000b6b0 <platform_event_wait+0x248>)
1000b54e:	4798      	blx	r3
				plf_event_buff_index += len;
1000b550:	4653      	mov	r3, sl
1000b552:	881b      	ldrh	r3, [r3, #0]
1000b554:	4443      	add	r3, r8
1000b556:	4652      	mov	r2, sl
1000b558:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b55a:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000b55c:	2502      	movs	r5, #2
1000b55e:	e03a      	b.n	1000b5d6 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b560:	4b54      	ldr	r3, [pc, #336]	; (1000b6b4 <platform_event_wait+0x24c>)
1000b562:	681b      	ldr	r3, [r3, #0]
1000b564:	2b00      	cmp	r3, #0
1000b566:	d032      	beq.n	1000b5ce <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000b568:	4b4d      	ldr	r3, [pc, #308]	; (1000b6a0 <platform_event_wait+0x238>)
1000b56a:	681a      	ldr	r2, [r3, #0]
1000b56c:	8893      	ldrh	r3, [r2, #4]
1000b56e:	21cd      	movs	r1, #205	; 0xcd
1000b570:	0089      	lsls	r1, r1, #2
1000b572:	428b      	cmp	r3, r1
1000b574:	d104      	bne.n	1000b580 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000b576:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000b578:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000b57a:	2b00      	cmp	r3, #0
1000b57c:	d02b      	beq.n	1000b5d6 <platform_event_wait+0x16e>
1000b57e:	e028      	b.n	1000b5d2 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000b580:	4c4d      	ldr	r4, [pc, #308]	; (1000b6b8 <platform_event_wait+0x250>)
1000b582:	4d49      	ldr	r5, [pc, #292]	; (1000b6a8 <platform_event_wait+0x240>)
1000b584:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000b586:	702b      	strb	r3, [r5, #0]
1000b588:	0a1b      	lsrs	r3, r3, #8
1000b58a:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000b58c:	8910      	ldrh	r0, [r2, #8]
1000b58e:	4b4b      	ldr	r3, [pc, #300]	; (1000b6bc <platform_event_wait+0x254>)
1000b590:	681b      	ldr	r3, [r3, #0]
1000b592:	4798      	blx	r3
1000b594:	7128      	strb	r0, [r5, #4]
1000b596:	0a00      	lsrs	r0, r0, #8
1000b598:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000b59a:	6820      	ldr	r0, [r4, #0]
1000b59c:	4b40      	ldr	r3, [pc, #256]	; (1000b6a0 <platform_event_wait+0x238>)
1000b59e:	681a      	ldr	r2, [r3, #0]
1000b5a0:	88d2      	ldrh	r2, [r2, #6]
1000b5a2:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000b5a4:	681d      	ldr	r5, [r3, #0]
1000b5a6:	896b      	ldrh	r3, [r5, #10]
1000b5a8:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000b5aa:	3008      	adds	r0, #8
1000b5ac:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000b5ae:	896a      	ldrh	r2, [r5, #10]
1000b5b0:	2a00      	cmp	r2, #0
1000b5b2:	d003      	beq.n	1000b5bc <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000b5b4:	0029      	movs	r1, r5
1000b5b6:	310c      	adds	r1, #12
1000b5b8:	4b3c      	ldr	r3, [pc, #240]	; (1000b6ac <platform_event_wait+0x244>)
1000b5ba:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000b5bc:	8969      	ldrh	r1, [r5, #10]
1000b5be:	3108      	adds	r1, #8
1000b5c0:	4b3c      	ldr	r3, [pc, #240]	; (1000b6b4 <platform_event_wait+0x24c>)
1000b5c2:	681b      	ldr	r3, [r3, #0]
1000b5c4:	4838      	ldr	r0, [pc, #224]	; (1000b6a8 <platform_event_wait+0x240>)
1000b5c6:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b5c8:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000b5ca:	2503      	movs	r5, #3
1000b5cc:	e003      	b.n	1000b5d6 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b5ce:	2400      	movs	r4, #0
1000b5d0:	e001      	b.n	1000b5d6 <platform_event_wait+0x16e>
1000b5d2:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000b5d4:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000b5d6:	4b32      	ldr	r3, [pc, #200]	; (1000b6a0 <platform_event_wait+0x238>)
1000b5d8:	6818      	ldr	r0, [r3, #0]
1000b5da:	4b39      	ldr	r3, [pc, #228]	; (1000b6c0 <platform_event_wait+0x258>)
1000b5dc:	681b      	ldr	r3, [r3, #0]
1000b5de:	4798      	blx	r3
1000b5e0:	e000      	b.n	1000b5e4 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000b5e2:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000b5e4:	2c00      	cmp	r4, #0
1000b5e6:	d000      	beq.n	1000b5ea <platform_event_wait+0x182>
1000b5e8:	e76b      	b.n	1000b4c2 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000b5ea:	464b      	mov	r3, r9
1000b5ec:	2b00      	cmp	r3, #0
1000b5ee:	d046      	beq.n	1000b67e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000b5f0:	4b29      	ldr	r3, [pc, #164]	; (1000b698 <platform_event_wait+0x230>)
1000b5f2:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000b5f4:	2e00      	cmp	r6, #0
1000b5f6:	d104      	bne.n	1000b602 <platform_event_wait+0x19a>
1000b5f8:	2300      	movs	r3, #0
1000b5fa:	6a1c      	ldr	r4, [r3, #32]
1000b5fc:	2c00      	cmp	r4, #0
1000b5fe:	d131      	bne.n	1000b664 <platform_event_wait+0x1fc>
1000b600:	e03d      	b.n	1000b67e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000b602:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000b604:	2314      	movs	r3, #20
1000b606:	469c      	mov	ip, r3
1000b608:	44b4      	add	ip, r6
1000b60a:	4663      	mov	r3, ip
1000b60c:	4660      	mov	r0, ip
1000b60e:	9300      	str	r3, [sp, #0]
1000b610:	4b2c      	ldr	r3, [pc, #176]	; (1000b6c4 <platform_event_wait+0x25c>)
1000b612:	681b      	ldr	r3, [r3, #0]
1000b614:	4798      	blx	r3
	while(NULL != current)
1000b616:	2c00      	cmp	r4, #0
1000b618:	d01f      	beq.n	1000b65a <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000b61a:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b61c:	23cd      	movs	r3, #205	; 0xcd
1000b61e:	009b      	lsls	r3, r3, #2
1000b620:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000b622:	4b27      	ldr	r3, [pc, #156]	; (1000b6c0 <platform_event_wait+0x258>)
1000b624:	469a      	mov	sl, r3
1000b626:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000b628:	6803      	ldr	r3, [r0, #0]
1000b62a:	889b      	ldrh	r3, [r3, #4]
1000b62c:	4543      	cmp	r3, r8
1000b62e:	d110      	bne.n	1000b652 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000b630:	2f00      	cmp	r7, #0
1000b632:	d006      	beq.n	1000b642 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000b634:	6883      	ldr	r3, [r0, #8]
1000b636:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000b638:	4653      	mov	r3, sl
1000b63a:	681b      	ldr	r3, [r3, #0]
1000b63c:	4798      	blx	r3
				current = prev->pstrNext;
1000b63e:	68b8      	ldr	r0, [r7, #8]
1000b640:	e009      	b.n	1000b656 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000b642:	6883      	ldr	r3, [r0, #8]
1000b644:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000b646:	4b1e      	ldr	r3, [pc, #120]	; (1000b6c0 <platform_event_wait+0x258>)
1000b648:	681b      	ldr	r3, [r3, #0]
1000b64a:	9301      	str	r3, [sp, #4]
1000b64c:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000b64e:	6a30      	ldr	r0, [r6, #32]
1000b650:	e001      	b.n	1000b656 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000b652:	0007      	movs	r7, r0
1000b654:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000b656:	2800      	cmp	r0, #0
1000b658:	d1e6      	bne.n	1000b628 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000b65a:	4b1b      	ldr	r3, [pc, #108]	; (1000b6c8 <platform_event_wait+0x260>)
1000b65c:	681b      	ldr	r3, [r3, #0]
1000b65e:	9800      	ldr	r0, [sp, #0]
1000b660:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000b662:	e00c      	b.n	1000b67e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000b664:	2314      	movs	r3, #20
1000b666:	9300      	str	r3, [sp, #0]
1000b668:	4b16      	ldr	r3, [pc, #88]	; (1000b6c4 <platform_event_wait+0x25c>)
1000b66a:	681b      	ldr	r3, [r3, #0]
1000b66c:	2014      	movs	r0, #20
1000b66e:	4798      	blx	r3
1000b670:	e7d3      	b.n	1000b61a <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b672:	4b10      	ldr	r3, [pc, #64]	; (1000b6b4 <platform_event_wait+0x24c>)
1000b674:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000b676:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000b678:	2b00      	cmp	r3, #0
1000b67a:	d0ac      	beq.n	1000b5d6 <platform_event_wait+0x16e>
1000b67c:	e77b      	b.n	1000b576 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000b67e:	0028      	movs	r0, r5
1000b680:	b007      	add	sp, #28
1000b682:	bc3c      	pop	{r2, r3, r4, r5}
1000b684:	4690      	mov	r8, r2
1000b686:	4699      	mov	r9, r3
1000b688:	46a2      	mov	sl, r4
1000b68a:	46ab      	mov	fp, r5
1000b68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b68e:	46c0      	nop			; (mov r8, r8)
1000b690:	10010369 	.word	0x10010369
1000b694:	1000b419 	.word	0x1000b419
1000b698:	10013dc8 	.word	0x10013dc8
1000b69c:	10013db0 	.word	0x10013db0
1000b6a0:	10013d90 	.word	0x10013d90
1000b6a4:	10014a60 	.word	0x10014a60
1000b6a8:	100147c8 	.word	0x100147c8
1000b6ac:	10010357 	.word	0x10010357
1000b6b0:	1000b039 	.word	0x1000b039
1000b6b4:	10013dbc 	.word	0x10013dbc
1000b6b8:	10013db8 	.word	0x10013db8
1000b6bc:	10013d88 	.word	0x10013d88
1000b6c0:	10013d84 	.word	0x10013d84
1000b6c4:	10013da8 	.word	0x10013da8
1000b6c8:	10013d94 	.word	0x10013d94

1000b6cc <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000b6cc:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000b6ce:	4b03      	ldr	r3, [pc, #12]	; (1000b6dc <acquire_sleep_lock+0x10>)
1000b6d0:	681b      	ldr	r3, [r3, #0]
1000b6d2:	2080      	movs	r0, #128	; 0x80
1000b6d4:	0200      	lsls	r0, r0, #8
1000b6d6:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000b6d8:	2008      	movs	r0, #8
1000b6da:	bd10      	pop	{r4, pc}
1000b6dc:	10014780 	.word	0x10014780

1000b6e0 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000b6e0:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000b6e2:	4b03      	ldr	r3, [pc, #12]	; (1000b6f0 <release_message_lock+0x10>)
1000b6e4:	681b      	ldr	r3, [r3, #0]
1000b6e6:	2080      	movs	r0, #128	; 0x80
1000b6e8:	01c0      	lsls	r0, r0, #7
1000b6ea:	4798      	blx	r3
	return status;
}
1000b6ec:	2000      	movs	r0, #0
1000b6ee:	bd10      	pop	{r4, pc}
1000b6f0:	1001478c 	.word	0x1001478c

1000b6f4 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000b6f4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000b6f6:	4a18      	ldr	r2, [pc, #96]	; (1000b758 <gpio1_combined_isr_handler+0x64>)
1000b6f8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b6fa:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b6fc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b6fe:	2180      	movs	r1, #128	; 0x80
1000b700:	0209      	lsls	r1, r1, #8
1000b702:	4301      	orrs	r1, r0
1000b704:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b706:	0010      	movs	r0, r2
1000b708:	4d14      	ldr	r5, [pc, #80]	; (1000b75c <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b70a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b70c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b70e:	05db      	lsls	r3, r3, #23
1000b710:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b712:	d011      	beq.n	1000b738 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000b714:	b2db      	uxtb	r3, r3
1000b716:	4259      	negs	r1, r3
1000b718:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000b71a:	2b01      	cmp	r3, #1
1000b71c:	d006      	beq.n	1000b72c <gpio1_combined_isr_handler+0x38>
1000b71e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000b720:	085b      	lsrs	r3, r3, #1
				index++;
1000b722:	3101      	adds	r1, #1
1000b724:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000b726:	2b01      	cmp	r3, #1
1000b728:	d1fa      	bne.n	1000b720 <gpio1_combined_isr_handler+0x2c>
1000b72a:	e000      	b.n	1000b72e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b72c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b72e:	0023      	movs	r3, r4
1000b730:	408b      	lsls	r3, r1
1000b732:	b29b      	uxth	r3, r3
1000b734:	8703      	strh	r3, [r0, #56]	; 0x38
1000b736:	e003      	b.n	1000b740 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b738:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b73a:	432b      	orrs	r3, r5
1000b73c:	b29b      	uxth	r3, r3
1000b73e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000b740:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b742:	05db      	lsls	r3, r3, #23
1000b744:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b746:	d1e2      	bne.n	1000b70e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b748:	2180      	movs	r1, #128	; 0x80
1000b74a:	0049      	lsls	r1, r1, #1
1000b74c:	3381      	adds	r3, #129	; 0x81
1000b74e:	33ff      	adds	r3, #255	; 0xff
1000b750:	4a03      	ldr	r2, [pc, #12]	; (1000b760 <gpio1_combined_isr_handler+0x6c>)
1000b752:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000b754:	bd30      	pop	{r4, r5, pc}
1000b756:	46c0      	nop			; (mov r8, r8)
1000b758:	40011000 	.word	0x40011000
1000b75c:	ffff8000 	.word	0xffff8000
1000b760:	e000e100 	.word	0xe000e100

1000b764 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000b764:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000b766:	4a17      	ldr	r2, [pc, #92]	; (1000b7c4 <gpio0_combined_isr_handler+0x60>)
1000b768:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b76a:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000b76c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000b76e:	2180      	movs	r1, #128	; 0x80
1000b770:	0209      	lsls	r1, r1, #8
1000b772:	4301      	orrs	r1, r0
1000b774:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b776:	0010      	movs	r0, r2
1000b778:	4d13      	ldr	r5, [pc, #76]	; (1000b7c8 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b77a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b77c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b77e:	05db      	lsls	r3, r3, #23
1000b780:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000b782:	d011      	beq.n	1000b7a8 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000b784:	b2db      	uxtb	r3, r3
1000b786:	4259      	negs	r1, r3
1000b788:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000b78a:	2b01      	cmp	r3, #1
1000b78c:	d006      	beq.n	1000b79c <gpio0_combined_isr_handler+0x38>
1000b78e:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000b790:	085b      	lsrs	r3, r3, #1
				index++;
1000b792:	3101      	adds	r1, #1
1000b794:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000b796:	2b01      	cmp	r3, #1
1000b798:	d1fa      	bne.n	1000b790 <gpio0_combined_isr_handler+0x2c>
1000b79a:	e000      	b.n	1000b79e <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000b79c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000b79e:	0023      	movs	r3, r4
1000b7a0:	408b      	lsls	r3, r1
1000b7a2:	b29b      	uxth	r3, r3
1000b7a4:	8703      	strh	r3, [r0, #56]	; 0x38
1000b7a6:	e003      	b.n	1000b7b0 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000b7a8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000b7aa:	432b      	orrs	r3, r5
1000b7ac:	b29b      	uxth	r3, r3
1000b7ae:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000b7b0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000b7b2:	05db      	lsls	r3, r3, #23
1000b7b4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000b7b6:	d1e2      	bne.n	1000b77e <gpio0_combined_isr_handler+0x1a>
1000b7b8:	2180      	movs	r1, #128	; 0x80
1000b7ba:	3381      	adds	r3, #129	; 0x81
1000b7bc:	33ff      	adds	r3, #255	; 0xff
1000b7be:	4a03      	ldr	r2, [pc, #12]	; (1000b7cc <gpio0_combined_isr_handler+0x68>)
1000b7c0:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000b7c2:	bd30      	pop	{r4, r5, pc}
1000b7c4:	40010000 	.word	0x40010000
1000b7c8:	ffff8000 	.word	0xffff8000
1000b7cc:	e000e100 	.word	0xe000e100

1000b7d0 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000b7d0:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000b7d2:	4b0c      	ldr	r3, [pc, #48]	; (1000b804 <PORT1_COMB_Handler+0x34>)
1000b7d4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000b7d6:	0b5b      	lsrs	r3, r3, #13
1000b7d8:	d010      	beq.n	1000b7fc <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000b7da:	4b0b      	ldr	r3, [pc, #44]	; (1000b808 <PORT1_COMB_Handler+0x38>)
1000b7dc:	681b      	ldr	r3, [r3, #0]
1000b7de:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000b7e0:	4a08      	ldr	r2, [pc, #32]	; (1000b804 <PORT1_COMB_Handler+0x34>)
1000b7e2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b7e4:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000b7e6:	0b5b      	lsrs	r3, r3, #13
1000b7e8:	035b      	lsls	r3, r3, #13
1000b7ea:	430b      	orrs	r3, r1
1000b7ec:	8713      	strh	r3, [r2, #56]	; 0x38
1000b7ee:	2180      	movs	r1, #128	; 0x80
1000b7f0:	0049      	lsls	r1, r1, #1
1000b7f2:	23c0      	movs	r3, #192	; 0xc0
1000b7f4:	005b      	lsls	r3, r3, #1
1000b7f6:	4a05      	ldr	r2, [pc, #20]	; (1000b80c <PORT1_COMB_Handler+0x3c>)
1000b7f8:	50d1      	str	r1, [r2, r3]
1000b7fa:	e001      	b.n	1000b800 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000b7fc:	4b04      	ldr	r3, [pc, #16]	; (1000b810 <PORT1_COMB_Handler+0x40>)
1000b7fe:	4798      	blx	r3
	}
}
1000b800:	bd10      	pop	{r4, pc}
1000b802:	46c0      	nop			; (mov r8, r8)
1000b804:	40011000 	.word	0x40011000
1000b808:	10014a4c 	.word	0x10014a4c
1000b80c:	e000e100 	.word	0xe000e100
1000b810:	1000b6f5 	.word	0x1000b6f5

1000b814 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000b814:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000b816:	2802      	cmp	r0, #2
1000b818:	d804      	bhi.n	1000b824 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000b81a:	0080      	lsls	r0, r0, #2
1000b81c:	2200      	movs	r2, #0
1000b81e:	4b02      	ldr	r3, [pc, #8]	; (1000b828 <wakeup_int_unregister_callback+0x14>)
1000b820:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000b822:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000b824:	0018      	movs	r0, r3
1000b826:	4770      	bx	lr
1000b828:	10014a64 	.word	0x10014a64

1000b82c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000b82c:	b510      	push	{r4, lr}
1000b82e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000b830:	7803      	ldrb	r3, [r0, #0]
1000b832:	2b01      	cmp	r3, #1
1000b834:	d108      	bne.n	1000b848 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000b836:	4b11      	ldr	r3, [pc, #68]	; (1000b87c <wakeup_active_event_callback+0x50>)
1000b838:	681b      	ldr	r3, [r3, #0]
1000b83a:	2b00      	cmp	r3, #0
1000b83c:	d000      	beq.n	1000b840 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000b83e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000b840:	23ff      	movs	r3, #255	; 0xff
1000b842:	6822      	ldr	r2, [r4, #0]
1000b844:	439a      	bics	r2, r3
1000b846:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000b848:	7863      	ldrb	r3, [r4, #1]
1000b84a:	2b01      	cmp	r3, #1
1000b84c:	d108      	bne.n	1000b860 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000b84e:	4b0b      	ldr	r3, [pc, #44]	; (1000b87c <wakeup_active_event_callback+0x50>)
1000b850:	685b      	ldr	r3, [r3, #4]
1000b852:	2b00      	cmp	r3, #0
1000b854:	d000      	beq.n	1000b858 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000b856:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000b858:	4b09      	ldr	r3, [pc, #36]	; (1000b880 <wakeup_active_event_callback+0x54>)
1000b85a:	6822      	ldr	r2, [r4, #0]
1000b85c:	4013      	ands	r3, r2
1000b85e:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000b860:	78a3      	ldrb	r3, [r4, #2]
1000b862:	2b01      	cmp	r3, #1
1000b864:	d108      	bne.n	1000b878 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000b866:	4b05      	ldr	r3, [pc, #20]	; (1000b87c <wakeup_active_event_callback+0x50>)
1000b868:	689b      	ldr	r3, [r3, #8]
1000b86a:	2b00      	cmp	r3, #0
1000b86c:	d000      	beq.n	1000b870 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000b86e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000b870:	4b04      	ldr	r3, [pc, #16]	; (1000b884 <wakeup_active_event_callback+0x58>)
1000b872:	6822      	ldr	r2, [r4, #0]
1000b874:	4013      	ands	r3, r2
1000b876:	6023      	str	r3, [r4, #0]
	}
}
1000b878:	bd10      	pop	{r4, pc}
1000b87a:	46c0      	nop			; (mov r8, r8)
1000b87c:	10014a64 	.word	0x10014a64
1000b880:	ffff00ff 	.word	0xffff00ff
1000b884:	ff00ffff 	.word	0xff00ffff

1000b888 <app_htpt_cfg_indntf_ind_handler>:
	}
}


static at_ble_status_t app_htpt_cfg_indntf_ind_handler(void *params)
{
1000b888:	b510      	push	{r4, lr}
	at_ble_htpt_cfg_indntf_ind_t htpt_cfg_indntf_ind_params;
	memcpy((uint8_t *)&htpt_cfg_indntf_ind_params, params,
	sizeof(at_ble_htpt_cfg_indntf_ind_t));
	if (htpt_cfg_indntf_ind_params.ntf_ind_cfg == 0x03) {
1000b88a:	7843      	ldrb	r3, [r0, #1]
1000b88c:	2b03      	cmp	r3, #3
1000b88e:	d106      	bne.n	1000b89e <app_htpt_cfg_indntf_ind_handler+0x16>
		printf("Started HTP Temperature Notification");
1000b890:	4807      	ldr	r0, [pc, #28]	; (1000b8b0 <app_htpt_cfg_indntf_ind_handler+0x28>)
1000b892:	4b08      	ldr	r3, [pc, #32]	; (1000b8b4 <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000b894:	4798      	blx	r3
		Temp_Notification_Flag = true;
1000b896:	2201      	movs	r2, #1
1000b898:	4b07      	ldr	r3, [pc, #28]	; (1000b8b8 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000b89a:	701a      	strb	r2, [r3, #0]
1000b89c:	e005      	b.n	1000b8aa <app_htpt_cfg_indntf_ind_handler+0x22>
	}
	else {
		printf("HTP Temperature Notification Stopped");
1000b89e:	4807      	ldr	r0, [pc, #28]	; (1000b8bc <app_htpt_cfg_indntf_ind_handler+0x34>)
1000b8a0:	4b04      	ldr	r3, [pc, #16]	; (1000b8b4 <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000b8a2:	4798      	blx	r3
		Temp_Notification_Flag = false;
1000b8a4:	2200      	movs	r2, #0
1000b8a6:	4b04      	ldr	r3, [pc, #16]	; (1000b8b8 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000b8a8:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
1000b8aa:	2000      	movs	r0, #0
1000b8ac:	bd10      	pop	{r4, pc}
1000b8ae:	46c0      	nop			; (mov r8, r8)
1000b8b0:	10011f84 	.word	0x10011f84
1000b8b4:	10010379 	.word	0x10010379
1000b8b8:	10013dd5 	.word	0x10013dd5
1000b8bc:	10011fac 	.word	0x10011fac

1000b8c0 <transfer_done_rx>:
{
	dma_start_transfer_job(&uart_dma_resource_rx);
}

static void transfer_done_rx(struct dma_resource* const resource )
{
1000b8c0:	b510      	push	{r4, lr}
	//dma_start_transfer_job(&uart_dma_resource_tx);
	/* Start parsing the data here! */
	dma_start_transfer_job(&uart_dma_resource_rx);
1000b8c2:	4809      	ldr	r0, [pc, #36]	; (1000b8e8 <transfer_done_rx+0x28>)
1000b8c4:	4b09      	ldr	r3, [pc, #36]	; (1000b8ec <transfer_done_rx+0x2c>)
1000b8c6:	4798      	blx	r3
	
	#if 0
	GPIO1->DATAOUT.reg |= (1 << (LED_0_PIN % 16)); // Turn OFF
	GPIO1->DATAOUT.reg &= ~(1 << (LED_0_PIN % 16)); // Turn ON
	#endif
	if(string_rx[4] == 1) {
1000b8c8:	4b09      	ldr	r3, [pc, #36]	; (1000b8f0 <transfer_done_rx+0x30>)
1000b8ca:	791b      	ldrb	r3, [r3, #4]
1000b8cc:	2b01      	cmp	r3, #1
1000b8ce:	d105      	bne.n	1000b8dc <transfer_done_rx+0x1c>
		/* Toggle the LED to 0 */
		GPIO1->DATAOUT.reg |= (1 << (LED_0_PIN % 16)); // Turn OFF
1000b8d0:	4a08      	ldr	r2, [pc, #32]	; (1000b8f4 <transfer_done_rx+0x34>)
1000b8d2:	8891      	ldrh	r1, [r2, #4]
1000b8d4:	333f      	adds	r3, #63	; 0x3f
1000b8d6:	430b      	orrs	r3, r1
1000b8d8:	8093      	strh	r3, [r2, #4]
1000b8da:	e004      	b.n	1000b8e6 <transfer_done_rx+0x26>
		} else {
		/* Let the LED be ON */
		GPIO1->DATAOUT.reg &= ~(1 << (LED_0_PIN % 16)); // Turn ON
1000b8dc:	4a05      	ldr	r2, [pc, #20]	; (1000b8f4 <transfer_done_rx+0x34>)
1000b8de:	8893      	ldrh	r3, [r2, #4]
1000b8e0:	2140      	movs	r1, #64	; 0x40
1000b8e2:	438b      	bics	r3, r1
1000b8e4:	8093      	strh	r3, [r2, #4]
	}
}
1000b8e6:	bd10      	pop	{r4, pc}
1000b8e8:	10014ab4 	.word	0x10014ab4
1000b8ec:	1000836d 	.word	0x1000836d
1000b8f0:	10013dd0 	.word	0x10013dd0
1000b8f4:	40011000 	.word	0x40011000

1000b8f8 <transfer_done_tx>:
//! [transfer_descriptor]

//! [setup]
//! [transfer_done_tx]
static void transfer_done_tx(struct dma_resource* const resource )
{
1000b8f8:	b510      	push	{r4, lr}
	dma_start_transfer_job(&uart_dma_resource_rx);
1000b8fa:	4802      	ldr	r0, [pc, #8]	; (1000b904 <transfer_done_tx+0xc>)
1000b8fc:	4b02      	ldr	r3, [pc, #8]	; (1000b908 <transfer_done_tx+0x10>)
1000b8fe:	4798      	blx	r3
}
1000b900:	bd10      	pop	{r4, pc}
1000b902:	46c0      	nop			; (mov r8, r8)
1000b904:	10014ab4 	.word	0x10014ab4
1000b908:	1000836d 	.word	0x1000836d

1000b90c <timer_callback_handler>:
}
#endif

/* Timer callback */
static void timer_callback_handler(void)
{
1000b90c:	b510      	push	{r4, lr}
	/* Stop timer */
	hw_timer_stop();
1000b90e:	4b04      	ldr	r3, [pc, #16]	; (1000b920 <timer_callback_handler+0x14>)
1000b910:	4798      	blx	r3
	/* Set timer Alarm flag */
	Timer_Flag = true;
1000b912:	2201      	movs	r2, #1
1000b914:	4b03      	ldr	r3, [pc, #12]	; (1000b924 <timer_callback_handler+0x18>)
1000b916:	701a      	strb	r2, [r3, #0]
	/* Restart Timer */
	hw_timer_start(10);
1000b918:	200a      	movs	r0, #10
1000b91a:	4b03      	ldr	r3, [pc, #12]	; (1000b928 <timer_callback_handler+0x1c>)
1000b91c:	4798      	blx	r3
}
1000b91e:	bd10      	pop	{r4, pc}
1000b920:	1000ae19 	.word	0x1000ae19
1000b924:	10013dcc 	.word	0x10013dcc
1000b928:	1000aded 	.word	0x1000aded

1000b92c <ble_advertise>:
at_ble_handle_t htpt_conn_handle;
volatile bool Timer_Flag = false;
volatile bool Temp_Notification_Flag = false;

static void ble_advertise (void)
{
1000b92c:	b510      	push	{r4, lr}
1000b92e:	b084      	sub	sp, #16
	printf("\nAssignment 2.1 : Start Advertising");
1000b930:	4815      	ldr	r0, [pc, #84]	; (1000b988 <ble_advertise+0x5c>)
1000b932:	4b16      	ldr	r3, [pc, #88]	; (1000b98c <ble_advertise+0x60>)
1000b934:	4798      	blx	r3
	status = ble_advertisement_data_set();
1000b936:	4b16      	ldr	r3, [pc, #88]	; (1000b990 <ble_advertise+0x64>)
1000b938:	4798      	blx	r3
1000b93a:	4b16      	ldr	r3, [pc, #88]	; (1000b994 <ble_advertise+0x68>)
1000b93c:	7018      	strb	r0, [r3, #0]
	if(status != AT_BLE_SUCCESS)
1000b93e:	781b      	ldrb	r3, [r3, #0]
1000b940:	2b00      	cmp	r3, #0
1000b942:	d006      	beq.n	1000b952 <ble_advertise+0x26>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000b944:	4b13      	ldr	r3, [pc, #76]	; (1000b994 <ble_advertise+0x68>)
1000b946:	7819      	ldrb	r1, [r3, #0]
1000b948:	b2c9      	uxtb	r1, r1
1000b94a:	4813      	ldr	r0, [pc, #76]	; (1000b998 <ble_advertise+0x6c>)
1000b94c:	4b0f      	ldr	r3, [pc, #60]	; (1000b98c <ble_advertise+0x60>)
1000b94e:	4798      	blx	r3
1000b950:	e7fe      	b.n	1000b950 <ble_advertise+0x24>
		while(1);
	}
	/* Start of advertisement */
	status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED,\
1000b952:	2300      	movs	r3, #0
1000b954:	9302      	str	r3, [sp, #8]
1000b956:	4b11      	ldr	r3, [pc, #68]	; (1000b99c <ble_advertise+0x70>)
1000b958:	9301      	str	r3, [sp, #4]
1000b95a:	335a      	adds	r3, #90	; 0x5a
1000b95c:	33ff      	adds	r3, #255	; 0xff
1000b95e:	9300      	str	r3, [sp, #0]
1000b960:	2300      	movs	r3, #0
1000b962:	2200      	movs	r2, #0
1000b964:	2101      	movs	r1, #1
1000b966:	2000      	movs	r0, #0
1000b968:	4c0d      	ldr	r4, [pc, #52]	; (1000b9a0 <ble_advertise+0x74>)
1000b96a:	47a0      	blx	r4
1000b96c:	4b09      	ldr	r3, [pc, #36]	; (1000b994 <ble_advertise+0x68>)
1000b96e:	7018      	strb	r0, [r3, #0]
	NULL,\
	AT_BLE_ADV_FP_ANY,\
	1000,\
	655,\
	0);
	if(status != AT_BLE_SUCCESS)
1000b970:	781b      	ldrb	r3, [r3, #0]
1000b972:	2b00      	cmp	r3, #0
1000b974:	d006      	beq.n	1000b984 <ble_advertise+0x58>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000b976:	4b07      	ldr	r3, [pc, #28]	; (1000b994 <ble_advertise+0x68>)
1000b978:	7819      	ldrb	r1, [r3, #0]
1000b97a:	b2c9      	uxtb	r1, r1
1000b97c:	4806      	ldr	r0, [pc, #24]	; (1000b998 <ble_advertise+0x6c>)
1000b97e:	4b03      	ldr	r3, [pc, #12]	; (1000b98c <ble_advertise+0x60>)
1000b980:	4798      	blx	r3
1000b982:	e7fe      	b.n	1000b982 <ble_advertise+0x56>
		while(1);
	}
}
1000b984:	b004      	add	sp, #16
1000b986:	bd10      	pop	{r4, pc}
1000b988:	10011fd4 	.word	0x10011fd4
1000b98c:	10010379 	.word	0x10010379
1000b990:	1000ad11 	.word	0x1000ad11
1000b994:	10014af4 	.word	0x10014af4
1000b998:	10011ff8 	.word	0x10011ff8
1000b99c:	0000028f 	.word	0x0000028f
1000b9a0:	1000c901 	.word	0x1000c901

1000b9a4 <ble_disconnected_cb>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event */
static at_ble_status_t ble_disconnected_cb (void *param)
{
1000b9a4:	b510      	push	{r4, lr}
	printf("\nAssignment 3.2: Application disconnected "); 
1000b9a6:	4803      	ldr	r0, [pc, #12]	; (1000b9b4 <ble_disconnected_cb+0x10>)
1000b9a8:	4b03      	ldr	r3, [pc, #12]	; (1000b9b8 <ble_disconnected_cb+0x14>)
1000b9aa:	4798      	blx	r3
	ble_advertise();
1000b9ac:	4b03      	ldr	r3, [pc, #12]	; (1000b9bc <ble_disconnected_cb+0x18>)
1000b9ae:	4798      	blx	r3
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000b9b0:	2000      	movs	r0, #0
1000b9b2:	bd10      	pop	{r4, pc}
1000b9b4:	10012028 	.word	0x10012028
1000b9b8:	10010379 	.word	0x10010379
1000b9bc:	1000b92d 	.word	0x1000b92d

1000b9c0 <ble_paired_cb>:
}
																																	

/* Callback registered for AT_BLE_CONNECTED event*/
static at_ble_status_t ble_paired_cb (void *param)
{
1000b9c0:	b570      	push	{r4, r5, r6, lr}
1000b9c2:	0005      	movs	r5, r0
	at_ble_pair_done_t *pair_params = param; 
	printf("\nAssignment 3.2: Application paired ");
1000b9c4:	4809      	ldr	r0, [pc, #36]	; (1000b9ec <ble_paired_cb+0x2c>)
1000b9c6:	4c0a      	ldr	r4, [pc, #40]	; (1000b9f0 <ble_paired_cb+0x30>)
1000b9c8:	47a0      	blx	r4
	/* Enable the HTP Profile */
	printf("\nAssignment 4.1: enable health temperature service ");
1000b9ca:	480a      	ldr	r0, [pc, #40]	; (1000b9f4 <ble_paired_cb+0x34>)
1000b9cc:	47a0      	blx	r4
	status = at_ble_htpt_enable(pair_params->handle,
1000b9ce:	8868      	ldrh	r0, [r5, #2]
1000b9d0:	2102      	movs	r1, #2
1000b9d2:	4b09      	ldr	r3, [pc, #36]	; (1000b9f8 <ble_paired_cb+0x38>)
1000b9d4:	4798      	blx	r3
1000b9d6:	4b09      	ldr	r3, [pc, #36]	; (1000b9fc <ble_paired_cb+0x3c>)
1000b9d8:	7018      	strb	r0, [r3, #0]
	HTPT_CFG_INTERM_MEAS_NTF);
	if(status != AT_BLE_SUCCESS){
1000b9da:	781b      	ldrb	r3, [r3, #0]
1000b9dc:	2b00      	cmp	r3, #0
1000b9de:	d003      	beq.n	1000b9e8 <ble_paired_cb+0x28>
		printf("*** Failure in HTP Profile Enable");
1000b9e0:	4807      	ldr	r0, [pc, #28]	; (1000ba00 <ble_paired_cb+0x40>)
1000b9e2:	4b03      	ldr	r3, [pc, #12]	; (1000b9f0 <ble_paired_cb+0x30>)
1000b9e4:	4798      	blx	r3
1000b9e6:	e7fe      	b.n	1000b9e6 <ble_paired_cb+0x26>
		while(true);
	}
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000b9e8:	2000      	movs	r0, #0
1000b9ea:	bd70      	pop	{r4, r5, r6, pc}
1000b9ec:	10012054 	.word	0x10012054
1000b9f0:	10010379 	.word	0x10010379
1000b9f4:	1001207c 	.word	0x1001207c
1000b9f8:	1000d081 	.word	0x1000d081
1000b9fc:	10014af4 	.word	0x10014af4
1000ba00:	100120b0 	.word	0x100120b0

1000ba04 <configure_gpio_pins>:
}
//! [setup_callback]

//! [setup]
void configure_gpio_pins(void)
{
1000ba04:	b570      	push	{r4, r5, r6, lr}
1000ba06:	b082      	sub	sp, #8
	//! [setup_1]
	struct gpio_config config_gpio_pin;
	//! [setup_1]
	//! [setup_2]
	gpio_get_config_defaults(&config_gpio_pin);
1000ba08:	ac01      	add	r4, sp, #4
1000ba0a:	0020      	movs	r0, r4
1000ba0c:	4b07      	ldr	r3, [pc, #28]	; (1000ba2c <configure_gpio_pins+0x28>)
1000ba0e:	4798      	blx	r3
	//! [setup_2]

	//! [setup_3]
	config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
1000ba10:	2300      	movs	r3, #0
1000ba12:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_UP;
1000ba14:	2601      	movs	r6, #1
1000ba16:	7066      	strb	r6, [r4, #1]
	//! [setup_3]
	//! [setup_4]
	gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000ba18:	0021      	movs	r1, r4
1000ba1a:	2017      	movs	r0, #23
1000ba1c:	4d04      	ldr	r5, [pc, #16]	; (1000ba30 <configure_gpio_pins+0x2c>)
1000ba1e:	47a8      	blx	r5
	//! [setup_4]

	//! [setup_5]
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000ba20:	7026      	strb	r6, [r4, #0]
	//! [setup_5]
	//! [setup_6]
	gpio_pin_set_config(LED_0_PIN, &config_gpio_pin);
1000ba22:	0021      	movs	r1, r4
1000ba24:	2016      	movs	r0, #22
1000ba26:	47a8      	blx	r5
	//! [setup_6]
}
1000ba28:	b002      	add	sp, #8
1000ba2a:	bd70      	pop	{r4, r5, r6, pc}
1000ba2c:	10008a81 	.word	0x10008a81
1000ba30:	10008a91 	.word	0x10008a91

1000ba34 <main>:
	}
}


int main (void)
{
1000ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba36:	465f      	mov	r7, fp
1000ba38:	4656      	mov	r6, sl
1000ba3a:	464d      	mov	r5, r9
1000ba3c:	4644      	mov	r4, r8
1000ba3e:	b4f0      	push	{r4, r5, r6, r7}
1000ba40:	b08f      	sub	sp, #60	; 0x3c
	platform_driver_init();
1000ba42:	4b7c      	ldr	r3, [pc, #496]	; (1000bc34 <main+0x200>)
1000ba44:	4798      	blx	r3
	acquire_sleep_lock();
1000ba46:	4b7c      	ldr	r3, [pc, #496]	; (1000bc38 <main+0x204>)
1000ba48:	4798      	blx	r3
	/* Initialize serial console */
	serial_console_init();
1000ba4a:	4b7c      	ldr	r3, [pc, #496]	; (1000bc3c <main+0x208>)
1000ba4c:	4798      	blx	r3
	/* Register the callback */
	hw_timer_register_callback(timer_callback_handler);
1000ba4e:	487c      	ldr	r0, [pc, #496]	; (1000bc40 <main+0x20c>)
1000ba50:	4b7c      	ldr	r3, [pc, #496]	; (1000bc44 <main+0x210>)
1000ba52:	4798      	blx	r3
	/* Start timer */
	hw_timer_start(1);
1000ba54:	2001      	movs	r0, #1
1000ba56:	4b7c      	ldr	r3, [pc, #496]	; (1000bc48 <main+0x214>)
1000ba58:	4798      	blx	r3

	/* Hardware timer */
	hw_timer_init();
1000ba5a:	4b7c      	ldr	r3, [pc, #496]	; (1000bc4c <main+0x218>)
1000ba5c:	4798      	blx	r3
	//! [setup_config]
	struct uart_config config_uart;
	//! [setup_config]

	//! [setup_config_defaults]
	uart_get_config_defaults(&config_uart);
1000ba5e:	a804      	add	r0, sp, #16
1000ba60:	4b7b      	ldr	r3, [pc, #492]	; (1000bc50 <main+0x21c>)
1000ba62:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_uart.baud_rate = 9600;
1000ba64:	2396      	movs	r3, #150	; 0x96
1000ba66:	019b      	lsls	r3, r3, #6
1000ba68:	9304      	str	r3, [sp, #16]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000ba6a:	2302      	movs	r3, #2
1000ba6c:	9306      	str	r3, [sp, #24]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000ba6e:	2203      	movs	r2, #3
1000ba70:	9207      	str	r2, [sp, #28]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000ba72:	3201      	adds	r2, #1
1000ba74:	9208      	str	r2, [sp, #32]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000ba76:	3201      	adds	r2, #1
1000ba78:	9209      	str	r2, [sp, #36]	; 0x24
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000ba7a:	930a      	str	r3, [sp, #40]	; 0x28
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000ba7c:	930b      	str	r3, [sp, #44]	; 0x2c
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000ba7e:	930c      	str	r3, [sp, #48]	; 0x30
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000ba80:	930d      	str	r3, [sp, #52]	; 0x34
	//! [setup_change_config]

	//! [setup_set_config]
	while (uart_init(&uart_instance,
1000ba82:	4d74      	ldr	r5, [pc, #464]	; (1000bc54 <main+0x220>)
1000ba84:	4c74      	ldr	r4, [pc, #464]	; (1000bc58 <main+0x224>)
1000ba86:	aa04      	add	r2, sp, #16
1000ba88:	4974      	ldr	r1, [pc, #464]	; (1000bc5c <main+0x228>)
1000ba8a:	0028      	movs	r0, r5
1000ba8c:	47a0      	blx	r4
1000ba8e:	2800      	cmp	r0, #0
1000ba90:	d1f9      	bne.n	1000ba86 <main+0x52>
	EDBG_CDC_MODULE, &config_uart) != STATUS_OK) {
	}
	//! [setup_set_config]

	//! [enable_interrupt]
	uart_enable_transmit_dma(&uart_instance);
1000ba92:	4b70      	ldr	r3, [pc, #448]	; (1000bc54 <main+0x220>)
1000ba94:	469a      	mov	sl, r3
1000ba96:	0018      	movs	r0, r3
1000ba98:	4b71      	ldr	r3, [pc, #452]	; (1000bc60 <main+0x22c>)
1000ba9a:	4798      	blx	r3
	uart_enable_receive_dma(&uart_instance);
1000ba9c:	4650      	mov	r0, sl
1000ba9e:	4b71      	ldr	r3, [pc, #452]	; (1000bc64 <main+0x230>)
1000baa0:	4798      	blx	r3
	/* Do the initialization for the GPIO */
	configure_usart();
	//! [setup_usart]

	// Configure the GPIO pins for the LED
	configure_gpio_pins();
1000baa2:	4b71      	ldr	r3, [pc, #452]	; (1000bc68 <main+0x234>)
1000baa4:	4798      	blx	r3
	//! [setup_tx_1]
	struct dma_resource_config config;
	//! [setup_tx_1]

	//! [setup_tx_2]
	dma_get_config_defaults(&config);
1000baa6:	ac04      	add	r4, sp, #16
1000baa8:	0020      	movs	r0, r4
1000baaa:	4d70      	ldr	r5, [pc, #448]	; (1000bc6c <main+0x238>)
1000baac:	47a8      	blx	r5
	//! [setup_tx_2]

	//! [setup_tx_3]
	config.des.periph = UART0TX_DMA_PERIPHERAL;
1000baae:	2302      	movs	r3, #2
1000bab0:	2202      	movs	r2, #2
1000bab2:	4691      	mov	r9, r2
1000bab4:	7323      	strb	r3, [r4, #12]
	config.des.enable_inc_addr = false;
1000bab6:	2600      	movs	r6, #0
1000bab8:	72e6      	strb	r6, [r4, #11]
	config.src.periph = UART0TX_DMA_PERIPHERAL;
1000baba:	70e3      	strb	r3, [r4, #3]
	//! [setup_tx_3]

	//! [setup_tx_4]
	dma_allocate(resource, &config);
1000babc:	4f6c      	ldr	r7, [pc, #432]	; (1000bc70 <main+0x23c>)
1000babe:	0021      	movs	r1, r4
1000bac0:	0038      	movs	r0, r7
1000bac2:	4b6c      	ldr	r3, [pc, #432]	; (1000bc74 <main+0x240>)
1000bac4:	469b      	mov	fp, r3
1000bac6:	4798      	blx	r3
	//! [setup_rx_1]
	struct dma_resource_config config;
	//! [setup_rx_1]

	//! [setup_rx_2]
	dma_get_config_defaults(&config);
1000bac8:	0020      	movs	r0, r4
1000baca:	47a8      	blx	r5
	//! [setup_rx_2]

	//! [setup_rx_3]
	config.src.periph = UART0RX_DMA_PERIPHERAL;
1000bacc:	2301      	movs	r3, #1
1000bace:	4698      	mov	r8, r3
1000bad0:	2501      	movs	r5, #1
1000bad2:	70e3      	strb	r3, [r4, #3]
	config.src.enable_inc_addr = false;
1000bad4:	70a6      	strb	r6, [r4, #2]
	config.src.periph_delay = 1;
1000bad6:	7123      	strb	r3, [r4, #4]
	//! [setup_rx_3]

	//! [setup_rx_4]
	dma_allocate(resource, &config);
1000bad8:	4e67      	ldr	r6, [pc, #412]	; (1000bc78 <main+0x244>)
1000bada:	0021      	movs	r1, r4
1000badc:	0030      	movs	r0, r6
1000bade:	47d8      	blx	fp
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000bae0:	4966      	ldr	r1, [pc, #408]	; (1000bc7c <main+0x248>)
1000bae2:	7b0b      	ldrb	r3, [r1, #12]
1000bae4:	432b      	orrs	r3, r5
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000bae6:	464a      	mov	r2, r9
1000bae8:	4313      	orrs	r3, r2
1000baea:	730b      	strb	r3, [r1, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000baec:	2303      	movs	r3, #3
1000baee:	469c      	mov	ip, r3
1000baf0:	68cb      	ldr	r3, [r1, #12]
1000baf2:	4662      	mov	r2, ip
1000baf4:	4013      	ands	r3, r2
1000baf6:	60cb      	str	r3, [r1, #12]
	//! [setup_tx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000baf8:	2305      	movs	r3, #5
1000bafa:	469b      	mov	fp, r3
1000bafc:	608b      	str	r3, [r1, #8]
	descriptor->read_start_addr = (uint32_t)string_tx;
1000bafe:	4b60      	ldr	r3, [pc, #384]	; (1000bc80 <main+0x24c>)
1000bb00:	600b      	str	r3, [r1, #0]
	descriptor->write_start_addr =
	(uint32_t)(&uart_instance.hw->TRANSMIT_DATA.reg);
1000bb02:	4653      	mov	r3, sl
1000bb04:	681b      	ldr	r3, [r3, #0]
	//! [setup_tx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr = (uint32_t)string_tx;
	descriptor->write_start_addr =
1000bb06:	604b      	str	r3, [r1, #4]
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000bb08:	4c5e      	ldr	r4, [pc, #376]	; (1000bc84 <main+0x250>)
1000bb0a:	7b22      	ldrb	r2, [r4, #12]
1000bb0c:	432a      	orrs	r2, r5
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000bb0e:	4648      	mov	r0, r9
1000bb10:	4302      	orrs	r2, r0
1000bb12:	7322      	strb	r2, [r4, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000bb14:	4662      	mov	r2, ip
1000bb16:	68e0      	ldr	r0, [r4, #12]
1000bb18:	4002      	ands	r2, r0
1000bb1a:	60e2      	str	r2, [r4, #12]
	//! [setup_rx_5]
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
1000bb1c:	465a      	mov	r2, fp
1000bb1e:	60a2      	str	r2, [r4, #8]
	descriptor->read_start_addr =
	(uint32_t)(&uart_instance.hw->RECEIVE_DATA.reg);
1000bb20:	3310      	adds	r3, #16
	dma_descriptor_get_config_defaults(descriptor);
	//! [setup_rx_5]

	//! [setup_tx_6]
	descriptor->buffer_size = BUFFER_LEN;
	descriptor->read_start_addr =
1000bb22:	6023      	str	r3, [r4, #0]
	(uint32_t)(&uart_instance.hw->RECEIVE_DATA.reg);
	descriptor->write_start_addr = (uint32_t)string_rx;
1000bb24:	4b58      	ldr	r3, [pc, #352]	; (1000bc88 <main+0x254>)
1000bb26:	6063      	str	r3, [r4, #4]
	setup_transfer_descriptor_tx(&example_descriptor_tx);
	setup_transfer_descriptor_rx(&example_descriptor_rx);
	//! [setup_transfer_descriptor]

	//! [add_descriptor_to_resource]
	dma_add_descriptor(&uart_dma_resource_tx, &example_descriptor_tx);
1000bb28:	0038      	movs	r0, r7
1000bb2a:	4b58      	ldr	r3, [pc, #352]	; (1000bc8c <main+0x258>)
1000bb2c:	4699      	mov	r9, r3
1000bb2e:	4798      	blx	r3
	dma_add_descriptor(&uart_dma_resource_rx, &example_descriptor_rx);
1000bb30:	0021      	movs	r1, r4
1000bb32:	0030      	movs	r0, r6
1000bb34:	47c8      	blx	r9
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
	resource->callback[type] = callback;
1000bb36:	4b56      	ldr	r3, [pc, #344]	; (1000bc90 <main+0x25c>)
1000bb38:	607b      	str	r3, [r7, #4]
1000bb3a:	4b56      	ldr	r3, [pc, #344]	; (1000bc94 <main+0x260>)
1000bb3c:	6073      	str	r3, [r6, #4]
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
	resource->callback_enable |= 1 << type;
1000bb3e:	2324      	movs	r3, #36	; 0x24
1000bb40:	5cfa      	ldrb	r2, [r7, r3]
1000bb42:	432a      	orrs	r2, r5
1000bb44:	54fa      	strb	r2, [r7, r3]
1000bb46:	5cf2      	ldrb	r2, [r6, r3]
1000bb48:	4315      	orrs	r5, r2
1000bb4a:	54f5      	strb	r5, [r6, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bb4c:	2280      	movs	r2, #128	; 0x80
1000bb4e:	0212      	lsls	r2, r2, #8
1000bb50:	4b51      	ldr	r3, [pc, #324]	; (1000bc98 <main+0x264>)
1000bb52:	601a      	str	r2, [r3, #0]
	//! [main_1]
	//for(int i=0; i<2; i++) {
	//dma_start_transfer_job(&uart_dma_resource_tx);
	//dma_start_transfer_job(&uart_dma_resource_rx);
	
	printf("\n\rSAMB11 BLE Application");
1000bb54:	4851      	ldr	r0, [pc, #324]	; (1000bc9c <main+0x268>)
1000bb56:	4c52      	ldr	r4, [pc, #328]	; (1000bca0 <main+0x26c>)
1000bb58:	47a0      	blx	r4
	/* initialize the BLE chip and Set the Device Address */
	ble_device_init(NULL); 
1000bb5a:	2000      	movs	r0, #0
1000bb5c:	4b51      	ldr	r3, [pc, #324]	; (1000bca4 <main+0x270>)
1000bb5e:	4798      	blx	r3
	
	/* Initialize the temperature sensor */
	at30tse_init();
1000bb60:	4b51      	ldr	r3, [pc, #324]	; (1000bca8 <main+0x274>)
1000bb62:	4798      	blx	r3
	/* configure the temperature sensor ADC */
	at30tse_write_config_register(AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
1000bb64:	20c0      	movs	r0, #192	; 0xc0
1000bb66:	01c0      	lsls	r0, r0, #7
1000bb68:	4b50      	ldr	r3, [pc, #320]	; (1000bcac <main+0x278>)
1000bb6a:	4798      	blx	r3
};

/* Register GAP callbacks at BLE manager level*/
static void htp_init (void)
{
	printf("\nAssignment 4.1: Init Health temperature service ");
1000bb6c:	4850      	ldr	r0, [pc, #320]	; (1000bcb0 <main+0x27c>)
1000bb6e:	47a0      	blx	r4
	/* Create htp service in GATT database*/
	status = at_ble_htpt_create_db(
1000bb70:	4b50      	ldr	r3, [pc, #320]	; (1000bcb4 <main+0x280>)
1000bb72:	9302      	str	r3, [sp, #8]
1000bb74:	230c      	movs	r3, #12
1000bb76:	9301      	str	r3, [sp, #4]
1000bb78:	4643      	mov	r3, r8
1000bb7a:	9300      	str	r3, [sp, #0]
1000bb7c:	331d      	adds	r3, #29
1000bb7e:	2201      	movs	r2, #1
1000bb80:	2101      	movs	r1, #1
1000bb82:	2001      	movs	r0, #1
1000bb84:	4c4c      	ldr	r4, [pc, #304]	; (1000bcb8 <main+0x284>)
1000bb86:	47a0      	blx	r4
1000bb88:	4b4c      	ldr	r3, [pc, #304]	; (1000bcbc <main+0x288>)
1000bb8a:	7018      	strb	r0, [r3, #0]
	1,
	30,
	1,
	HTPT_AUTH,
	&htpt_conn_handle);
	if (status != AT_BLE_SUCCESS){
1000bb8c:	781b      	ldrb	r3, [r3, #0]
1000bb8e:	2b00      	cmp	r3, #0
1000bb90:	d003      	beq.n	1000bb9a <main+0x166>
		printf("HTP Data Base creation failed");
1000bb92:	484b      	ldr	r0, [pc, #300]	; (1000bcc0 <main+0x28c>)
1000bb94:	4b42      	ldr	r3, [pc, #264]	; (1000bca0 <main+0x26c>)
1000bb96:	4798      	blx	r3
1000bb98:	e7fe      	b.n	1000bb98 <main+0x164>
	//htp_temperature_read();
	/* Initialize the htp service */
	htp_init();
	
	/* Start Advertising process */
	ble_advertise();
1000bb9a:	4b4a      	ldr	r3, [pc, #296]	; (1000bcc4 <main+0x290>)
1000bb9c:	4798      	blx	r3
	
	dma_start_transfer_job(&uart_dma_resource_rx);
1000bb9e:	4836      	ldr	r0, [pc, #216]	; (1000bc78 <main+0x244>)
1000bba0:	4b49      	ldr	r3, [pc, #292]	; (1000bcc8 <main+0x294>)
1000bba2:	4798      	blx	r3


static void register_ble_callbacks (void)
{
	/* Register GAP Callbacks */
	printf("\nAssignment 3.2: Register bluetooth events callbacks");
1000bba4:	4849      	ldr	r0, [pc, #292]	; (1000bccc <main+0x298>)
1000bba6:	4b3e      	ldr	r3, [pc, #248]	; (1000bca0 <main+0x26c>)
1000bba8:	4798      	blx	r3
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000bbaa:	4a49      	ldr	r2, [pc, #292]	; (1000bcd0 <main+0x29c>)
1000bbac:	2100      	movs	r1, #0
1000bbae:	2000      	movs	r0, #0
1000bbb0:	4b48      	ldr	r3, [pc, #288]	; (1000bcd4 <main+0x2a0>)
1000bbb2:	4798      	blx	r3
1000bbb4:	4b41      	ldr	r3, [pc, #260]	; (1000bcbc <main+0x288>)
1000bbb6:	7018      	strb	r0, [r3, #0]
	BLE_GAP_EVENT_TYPE,app_gap_cb);
	if (status != true) {
1000bbb8:	781b      	ldrb	r3, [r3, #0]
1000bbba:	2b01      	cmp	r3, #1
1000bbbc:	d002      	beq.n	1000bbc4 <main+0x190>
		printf("\n##Error when Registering SAMB11 gap callbacks");
1000bbbe:	4846      	ldr	r0, [pc, #280]	; (1000bcd8 <main+0x2a4>)
1000bbc0:	4b37      	ldr	r3, [pc, #220]	; (1000bca0 <main+0x26c>)
1000bbc2:	4798      	blx	r3
	}
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000bbc4:	4a45      	ldr	r2, [pc, #276]	; (1000bcdc <main+0x2a8>)
1000bbc6:	2104      	movs	r1, #4
1000bbc8:	2000      	movs	r0, #0
1000bbca:	4b42      	ldr	r3, [pc, #264]	; (1000bcd4 <main+0x2a0>)
1000bbcc:	4798      	blx	r3
1000bbce:	4b3b      	ldr	r3, [pc, #236]	; (1000bcbc <main+0x288>)
1000bbd0:	7018      	strb	r0, [r3, #0]
	BLE_GATT_HTPT_EVENT_TYPE,app_htpt_handle);
	if (status != true) {
1000bbd2:	781b      	ldrb	r3, [r3, #0]
1000bbd4:	2b01      	cmp	r3, #1
1000bbd6:	d002      	beq.n	1000bbde <main+0x1aa>
		printf("\n##Error when Registering SAMB11 htpt callbacks");
1000bbd8:	4841      	ldr	r0, [pc, #260]	; (1000bce0 <main+0x2ac>)
1000bbda:	4b31      	ldr	r3, [pc, #196]	; (1000bca0 <main+0x26c>)
1000bbdc:	4798      	blx	r3

	/* Register Bluetooth events Callbacks */
	register_ble_callbacks();
	
	while(true) {
		ble_event_task(655);
1000bbde:	4f41      	ldr	r7, [pc, #260]	; (1000bce4 <main+0x2b0>)
		if (Timer_Flag & Temp_Notification_Flag)
1000bbe0:	4e41      	ldr	r6, [pc, #260]	; (1000bce8 <main+0x2b4>)
1000bbe2:	4d42      	ldr	r5, [pc, #264]	; (1000bcec <main+0x2b8>)

	/* Register Bluetooth events Callbacks */
	register_ble_callbacks();
	
	while(true) {
		ble_event_task(655);
1000bbe4:	4842      	ldr	r0, [pc, #264]	; (1000bcf0 <main+0x2bc>)
1000bbe6:	47b8      	blx	r7
		if (Timer_Flag & Temp_Notification_Flag)
1000bbe8:	7832      	ldrb	r2, [r6, #0]
1000bbea:	782b      	ldrb	r3, [r5, #0]
1000bbec:	b2db      	uxtb	r3, r3
1000bbee:	2a00      	cmp	r2, #0
1000bbf0:	d0f8      	beq.n	1000bbe4 <main+0x1b0>
1000bbf2:	2b00      	cmp	r3, #0
1000bbf4:	d0f6      	beq.n	1000bbe4 <main+0x1b0>
	temp = &string_rx;
	#ifdef HTPT_FAHRENHEIT
	temperature = (((temperature * 9.0)/5.0) + 32.0);
	#endif
	/* Read Temperature Value from IO1 Xplained Pro */
	timestamp.day = 1;
1000bbf6:	ad04      	add	r5, sp, #16
1000bbf8:	2401      	movs	r4, #1
1000bbfa:	70ec      	strb	r4, [r5, #3]
	timestamp.hour = 9;
1000bbfc:	2309      	movs	r3, #9
1000bbfe:	712b      	strb	r3, [r5, #4]
	timestamp.min = 2;
1000bc00:	3b07      	subs	r3, #7
1000bc02:	716b      	strb	r3, [r5, #5]
	timestamp.month = 8;
1000bc04:	3306      	adds	r3, #6
1000bc06:	70ab      	strb	r3, [r5, #2]
	timestamp.sec = 36;
1000bc08:	331c      	adds	r3, #28
1000bc0a:	71ab      	strb	r3, [r5, #6]
	timestamp.year = 15;
1000bc0c:	3b15      	subs	r3, #21
1000bc0e:	802b      	strh	r3, [r5, #0]
	/* Read Temperature Value from IO1 Xplained Pro */
	if(at_ble_htpt_temp_send(convert_ieee754_ieee11073_float((float)*temp),
1000bc10:	4938      	ldr	r1, [pc, #224]	; (1000bcf4 <main+0x2c0>)
1000bc12:	4b1d      	ldr	r3, [pc, #116]	; (1000bc88 <main+0x254>)
1000bc14:	6818      	ldr	r0, [r3, #0]
1000bc16:	4b38      	ldr	r3, [pc, #224]	; (1000bcf8 <main+0x2c4>)
1000bc18:	4798      	blx	r3
1000bc1a:	4b38      	ldr	r3, [pc, #224]	; (1000bcfc <main+0x2c8>)
1000bc1c:	4798      	blx	r3
1000bc1e:	23ff      	movs	r3, #255	; 0xff
1000bc20:	061b      	lsls	r3, r3, #24
1000bc22:	4318      	orrs	r0, r3
1000bc24:	9400      	str	r4, [sp, #0]
1000bc26:	2301      	movs	r3, #1
1000bc28:	2204      	movs	r2, #4
1000bc2a:	0029      	movs	r1, r5
1000bc2c:	4d34      	ldr	r5, [pc, #208]	; (1000bd00 <main+0x2cc>)
1000bc2e:	47a8      	blx	r5
1000bc30:	e7d7      	b.n	1000bbe2 <main+0x1ae>
1000bc32:	46c0      	nop			; (mov r8, r8)
1000bc34:	1000b1b9 	.word	0x1000b1b9
1000bc38:	1000b6cd 	.word	0x1000b6cd
1000bc3c:	1000aead 	.word	0x1000aead
1000bc40:	1000b90d 	.word	0x1000b90d
1000bc44:	1000adb9 	.word	0x1000adb9
1000bc48:	1000aded 	.word	0x1000aded
1000bc4c:	1000ad8d 	.word	0x1000ad8d
1000bc50:	10009821 	.word	0x10009821
1000bc54:	1001472c 	.word	0x1001472c
1000bc58:	1000984d 	.word	0x1000984d
1000bc5c:	40004000 	.word	0x40004000
1000bc60:	10009aa9 	.word	0x10009aa9
1000bc64:	10009ae1 	.word	0x10009ae1
1000bc68:	1000ba05 	.word	0x1000ba05
1000bc6c:	10008295 	.word	0x10008295
1000bc70:	10014a84 	.word	0x10014a84
1000bc74:	100083e5 	.word	0x100083e5
1000bc78:	10014ab4 	.word	0x10014ab4
1000bc7c:	10014ae4 	.word	0x10014ae4
1000bc80:	10013dd8 	.word	0x10013dd8
1000bc84:	10014a74 	.word	0x10014a74
1000bc88:	10013dd0 	.word	0x10013dd0
1000bc8c:	100082c5 	.word	0x100082c5
1000bc90:	1000b8f9 	.word	0x1000b8f9
1000bc94:	1000b8c1 	.word	0x1000b8c1
1000bc98:	e000e100 	.word	0xe000e100
1000bc9c:	100120d4 	.word	0x100120d4
1000bca0:	10010379 	.word	0x10010379
1000bca4:	1000a59d 	.word	0x1000a59d
1000bca8:	100080e9 	.word	0x100080e9
1000bcac:	10008161 	.word	0x10008161
1000bcb0:	100120f0 	.word	0x100120f0
1000bcb4:	10014a70 	.word	0x10014a70
1000bcb8:	1000d061 	.word	0x1000d061
1000bcbc:	10014af4 	.word	0x10014af4
1000bcc0:	10012124 	.word	0x10012124
1000bcc4:	1000b92d 	.word	0x1000b92d
1000bcc8:	1000836d 	.word	0x1000836d
1000bccc:	10012144 	.word	0x10012144
1000bcd0:	10011f38 	.word	0x10011f38
1000bcd4:	1000a4cd 	.word	0x1000a4cd
1000bcd8:	1001217c 	.word	0x1001217c
1000bcdc:	100121dc 	.word	0x100121dc
1000bce0:	100121ac 	.word	0x100121ac
1000bce4:	1000ace1 	.word	0x1000ace1
1000bce8:	10013dcc 	.word	0x10013dcc
1000bcec:	10013dd5 	.word	0x10013dd5
1000bcf0:	0000028f 	.word	0x0000028f
1000bcf4:	41200000 	.word	0x41200000
1000bcf8:	1000ec55 	.word	0x1000ec55
1000bcfc:	1000ebe9 	.word	0x1000ebe9
1000bd00:	1000d08d 	.word	0x1000d08d

1000bd04 <internal_event_post>:
1000bd04:	b570      	push	{r4, r5, r6, lr}
1000bd06:	4d12      	ldr	r5, [pc, #72]	; (1000bd50 <internal_event_post+0x4c>)
1000bd08:	682c      	ldr	r4, [r5, #0]
1000bd0a:	2c00      	cmp	r4, #0
1000bd0c:	d014      	beq.n	1000bd38 <internal_event_post+0x34>
1000bd0e:	6826      	ldr	r6, [r4, #0]
1000bd10:	60e2      	str	r2, [r4, #12]
1000bd12:	602e      	str	r6, [r5, #0]
1000bd14:	2500      	movs	r5, #0
1000bd16:	4a0f      	ldr	r2, [pc, #60]	; (1000bd54 <internal_event_post+0x50>)
1000bd18:	8123      	strh	r3, [r4, #8]
1000bd1a:	6813      	ldr	r3, [r2, #0]
1000bd1c:	6025      	str	r5, [r4, #0]
1000bd1e:	80a0      	strh	r0, [r4, #4]
1000bd20:	80e1      	strh	r1, [r4, #6]
1000bd22:	42ab      	cmp	r3, r5
1000bd24:	d101      	bne.n	1000bd2a <internal_event_post+0x26>
1000bd26:	6014      	str	r4, [r2, #0]
1000bd28:	e011      	b.n	1000bd4e <internal_event_post+0x4a>
1000bd2a:	681a      	ldr	r2, [r3, #0]
1000bd2c:	2a00      	cmp	r2, #0
1000bd2e:	d001      	beq.n	1000bd34 <internal_event_post+0x30>
1000bd30:	1c13      	adds	r3, r2, #0
1000bd32:	e7fa      	b.n	1000bd2a <internal_event_post+0x26>
1000bd34:	601c      	str	r4, [r3, #0]
1000bd36:	e00a      	b.n	1000bd4e <internal_event_post+0x4a>
1000bd38:	b2c4      	uxtb	r4, r0
1000bd3a:	2c00      	cmp	r4, #0
1000bd3c:	d107      	bne.n	1000bd4e <internal_event_post+0x4a>
1000bd3e:	4c06      	ldr	r4, [pc, #24]	; (1000bd58 <internal_event_post+0x54>)
1000bd40:	60e2      	str	r2, [r4, #12]
1000bd42:	2201      	movs	r2, #1
1000bd44:	8123      	strh	r3, [r4, #8]
1000bd46:	4b05      	ldr	r3, [pc, #20]	; (1000bd5c <internal_event_post+0x58>)
1000bd48:	80a0      	strh	r0, [r4, #4]
1000bd4a:	80e1      	strh	r1, [r4, #6]
1000bd4c:	701a      	strb	r2, [r3, #0]
1000bd4e:	bd70      	pop	{r4, r5, r6, pc}
1000bd50:	10013df8 	.word	0x10013df8
1000bd54:	10013df4 	.word	0x10013df4
1000bd58:	10013de0 	.word	0x10013de0
1000bd5c:	10013df0 	.word	0x10013df0

1000bd60 <internal_event_init>:
1000bd60:	b510      	push	{r4, lr}
1000bd62:	4b08      	ldr	r3, [pc, #32]	; (1000bd84 <internal_event_init+0x24>)
1000bd64:	0900      	lsrs	r0, r0, #4
1000bd66:	0100      	lsls	r0, r0, #4
1000bd68:	681a      	ldr	r2, [r3, #0]
1000bd6a:	1808      	adds	r0, r1, r0
1000bd6c:	4281      	cmp	r1, r0
1000bd6e:	d003      	beq.n	1000bd78 <internal_event_init+0x18>
1000bd70:	600a      	str	r2, [r1, #0]
1000bd72:	1c0a      	adds	r2, r1, #0
1000bd74:	3110      	adds	r1, #16
1000bd76:	e7f9      	b.n	1000bd6c <internal_event_init+0xc>
1000bd78:	601a      	str	r2, [r3, #0]
1000bd7a:	2200      	movs	r2, #0
1000bd7c:	4b02      	ldr	r3, [pc, #8]	; (1000bd88 <internal_event_init+0x28>)
1000bd7e:	601a      	str	r2, [r3, #0]
1000bd80:	bd10      	pop	{r4, pc}
1000bd82:	46c0      	nop			; (mov r8, r8)
1000bd84:	10013df8 	.word	0x10013df8
1000bd88:	10013df4 	.word	0x10013df4

1000bd8c <special_events_handler>:
1000bd8c:	b538      	push	{r3, r4, r5, lr}
1000bd8e:	4c1b      	ldr	r4, [pc, #108]	; (1000bdfc <special_events_handler+0x70>)
1000bd90:	1c03      	adds	r3, r0, #0
1000bd92:	8825      	ldrh	r5, [r4, #0]
1000bd94:	1c08      	adds	r0, r1, #0
1000bd96:	1c21      	adds	r1, r4, #0
1000bd98:	429d      	cmp	r5, r3
1000bd9a:	d107      	bne.n	1000bdac <special_events_handler+0x20>
1000bd9c:	88a5      	ldrh	r5, [r4, #4]
1000bd9e:	4285      	cmp	r5, r0
1000bda0:	d104      	bne.n	1000bdac <special_events_handler+0x20>
1000bda2:	2301      	movs	r3, #1
1000bda4:	425b      	negs	r3, r3
1000bda6:	8023      	strh	r3, [r4, #0]
1000bda8:	60a2      	str	r2, [r4, #8]
1000bdaa:	e009      	b.n	1000bdc0 <special_events_handler+0x34>
1000bdac:	884c      	ldrh	r4, [r1, #2]
1000bdae:	429c      	cmp	r4, r3
1000bdb0:	d10a      	bne.n	1000bdc8 <special_events_handler+0x3c>
1000bdb2:	888c      	ldrh	r4, [r1, #4]
1000bdb4:	4284      	cmp	r4, r0
1000bdb6:	d107      	bne.n	1000bdc8 <special_events_handler+0x3c>
1000bdb8:	2301      	movs	r3, #1
1000bdba:	425b      	negs	r3, r3
1000bdbc:	804b      	strh	r3, [r1, #2]
1000bdbe:	608a      	str	r2, [r1, #8]
1000bdc0:	4b0f      	ldr	r3, [pc, #60]	; (1000be00 <special_events_handler+0x74>)
1000bdc2:	4798      	blx	r3
1000bdc4:	2001      	movs	r0, #1
1000bdc6:	e017      	b.n	1000bdf8 <special_events_handler+0x6c>
1000bdc8:	490e      	ldr	r1, [pc, #56]	; (1000be04 <special_events_handler+0x78>)
1000bdca:	428b      	cmp	r3, r1
1000bdcc:	d00e      	beq.n	1000bdec <special_events_handler+0x60>
1000bdce:	490e      	ldr	r1, [pc, #56]	; (1000be08 <special_events_handler+0x7c>)
1000bdd0:	428b      	cmp	r3, r1
1000bdd2:	d007      	beq.n	1000bde4 <special_events_handler+0x58>
1000bdd4:	490d      	ldr	r1, [pc, #52]	; (1000be0c <special_events_handler+0x80>)
1000bdd6:	2000      	movs	r0, #0
1000bdd8:	428b      	cmp	r3, r1
1000bdda:	d10d      	bne.n	1000bdf8 <special_events_handler+0x6c>
1000bddc:	1c10      	adds	r0, r2, #0
1000bdde:	4b0c      	ldr	r3, [pc, #48]	; (1000be10 <special_events_handler+0x84>)
1000bde0:	4798      	blx	r3
1000bde2:	e7ef      	b.n	1000bdc4 <special_events_handler+0x38>
1000bde4:	1c11      	adds	r1, r2, #0
1000bde6:	4b0b      	ldr	r3, [pc, #44]	; (1000be14 <special_events_handler+0x88>)
1000bde8:	2200      	movs	r2, #0
1000bdea:	e002      	b.n	1000bdf2 <special_events_handler+0x66>
1000bdec:	1c11      	adds	r1, r2, #0
1000bdee:	2200      	movs	r2, #0
1000bdf0:	4b09      	ldr	r3, [pc, #36]	; (1000be18 <special_events_handler+0x8c>)
1000bdf2:	4798      	blx	r3
1000bdf4:	4243      	negs	r3, r0
1000bdf6:	4158      	adcs	r0, r3
1000bdf8:	bd38      	pop	{r3, r4, r5, pc}
1000bdfa:	46c0      	nop			; (mov r8, r8)
1000bdfc:	10014af8 	.word	0x10014af8
1000be00:	1000d199 	.word	0x1000d199
1000be04:	00000e13 	.word	0x00000e13
1000be08:	00000e15 	.word	0x00000e15
1000be0c:	00000e01 	.word	0x00000e01
1000be10:	1000d509 	.word	0x1000d509
1000be14:	1000d6c9 	.word	0x1000d6c9
1000be18:	1000d7a1 	.word	0x1000d7a1

1000be1c <at_ble_event_get>:
1000be1c:	2300      	movs	r3, #0
1000be1e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be20:	b087      	sub	sp, #28
1000be22:	9204      	str	r2, [sp, #16]
1000be24:	7003      	strb	r3, [r0, #0]
1000be26:	9b04      	ldr	r3, [sp, #16]
1000be28:	9003      	str	r0, [sp, #12]
1000be2a:	3b01      	subs	r3, #1
1000be2c:	1c0d      	adds	r5, r1, #0
1000be2e:	9305      	str	r3, [sp, #20]
1000be30:	3303      	adds	r3, #3
1000be32:	d802      	bhi.n	1000be3a <at_ble_event_get+0x1e>
1000be34:	9804      	ldr	r0, [sp, #16]
1000be36:	4bae      	ldr	r3, [pc, #696]	; (1000c0f0 <at_ble_event_get+0x2d4>)
1000be38:	4798      	blx	r3
1000be3a:	9b05      	ldr	r3, [sp, #20]
1000be3c:	4cad      	ldr	r4, [pc, #692]	; (1000c0f4 <at_ble_event_get+0x2d8>)
1000be3e:	3303      	adds	r3, #3
1000be40:	d902      	bls.n	1000be48 <at_ble_event_get+0x2c>
1000be42:	2300      	movs	r3, #0
1000be44:	9302      	str	r3, [sp, #8]
1000be46:	e015      	b.n	1000be74 <at_ble_event_get+0x58>
1000be48:	2300      	movs	r3, #0
1000be4a:	9302      	str	r3, [sp, #8]
1000be4c:	6823      	ldr	r3, [r4, #0]
1000be4e:	2b00      	cmp	r3, #0
1000be50:	d113      	bne.n	1000be7a <at_ble_event_get+0x5e>
1000be52:	9b02      	ldr	r3, [sp, #8]
1000be54:	2bd0      	cmp	r3, #208	; 0xd0
1000be56:	d100      	bne.n	1000be5a <at_ble_event_get+0x3e>
1000be58:	e2da      	b.n	1000c410 <at_ble_event_get+0x5f4>
1000be5a:	9804      	ldr	r0, [sp, #16]
1000be5c:	4ba6      	ldr	r3, [pc, #664]	; (1000c0f8 <at_ble_event_get+0x2dc>)
1000be5e:	4798      	blx	r3
1000be60:	9002      	str	r0, [sp, #8]
1000be62:	2802      	cmp	r0, #2
1000be64:	d1f2      	bne.n	1000be4c <at_ble_event_get+0x30>
1000be66:	e03f      	b.n	1000bee8 <at_ble_event_get+0xcc>
1000be68:	9804      	ldr	r0, [sp, #16]
1000be6a:	4ba3      	ldr	r3, [pc, #652]	; (1000c0f8 <at_ble_event_get+0x2dc>)
1000be6c:	4798      	blx	r3
1000be6e:	9002      	str	r0, [sp, #8]
1000be70:	2802      	cmp	r0, #2
1000be72:	d039      	beq.n	1000bee8 <at_ble_event_get+0xcc>
1000be74:	6823      	ldr	r3, [r4, #0]
1000be76:	2b00      	cmp	r3, #0
1000be78:	d0f6      	beq.n	1000be68 <at_ble_event_get+0x4c>
1000be7a:	9b02      	ldr	r3, [sp, #8]
1000be7c:	2bd0      	cmp	r3, #208	; 0xd0
1000be7e:	d100      	bne.n	1000be82 <at_ble_event_get+0x66>
1000be80:	e2c6      	b.n	1000c410 <at_ble_event_get+0x5f4>
1000be82:	9b02      	ldr	r3, [sp, #8]
1000be84:	3b03      	subs	r3, #3
1000be86:	1e5a      	subs	r2, r3, #1
1000be88:	4193      	sbcs	r3, r2
1000be8a:	9a02      	ldr	r2, [sp, #8]
1000be8c:	425b      	negs	r3, r3
1000be8e:	401a      	ands	r2, r3
1000be90:	6823      	ldr	r3, [r4, #0]
1000be92:	9202      	str	r2, [sp, #8]
1000be94:	2b00      	cmp	r3, #0
1000be96:	d100      	bne.n	1000be9a <at_ble_event_get+0x7e>
1000be98:	e2c2      	b.n	1000c420 <at_ble_event_get+0x604>
1000be9a:	681a      	ldr	r2, [r3, #0]
1000be9c:	68de      	ldr	r6, [r3, #12]
1000be9e:	6022      	str	r2, [r4, #0]
1000bea0:	88da      	ldrh	r2, [r3, #6]
1000bea2:	9201      	str	r2, [sp, #4]
1000bea4:	4a95      	ldr	r2, [pc, #596]	; (1000c0fc <at_ble_event_get+0x2e0>)
1000bea6:	889c      	ldrh	r4, [r3, #4]
1000bea8:	6811      	ldr	r1, [r2, #0]
1000beaa:	6013      	str	r3, [r2, #0]
1000beac:	6019      	str	r1, [r3, #0]
1000beae:	4b94      	ldr	r3, [pc, #592]	; (1000c100 <at_ble_event_get+0x2e4>)
1000beb0:	781b      	ldrb	r3, [r3, #0]
1000beb2:	2b01      	cmp	r3, #1
1000beb4:	d10f      	bne.n	1000bed6 <at_ble_event_get+0xba>
1000beb6:	4b93      	ldr	r3, [pc, #588]	; (1000c104 <at_ble_event_get+0x2e8>)
1000beb8:	4a92      	ldr	r2, [pc, #584]	; (1000c104 <at_ble_event_get+0x2e8>)
1000beba:	8898      	ldrh	r0, [r3, #4]
1000bebc:	88d9      	ldrh	r1, [r3, #6]
1000bebe:	68d2      	ldr	r2, [r2, #12]
1000bec0:	891b      	ldrh	r3, [r3, #8]
1000bec2:	4f91      	ldr	r7, [pc, #580]	; (1000c108 <at_ble_event_get+0x2ec>)
1000bec4:	47b8      	blx	r7
1000bec6:	2210      	movs	r2, #16
1000bec8:	4b90      	ldr	r3, [pc, #576]	; (1000c10c <at_ble_event_get+0x2f0>)
1000beca:	488e      	ldr	r0, [pc, #568]	; (1000c104 <at_ble_event_get+0x2e8>)
1000becc:	2100      	movs	r1, #0
1000bece:	4798      	blx	r3
1000bed0:	2300      	movs	r3, #0
1000bed2:	4a8b      	ldr	r2, [pc, #556]	; (1000c100 <at_ble_event_get+0x2e4>)
1000bed4:	7013      	strb	r3, [r2, #0]
1000bed6:	9b02      	ldr	r3, [sp, #8]
1000bed8:	2b00      	cmp	r3, #0
1000beda:	d114      	bne.n	1000bf06 <at_ble_event_get+0xea>
1000bedc:	4b8c      	ldr	r3, [pc, #560]	; (1000c110 <at_ble_event_get+0x2f4>)
1000bede:	429c      	cmp	r4, r3
1000bee0:	d009      	beq.n	1000bef6 <at_ble_event_get+0xda>
1000bee2:	4b8c      	ldr	r3, [pc, #560]	; (1000c114 <at_ble_event_get+0x2f8>)
1000bee4:	429c      	cmp	r4, r3
1000bee6:	d127      	bne.n	1000bf38 <at_ble_event_get+0x11c>
1000bee8:	233a      	movs	r3, #58	; 0x3a
1000beea:	9a03      	ldr	r2, [sp, #12]
1000beec:	7013      	strb	r3, [r2, #0]
1000beee:	2300      	movs	r3, #0
1000bef0:	9302      	str	r3, [sp, #8]
1000bef2:	1c1d      	adds	r5, r3, #0
1000bef4:	e007      	b.n	1000bf06 <at_ble_event_get+0xea>
1000bef6:	9b01      	ldr	r3, [sp, #4]
1000bef8:	42a3      	cmp	r3, r4
1000befa:	d000      	beq.n	1000befe <at_ble_event_get+0xe2>
1000befc:	e28a      	b.n	1000c414 <at_ble_event_get+0x5f8>
1000befe:	2338      	movs	r3, #56	; 0x38
1000bf00:	9a03      	ldr	r2, [sp, #12]
1000bf02:	7013      	strb	r3, [r2, #0]
1000bf04:	602e      	str	r6, [r5, #0]
1000bf06:	9b03      	ldr	r3, [sp, #12]
1000bf08:	781b      	ldrb	r3, [r3, #0]
1000bf0a:	2b3b      	cmp	r3, #59	; 0x3b
1000bf0c:	d101      	bne.n	1000bf12 <at_ble_event_get+0xf6>
1000bf0e:	4b82      	ldr	r3, [pc, #520]	; (1000c118 <at_ble_event_get+0x2fc>)
1000bf10:	4798      	blx	r3
1000bf12:	9b03      	ldr	r3, [sp, #12]
1000bf14:	781b      	ldrb	r3, [r3, #0]
1000bf16:	2b3b      	cmp	r3, #59	; 0x3b
1000bf18:	d003      	beq.n	1000bf22 <at_ble_event_get+0x106>
1000bf1a:	9b05      	ldr	r3, [sp, #20]
1000bf1c:	3303      	adds	r3, #3
1000bf1e:	d904      	bls.n	1000bf2a <at_ble_event_get+0x10e>
1000bf20:	e283      	b.n	1000c42a <at_ble_event_get+0x60e>
1000bf22:	9b02      	ldr	r3, [sp, #8]
1000bf24:	2b00      	cmp	r3, #0
1000bf26:	d088      	beq.n	1000be3a <at_ble_event_get+0x1e>
1000bf28:	e7f7      	b.n	1000bf1a <at_ble_event_get+0xfe>
1000bf2a:	9b02      	ldr	r3, [sp, #8]
1000bf2c:	2bd0      	cmp	r3, #208	; 0xd0
1000bf2e:	d100      	bne.n	1000bf32 <at_ble_event_get+0x116>
1000bf30:	e27b      	b.n	1000c42a <at_ble_event_get+0x60e>
1000bf32:	4b7a      	ldr	r3, [pc, #488]	; (1000c11c <at_ble_event_get+0x300>)
1000bf34:	4798      	blx	r3
1000bf36:	e278      	b.n	1000c42a <at_ble_event_get+0x60e>
1000bf38:	9b01      	ldr	r3, [sp, #4]
1000bf3a:	2bbb      	cmp	r3, #187	; 0xbb
1000bf3c:	d125      	bne.n	1000bf8a <at_ble_event_get+0x16e>
1000bf3e:	2cbb      	cmp	r4, #187	; 0xbb
1000bf40:	d123      	bne.n	1000bf8a <at_ble_event_get+0x16e>
1000bf42:	466b      	mov	r3, sp
1000bf44:	891b      	ldrh	r3, [r3, #8]
1000bf46:	80ab      	strh	r3, [r5, #4]
1000bf48:	78b3      	ldrb	r3, [r6, #2]
1000bf4a:	7872      	ldrb	r2, [r6, #1]
1000bf4c:	78f0      	ldrb	r0, [r6, #3]
1000bf4e:	021b      	lsls	r3, r3, #8
1000bf50:	4313      	orrs	r3, r2
1000bf52:	7971      	ldrb	r1, [r6, #5]
1000bf54:	7932      	ldrb	r2, [r6, #4]
1000bf56:	70a8      	strb	r0, [r5, #2]
1000bf58:	4871      	ldr	r0, [pc, #452]	; (1000c120 <at_ble_event_get+0x304>)
1000bf5a:	802b      	strh	r3, [r5, #0]
1000bf5c:	4283      	cmp	r3, r0
1000bf5e:	d806      	bhi.n	1000bf6e <at_ble_event_get+0x152>
1000bf60:	4a70      	ldr	r2, [pc, #448]	; (1000c124 <at_ble_event_get+0x308>)
1000bf62:	4293      	cmp	r3, r2
1000bf64:	d20b      	bcs.n	1000bf7e <at_ble_event_get+0x162>
1000bf66:	4a70      	ldr	r2, [pc, #448]	; (1000c128 <at_ble_event_get+0x30c>)
1000bf68:	4293      	cmp	r3, r2
1000bf6a:	d008      	beq.n	1000bf7e <at_ble_event_get+0x162>
1000bf6c:	e009      	b.n	1000bf82 <at_ble_event_get+0x166>
1000bf6e:	486f      	ldr	r0, [pc, #444]	; (1000c12c <at_ble_event_get+0x310>)
1000bf70:	4283      	cmp	r3, r0
1000bf72:	d106      	bne.n	1000bf82 <at_ble_event_get+0x166>
1000bf74:	020b      	lsls	r3, r1, #8
1000bf76:	4313      	orrs	r3, r2
1000bf78:	80ab      	strh	r3, [r5, #4]
1000bf7a:	2337      	movs	r3, #55	; 0x37
1000bf7c:	e002      	b.n	1000bf84 <at_ble_event_get+0x168>
1000bf7e:	2336      	movs	r3, #54	; 0x36
1000bf80:	e000      	b.n	1000bf84 <at_ble_event_get+0x168>
1000bf82:	2300      	movs	r3, #0
1000bf84:	9a03      	ldr	r2, [sp, #12]
1000bf86:	7013      	strb	r3, [r2, #0]
1000bf88:	e7bd      	b.n	1000bf06 <at_ble_event_get+0xea>
1000bf8a:	4b69      	ldr	r3, [pc, #420]	; (1000c130 <at_ble_event_get+0x314>)
1000bf8c:	429c      	cmp	r4, r3
1000bf8e:	d100      	bne.n	1000bf92 <at_ble_event_get+0x176>
1000bf90:	e144      	b.n	1000c21c <at_ble_event_get+0x400>
1000bf92:	d865      	bhi.n	1000c060 <at_ble_event_get+0x244>
1000bf94:	4b67      	ldr	r3, [pc, #412]	; (1000c134 <at_ble_event_get+0x318>)
1000bf96:	429c      	cmp	r4, r3
1000bf98:	d100      	bne.n	1000bf9c <at_ble_event_get+0x180>
1000bf9a:	e1d5      	b.n	1000c348 <at_ble_event_get+0x52c>
1000bf9c:	d82f      	bhi.n	1000bffe <at_ble_event_get+0x1e2>
1000bf9e:	4b66      	ldr	r3, [pc, #408]	; (1000c138 <at_ble_event_get+0x31c>)
1000bfa0:	429c      	cmp	r4, r3
1000bfa2:	d100      	bne.n	1000bfa6 <at_ble_event_get+0x18a>
1000bfa4:	e1e0      	b.n	1000c368 <at_ble_event_get+0x54c>
1000bfa6:	d813      	bhi.n	1000bfd0 <at_ble_event_get+0x1b4>
1000bfa8:	4b64      	ldr	r3, [pc, #400]	; (1000c13c <at_ble_event_get+0x320>)
1000bfaa:	429c      	cmp	r4, r3
1000bfac:	d100      	bne.n	1000bfb0 <at_ble_event_get+0x194>
1000bfae:	e1a3      	b.n	1000c2f8 <at_ble_event_get+0x4dc>
1000bfb0:	d804      	bhi.n	1000bfbc <at_ble_event_get+0x1a0>
1000bfb2:	2638      	movs	r6, #56	; 0x38
1000bfb4:	42b4      	cmp	r4, r6
1000bfb6:	d100      	bne.n	1000bfba <at_ble_event_get+0x19e>
1000bfb8:	e225      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000bfba:	e117      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000bfbc:	4b60      	ldr	r3, [pc, #384]	; (1000c140 <at_ble_event_get+0x324>)
1000bfbe:	429c      	cmp	r4, r3
1000bfc0:	d100      	bne.n	1000bfc4 <at_ble_event_get+0x1a8>
1000bfc2:	e19f      	b.n	1000c304 <at_ble_event_get+0x4e8>
1000bfc4:	33fe      	adds	r3, #254	; 0xfe
1000bfc6:	33ff      	adds	r3, #255	; 0xff
1000bfc8:	429c      	cmp	r4, r3
1000bfca:	d100      	bne.n	1000bfce <at_ble_event_get+0x1b2>
1000bfcc:	e1d3      	b.n	1000c376 <at_ble_event_get+0x55a>
1000bfce:	e10d      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000bfd0:	4b5c      	ldr	r3, [pc, #368]	; (1000c144 <at_ble_event_get+0x328>)
1000bfd2:	429c      	cmp	r4, r3
1000bfd4:	d100      	bne.n	1000bfd8 <at_ble_event_get+0x1bc>
1000bfd6:	e1a9      	b.n	1000c32c <at_ble_event_get+0x510>
1000bfd8:	d808      	bhi.n	1000bfec <at_ble_event_get+0x1d0>
1000bfda:	4b5b      	ldr	r3, [pc, #364]	; (1000c148 <at_ble_event_get+0x32c>)
1000bfdc:	429c      	cmp	r4, r3
1000bfde:	d100      	bne.n	1000bfe2 <at_ble_event_get+0x1c6>
1000bfe0:	e196      	b.n	1000c310 <at_ble_event_get+0x4f4>
1000bfe2:	4b5a      	ldr	r3, [pc, #360]	; (1000c14c <at_ble_event_get+0x330>)
1000bfe4:	429c      	cmp	r4, r3
1000bfe6:	d100      	bne.n	1000bfea <at_ble_event_get+0x1ce>
1000bfe8:	e199      	b.n	1000c31e <at_ble_event_get+0x502>
1000bfea:	e0ff      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000bfec:	4b58      	ldr	r3, [pc, #352]	; (1000c150 <at_ble_event_get+0x334>)
1000bfee:	429c      	cmp	r4, r3
1000bff0:	d100      	bne.n	1000bff4 <at_ble_event_get+0x1d8>
1000bff2:	e1a2      	b.n	1000c33a <at_ble_event_get+0x51e>
1000bff4:	4b57      	ldr	r3, [pc, #348]	; (1000c154 <at_ble_event_get+0x338>)
1000bff6:	429c      	cmp	r4, r3
1000bff8:	d100      	bne.n	1000bffc <at_ble_event_get+0x1e0>
1000bffa:	e1d4      	b.n	1000c3a6 <at_ble_event_get+0x58a>
1000bffc:	e0f6      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000bffe:	4b56      	ldr	r3, [pc, #344]	; (1000c158 <at_ble_event_get+0x33c>)
1000c000:	429c      	cmp	r4, r3
1000c002:	d100      	bne.n	1000c006 <at_ble_event_get+0x1ea>
1000c004:	e1c8      	b.n	1000c398 <at_ble_event_get+0x57c>
1000c006:	d812      	bhi.n	1000c02e <at_ble_event_get+0x212>
1000c008:	4b54      	ldr	r3, [pc, #336]	; (1000c15c <at_ble_event_get+0x340>)
1000c00a:	429c      	cmp	r4, r3
1000c00c:	d100      	bne.n	1000c010 <at_ble_event_get+0x1f4>
1000c00e:	e1d1      	b.n	1000c3b4 <at_ble_event_get+0x598>
1000c010:	d804      	bhi.n	1000c01c <at_ble_event_get+0x200>
1000c012:	4b53      	ldr	r3, [pc, #332]	; (1000c160 <at_ble_event_get+0x344>)
1000c014:	429c      	cmp	r4, r3
1000c016:	d100      	bne.n	1000c01a <at_ble_event_get+0x1fe>
1000c018:	e19b      	b.n	1000c352 <at_ble_event_get+0x536>
1000c01a:	e0e7      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c01c:	4b51      	ldr	r3, [pc, #324]	; (1000c164 <at_ble_event_get+0x348>)
1000c01e:	429c      	cmp	r4, r3
1000c020:	d100      	bne.n	1000c024 <at_ble_event_get+0x208>
1000c022:	e1ad      	b.n	1000c380 <at_ble_event_get+0x564>
1000c024:	4b50      	ldr	r3, [pc, #320]	; (1000c168 <at_ble_event_get+0x34c>)
1000c026:	429c      	cmp	r4, r3
1000c028:	d100      	bne.n	1000c02c <at_ble_event_get+0x210>
1000c02a:	e1b0      	b.n	1000c38e <at_ble_event_get+0x572>
1000c02c:	e0de      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c02e:	4b4f      	ldr	r3, [pc, #316]	; (1000c16c <at_ble_event_get+0x350>)
1000c030:	429c      	cmp	r4, r3
1000c032:	d100      	bne.n	1000c036 <at_ble_event_get+0x21a>
1000c034:	e0e0      	b.n	1000c1f8 <at_ble_event_get+0x3dc>
1000c036:	d809      	bhi.n	1000c04c <at_ble_event_get+0x230>
1000c038:	3b08      	subs	r3, #8
1000c03a:	429c      	cmp	r4, r3
1000c03c:	d100      	bne.n	1000c040 <at_ble_event_get+0x224>
1000c03e:	e0d7      	b.n	1000c1f0 <at_ble_event_get+0x3d4>
1000c040:	4b4b      	ldr	r3, [pc, #300]	; (1000c170 <at_ble_event_get+0x354>)
1000c042:	2639      	movs	r6, #57	; 0x39
1000c044:	429c      	cmp	r4, r3
1000c046:	d100      	bne.n	1000c04a <at_ble_event_get+0x22e>
1000c048:	e1dd      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c04a:	e0cf      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c04c:	23d1      	movs	r3, #209	; 0xd1
1000c04e:	011b      	lsls	r3, r3, #4
1000c050:	429c      	cmp	r4, r3
1000c052:	d100      	bne.n	1000c056 <at_ble_event_get+0x23a>
1000c054:	e0d6      	b.n	1000c204 <at_ble_event_get+0x3e8>
1000c056:	4b47      	ldr	r3, [pc, #284]	; (1000c174 <at_ble_event_get+0x358>)
1000c058:	429c      	cmp	r4, r3
1000c05a:	d100      	bne.n	1000c05e <at_ble_event_get+0x242>
1000c05c:	e0d8      	b.n	1000c210 <at_ble_event_get+0x3f4>
1000c05e:	e0c5      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c060:	4b45      	ldr	r3, [pc, #276]	; (1000c178 <at_ble_event_get+0x35c>)
1000c062:	429c      	cmp	r4, r3
1000c064:	d100      	bne.n	1000c068 <at_ble_event_get+0x24c>
1000c066:	e117      	b.n	1000c298 <at_ble_event_get+0x47c>
1000c068:	d82e      	bhi.n	1000c0c8 <at_ble_event_get+0x2ac>
1000c06a:	4b44      	ldr	r3, [pc, #272]	; (1000c17c <at_ble_event_get+0x360>)
1000c06c:	429c      	cmp	r4, r3
1000c06e:	d100      	bne.n	1000c072 <at_ble_event_get+0x256>
1000c070:	e13d      	b.n	1000c2ee <at_ble_event_get+0x4d2>
1000c072:	d812      	bhi.n	1000c09a <at_ble_event_get+0x27e>
1000c074:	4b42      	ldr	r3, [pc, #264]	; (1000c180 <at_ble_event_get+0x364>)
1000c076:	429c      	cmp	r4, r3
1000c078:	d100      	bne.n	1000c07c <at_ble_event_get+0x260>
1000c07a:	e0e8      	b.n	1000c24e <at_ble_event_get+0x432>
1000c07c:	d804      	bhi.n	1000c088 <at_ble_event_get+0x26c>
1000c07e:	3b03      	subs	r3, #3
1000c080:	429c      	cmp	r4, r3
1000c082:	d100      	bne.n	1000c086 <at_ble_event_get+0x26a>
1000c084:	e0d0      	b.n	1000c228 <at_ble_event_get+0x40c>
1000c086:	e0b1      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c088:	4b3e      	ldr	r3, [pc, #248]	; (1000c184 <at_ble_event_get+0x368>)
1000c08a:	429c      	cmp	r4, r3
1000c08c:	d100      	bne.n	1000c090 <at_ble_event_get+0x274>
1000c08e:	e0d0      	b.n	1000c232 <at_ble_event_get+0x416>
1000c090:	4b3d      	ldr	r3, [pc, #244]	; (1000c188 <at_ble_event_get+0x36c>)
1000c092:	429c      	cmp	r4, r3
1000c094:	d100      	bne.n	1000c098 <at_ble_event_get+0x27c>
1000c096:	e0f9      	b.n	1000c28c <at_ble_event_get+0x470>
1000c098:	e0a8      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c09a:	4b3c      	ldr	r3, [pc, #240]	; (1000c18c <at_ble_event_get+0x370>)
1000c09c:	429c      	cmp	r4, r3
1000c09e:	d100      	bne.n	1000c0a2 <at_ble_event_get+0x286>
1000c0a0:	e0db      	b.n	1000c25a <at_ble_event_get+0x43e>
1000c0a2:	d808      	bhi.n	1000c0b6 <at_ble_event_get+0x29a>
1000c0a4:	4b3a      	ldr	r3, [pc, #232]	; (1000c190 <at_ble_event_get+0x374>)
1000c0a6:	429c      	cmp	r4, r3
1000c0a8:	d100      	bne.n	1000c0ac <at_ble_event_get+0x290>
1000c0aa:	e11b      	b.n	1000c2e4 <at_ble_event_get+0x4c8>
1000c0ac:	4b39      	ldr	r3, [pc, #228]	; (1000c194 <at_ble_event_get+0x378>)
1000c0ae:	429c      	cmp	r4, r3
1000c0b0:	d100      	bne.n	1000c0b4 <at_ble_event_get+0x298>
1000c0b2:	e0d8      	b.n	1000c266 <at_ble_event_get+0x44a>
1000c0b4:	e09a      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c0b6:	4b38      	ldr	r3, [pc, #224]	; (1000c198 <at_ble_event_get+0x37c>)
1000c0b8:	429c      	cmp	r4, r3
1000c0ba:	d100      	bne.n	1000c0be <at_ble_event_get+0x2a2>
1000c0bc:	e0d8      	b.n	1000c270 <at_ble_event_get+0x454>
1000c0be:	4b37      	ldr	r3, [pc, #220]	; (1000c19c <at_ble_event_get+0x380>)
1000c0c0:	429c      	cmp	r4, r3
1000c0c2:	d100      	bne.n	1000c0c6 <at_ble_event_get+0x2aa>
1000c0c4:	e0db      	b.n	1000c27e <at_ble_event_get+0x462>
1000c0c6:	e091      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c0c8:	4b35      	ldr	r3, [pc, #212]	; (1000c1a0 <at_ble_event_get+0x384>)
1000c0ca:	429c      	cmp	r4, r3
1000c0cc:	d100      	bne.n	1000c0d0 <at_ble_event_get+0x2b4>
1000c0ce:	e0f7      	b.n	1000c2c0 <at_ble_event_get+0x4a4>
1000c0d0:	d876      	bhi.n	1000c1c0 <at_ble_event_get+0x3a4>
1000c0d2:	4b34      	ldr	r3, [pc, #208]	; (1000c1a4 <at_ble_event_get+0x388>)
1000c0d4:	429c      	cmp	r4, r3
1000c0d6:	d100      	bne.n	1000c0da <at_ble_event_get+0x2be>
1000c0d8:	e0f8      	b.n	1000c2cc <at_ble_event_get+0x4b0>
1000c0da:	d869      	bhi.n	1000c1b0 <at_ble_event_get+0x394>
1000c0dc:	4b32      	ldr	r3, [pc, #200]	; (1000c1a8 <at_ble_event_get+0x38c>)
1000c0de:	429c      	cmp	r4, r3
1000c0e0:	d100      	bne.n	1000c0e4 <at_ble_event_get+0x2c8>
1000c0e2:	e0e0      	b.n	1000c2a6 <at_ble_event_get+0x48a>
1000c0e4:	4b31      	ldr	r3, [pc, #196]	; (1000c1ac <at_ble_event_get+0x390>)
1000c0e6:	429c      	cmp	r4, r3
1000c0e8:	d100      	bne.n	1000c0ec <at_ble_event_get+0x2d0>
1000c0ea:	e0a9      	b.n	1000c240 <at_ble_event_get+0x424>
1000c0ec:	e07e      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c0ee:	46c0      	nop			; (mov r8, r8)
1000c0f0:	1000d1d1 	.word	0x1000d1d1
1000c0f4:	10013df4 	.word	0x10013df4
1000c0f8:	1000b469 	.word	0x1000b469
1000c0fc:	10013df8 	.word	0x10013df8
1000c100:	10013df0 	.word	0x10013df0
1000c104:	10013de0 	.word	0x10013de0
1000c108:	1000bd05 	.word	0x1000bd05
1000c10c:	10010369 	.word	0x10010369
1000c110:	0000ffff 	.word	0x0000ffff
1000c114:	0000fffe 	.word	0x0000fffe
1000c118:	1000b6e1 	.word	0x1000b6e1
1000c11c:	1000d1d3 	.word	0x1000d1d3
1000c120:	0000201e 	.word	0x0000201e
1000c124:	0000201d 	.word	0x0000201d
1000c128:	00000c03 	.word	0x00000c03
1000c12c:	0000201f 	.word	0x0000201f
1000c130:	00000d1c 	.word	0x00000d1c
1000c134:	00000c0c 	.word	0x00000c0c
1000c138:	00000c02 	.word	0x00000c02
1000c13c:	00000a02 	.word	0x00000a02
1000c140:	00000a03 	.word	0x00000a03
1000c144:	00000c06 	.word	0x00000c06
1000c148:	00000c04 	.word	0x00000c04
1000c14c:	00000c05 	.word	0x00000c05
1000c150:	00000c07 	.word	0x00000c07
1000c154:	00000c09 	.word	0x00000c09
1000c158:	00000c17 	.word	0x00000c17
1000c15c:	00000c12 	.word	0x00000c12
1000c160:	00000c0d 	.word	0x00000c0d
1000c164:	00000c13 	.word	0x00000c13
1000c168:	00000c15 	.word	0x00000c15
1000c16c:	00000d08 	.word	0x00000d08
1000c170:	00000d01 	.word	0x00000d01
1000c174:	00000d15 	.word	0x00000d15
1000c178:	00000e1b 	.word	0x00000e1b
1000c17c:	00000e0f 	.word	0x00000e0f
1000c180:	00000e03 	.word	0x00000e03
1000c184:	00000e06 	.word	0x00000e06
1000c188:	00000e0a 	.word	0x00000e0a
1000c18c:	00000e15 	.word	0x00000e15
1000c190:	00000e11 	.word	0x00000e11
1000c194:	00000e13 	.word	0x00000e13
1000c198:	00000e17 	.word	0x00000e17
1000c19c:	00000e19 	.word	0x00000e19
1000c1a0:	00000e27 	.word	0x00000e27
1000c1a4:	00000e21 	.word	0x00000e21
1000c1a8:	00000e1c 	.word	0x00000e1c
1000c1ac:	00000e1d 	.word	0x00000e1d
1000c1b0:	4b9f      	ldr	r3, [pc, #636]	; (1000c430 <at_ble_event_get+0x614>)
1000c1b2:	429c      	cmp	r4, r3
1000c1b4:	d07e      	beq.n	1000c2b4 <at_ble_event_get+0x498>
1000c1b6:	4b9f      	ldr	r3, [pc, #636]	; (1000c434 <at_ble_event_get+0x618>)
1000c1b8:	429c      	cmp	r4, r3
1000c1ba:	d100      	bne.n	1000c1be <at_ble_event_get+0x3a2>
1000c1bc:	e08c      	b.n	1000c2d8 <at_ble_event_get+0x4bc>
1000c1be:	e015      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c1c0:	4b9d      	ldr	r3, [pc, #628]	; (1000c438 <at_ble_event_get+0x61c>)
1000c1c2:	429c      	cmp	r4, r3
1000c1c4:	d100      	bne.n	1000c1c8 <at_ble_event_get+0x3ac>
1000c1c6:	e10a      	b.n	1000c3de <at_ble_event_get+0x5c2>
1000c1c8:	d808      	bhi.n	1000c1dc <at_ble_event_get+0x3c0>
1000c1ca:	4b9c      	ldr	r3, [pc, #624]	; (1000c43c <at_ble_event_get+0x620>)
1000c1cc:	429c      	cmp	r4, r3
1000c1ce:	d100      	bne.n	1000c1d2 <at_ble_event_get+0x3b6>
1000c1d0:	e0f7      	b.n	1000c3c2 <at_ble_event_get+0x5a6>
1000c1d2:	4b9b      	ldr	r3, [pc, #620]	; (1000c440 <at_ble_event_get+0x624>)
1000c1d4:	429c      	cmp	r4, r3
1000c1d6:	d100      	bne.n	1000c1da <at_ble_event_get+0x3be>
1000c1d8:	e0fa      	b.n	1000c3d0 <at_ble_event_get+0x5b4>
1000c1da:	e007      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c1dc:	4b99      	ldr	r3, [pc, #612]	; (1000c444 <at_ble_event_get+0x628>)
1000c1de:	429c      	cmp	r4, r3
1000c1e0:	d100      	bne.n	1000c1e4 <at_ble_event_get+0x3c8>
1000c1e2:	e103      	b.n	1000c3ec <at_ble_event_get+0x5d0>
1000c1e4:	4b98      	ldr	r3, [pc, #608]	; (1000c448 <at_ble_event_get+0x62c>)
1000c1e6:	429c      	cmp	r4, r3
1000c1e8:	d100      	bne.n	1000c1ec <at_ble_event_get+0x3d0>
1000c1ea:	e106      	b.n	1000c3fa <at_ble_event_get+0x5de>
1000c1ec:	2600      	movs	r6, #0
1000c1ee:	e10a      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c1f0:	1c30      	adds	r0, r6, #0
1000c1f2:	1c29      	adds	r1, r5, #0
1000c1f4:	4b95      	ldr	r3, [pc, #596]	; (1000c44c <at_ble_event_get+0x630>)
1000c1f6:	e014      	b.n	1000c222 <at_ble_event_get+0x406>
1000c1f8:	1c30      	adds	r0, r6, #0
1000c1fa:	1c29      	adds	r1, r5, #0
1000c1fc:	4b94      	ldr	r3, [pc, #592]	; (1000c450 <at_ble_event_get+0x634>)
1000c1fe:	4798      	blx	r3
1000c200:	2604      	movs	r6, #4
1000c202:	e100      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c204:	1c30      	adds	r0, r6, #0
1000c206:	1c29      	adds	r1, r5, #0
1000c208:	4b92      	ldr	r3, [pc, #584]	; (1000c454 <at_ble_event_get+0x638>)
1000c20a:	4798      	blx	r3
1000c20c:	2601      	movs	r6, #1
1000c20e:	e0fa      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c210:	1c30      	adds	r0, r6, #0
1000c212:	1c29      	adds	r1, r5, #0
1000c214:	4b90      	ldr	r3, [pc, #576]	; (1000c458 <at_ble_event_get+0x63c>)
1000c216:	4798      	blx	r3
1000c218:	260f      	movs	r6, #15
1000c21a:	e0f4      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c21c:	1c30      	adds	r0, r6, #0
1000c21e:	1c29      	adds	r1, r5, #0
1000c220:	4b8e      	ldr	r3, [pc, #568]	; (1000c45c <at_ble_event_get+0x640>)
1000c222:	4798      	blx	r3
1000c224:	1c06      	adds	r6, r0, #0
1000c226:	e0ee      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c228:	9801      	ldr	r0, [sp, #4]
1000c22a:	1c31      	adds	r1, r6, #0
1000c22c:	1c2a      	adds	r2, r5, #0
1000c22e:	4b8c      	ldr	r3, [pc, #560]	; (1000c460 <at_ble_event_get+0x644>)
1000c230:	e017      	b.n	1000c262 <at_ble_event_get+0x446>
1000c232:	1c31      	adds	r1, r6, #0
1000c234:	9801      	ldr	r0, [sp, #4]
1000c236:	1c2a      	adds	r2, r5, #0
1000c238:	4b8a      	ldr	r3, [pc, #552]	; (1000c464 <at_ble_event_get+0x648>)
1000c23a:	4798      	blx	r3
1000c23c:	2611      	movs	r6, #17
1000c23e:	e0e2      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c240:	1c31      	adds	r1, r6, #0
1000c242:	9801      	ldr	r0, [sp, #4]
1000c244:	1c2a      	adds	r2, r5, #0
1000c246:	4b88      	ldr	r3, [pc, #544]	; (1000c468 <at_ble_event_get+0x64c>)
1000c248:	4798      	blx	r3
1000c24a:	2612      	movs	r6, #18
1000c24c:	e0db      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c24e:	1c30      	adds	r0, r6, #0
1000c250:	1c29      	adds	r1, r5, #0
1000c252:	4b86      	ldr	r3, [pc, #536]	; (1000c46c <at_ble_event_get+0x650>)
1000c254:	4798      	blx	r3
1000c256:	2606      	movs	r6, #6
1000c258:	e0d5      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c25a:	1c31      	adds	r1, r6, #0
1000c25c:	1c2a      	adds	r2, r5, #0
1000c25e:	9801      	ldr	r0, [sp, #4]
1000c260:	4b83      	ldr	r3, [pc, #524]	; (1000c470 <at_ble_event_get+0x654>)
1000c262:	4798      	blx	r3
1000c264:	e7de      	b.n	1000c224 <at_ble_event_get+0x408>
1000c266:	9801      	ldr	r0, [sp, #4]
1000c268:	1c31      	adds	r1, r6, #0
1000c26a:	1c2a      	adds	r2, r5, #0
1000c26c:	4b81      	ldr	r3, [pc, #516]	; (1000c474 <at_ble_event_get+0x658>)
1000c26e:	e7f8      	b.n	1000c262 <at_ble_event_get+0x446>
1000c270:	1c31      	adds	r1, r6, #0
1000c272:	9801      	ldr	r0, [sp, #4]
1000c274:	1c2a      	adds	r2, r5, #0
1000c276:	4b80      	ldr	r3, [pc, #512]	; (1000c478 <at_ble_event_get+0x65c>)
1000c278:	4798      	blx	r3
1000c27a:	260d      	movs	r6, #13
1000c27c:	e0c3      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c27e:	1c31      	adds	r1, r6, #0
1000c280:	9801      	ldr	r0, [sp, #4]
1000c282:	1c2a      	adds	r2, r5, #0
1000c284:	4b7d      	ldr	r3, [pc, #500]	; (1000c47c <at_ble_event_get+0x660>)
1000c286:	4798      	blx	r3
1000c288:	260e      	movs	r6, #14
1000c28a:	e0bc      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c28c:	9801      	ldr	r0, [sp, #4]
1000c28e:	1c31      	adds	r1, r6, #0
1000c290:	1c2a      	adds	r2, r5, #0
1000c292:	4b7b      	ldr	r3, [pc, #492]	; (1000c480 <at_ble_event_get+0x664>)
1000c294:	4798      	blx	r3
1000c296:	e084      	b.n	1000c3a2 <at_ble_event_get+0x586>
1000c298:	1c31      	adds	r1, r6, #0
1000c29a:	9801      	ldr	r0, [sp, #4]
1000c29c:	1c2a      	adds	r2, r5, #0
1000c29e:	4b79      	ldr	r3, [pc, #484]	; (1000c484 <at_ble_event_get+0x668>)
1000c2a0:	4798      	blx	r3
1000c2a2:	260b      	movs	r6, #11
1000c2a4:	e0af      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c2a6:	1c31      	adds	r1, r6, #0
1000c2a8:	9801      	ldr	r0, [sp, #4]
1000c2aa:	1c2a      	adds	r2, r5, #0
1000c2ac:	4b76      	ldr	r3, [pc, #472]	; (1000c488 <at_ble_event_get+0x66c>)
1000c2ae:	4798      	blx	r3
1000c2b0:	2610      	movs	r6, #16
1000c2b2:	e0a8      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c2b4:	1c30      	adds	r0, r6, #0
1000c2b6:	1c29      	adds	r1, r5, #0
1000c2b8:	4b74      	ldr	r3, [pc, #464]	; (1000c48c <at_ble_event_get+0x670>)
1000c2ba:	4798      	blx	r3
1000c2bc:	2628      	movs	r6, #40	; 0x28
1000c2be:	e0a2      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c2c0:	1c30      	adds	r0, r6, #0
1000c2c2:	1c29      	adds	r1, r5, #0
1000c2c4:	4b72      	ldr	r3, [pc, #456]	; (1000c490 <at_ble_event_get+0x674>)
1000c2c6:	4798      	blx	r3
1000c2c8:	2629      	movs	r6, #41	; 0x29
1000c2ca:	e09c      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c2cc:	1c30      	adds	r0, r6, #0
1000c2ce:	1c29      	adds	r1, r5, #0
1000c2d0:	4b70      	ldr	r3, [pc, #448]	; (1000c494 <at_ble_event_get+0x678>)
1000c2d2:	4798      	blx	r3
1000c2d4:	2627      	movs	r6, #39	; 0x27
1000c2d6:	e096      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c2d8:	1c30      	adds	r0, r6, #0
1000c2da:	1c29      	adds	r1, r5, #0
1000c2dc:	4b6e      	ldr	r3, [pc, #440]	; (1000c498 <at_ble_event_get+0x67c>)
1000c2de:	4798      	blx	r3
1000c2e0:	262a      	movs	r6, #42	; 0x2a
1000c2e2:	e090      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c2e4:	9801      	ldr	r0, [sp, #4]
1000c2e6:	1c31      	adds	r1, r6, #0
1000c2e8:	1c2a      	adds	r2, r5, #0
1000c2ea:	4b6c      	ldr	r3, [pc, #432]	; (1000c49c <at_ble_event_get+0x680>)
1000c2ec:	e7b9      	b.n	1000c262 <at_ble_event_get+0x446>
1000c2ee:	9801      	ldr	r0, [sp, #4]
1000c2f0:	1c31      	adds	r1, r6, #0
1000c2f2:	1c2a      	adds	r2, r5, #0
1000c2f4:	4b6a      	ldr	r3, [pc, #424]	; (1000c4a0 <at_ble_event_get+0x684>)
1000c2f6:	e7b4      	b.n	1000c262 <at_ble_event_get+0x446>
1000c2f8:	1c30      	adds	r0, r6, #0
1000c2fa:	1c29      	adds	r1, r5, #0
1000c2fc:	4b69      	ldr	r3, [pc, #420]	; (1000c4a4 <at_ble_event_get+0x688>)
1000c2fe:	4798      	blx	r3
1000c300:	262b      	movs	r6, #43	; 0x2b
1000c302:	e080      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c304:	1c30      	adds	r0, r6, #0
1000c306:	1c29      	adds	r1, r5, #0
1000c308:	4b67      	ldr	r3, [pc, #412]	; (1000c4a8 <at_ble_event_get+0x68c>)
1000c30a:	4798      	blx	r3
1000c30c:	262c      	movs	r6, #44	; 0x2c
1000c30e:	e07a      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c310:	1c31      	adds	r1, r6, #0
1000c312:	9801      	ldr	r0, [sp, #4]
1000c314:	1c2a      	adds	r2, r5, #0
1000c316:	4b65      	ldr	r3, [pc, #404]	; (1000c4ac <at_ble_event_get+0x690>)
1000c318:	4798      	blx	r3
1000c31a:	2613      	movs	r6, #19
1000c31c:	e073      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c31e:	1c31      	adds	r1, r6, #0
1000c320:	9801      	ldr	r0, [sp, #4]
1000c322:	1c2a      	adds	r2, r5, #0
1000c324:	4b62      	ldr	r3, [pc, #392]	; (1000c4b0 <at_ble_event_get+0x694>)
1000c326:	4798      	blx	r3
1000c328:	2614      	movs	r6, #20
1000c32a:	e06c      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c32c:	1c31      	adds	r1, r6, #0
1000c32e:	9801      	ldr	r0, [sp, #4]
1000c330:	1c2a      	adds	r2, r5, #0
1000c332:	4b60      	ldr	r3, [pc, #384]	; (1000c4b4 <at_ble_event_get+0x698>)
1000c334:	4798      	blx	r3
1000c336:	2615      	movs	r6, #21
1000c338:	e065      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c33a:	1c31      	adds	r1, r6, #0
1000c33c:	9801      	ldr	r0, [sp, #4]
1000c33e:	1c2a      	adds	r2, r5, #0
1000c340:	4b5d      	ldr	r3, [pc, #372]	; (1000c4b8 <at_ble_event_get+0x69c>)
1000c342:	4798      	blx	r3
1000c344:	2616      	movs	r6, #22
1000c346:	e05e      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c348:	9801      	ldr	r0, [sp, #4]
1000c34a:	1c31      	adds	r1, r6, #0
1000c34c:	1c2a      	adds	r2, r5, #0
1000c34e:	4b5b      	ldr	r3, [pc, #364]	; (1000c4bc <at_ble_event_get+0x6a0>)
1000c350:	e787      	b.n	1000c262 <at_ble_event_get+0x446>
1000c352:	1c31      	adds	r1, r6, #0
1000c354:	9801      	ldr	r0, [sp, #4]
1000c356:	1c2a      	adds	r2, r5, #0
1000c358:	4b58      	ldr	r3, [pc, #352]	; (1000c4bc <at_ble_event_get+0x6a0>)
1000c35a:	4798      	blx	r3
1000c35c:	88a9      	ldrh	r1, [r5, #4]
1000c35e:	1c06      	adds	r6, r0, #0
1000c360:	4b57      	ldr	r3, [pc, #348]	; (1000c4c0 <at_ble_event_get+0x6a4>)
1000c362:	8828      	ldrh	r0, [r5, #0]
1000c364:	4798      	blx	r3
1000c366:	e04e      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c368:	1c31      	adds	r1, r6, #0
1000c36a:	9801      	ldr	r0, [sp, #4]
1000c36c:	1c2a      	adds	r2, r5, #0
1000c36e:	4b55      	ldr	r3, [pc, #340]	; (1000c4c4 <at_ble_event_get+0x6a8>)
1000c370:	4798      	blx	r3
1000c372:	2623      	movs	r6, #35	; 0x23
1000c374:	e047      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c376:	9801      	ldr	r0, [sp, #4]
1000c378:	1c31      	adds	r1, r6, #0
1000c37a:	1c2a      	adds	r2, r5, #0
1000c37c:	4b52      	ldr	r3, [pc, #328]	; (1000c4c8 <at_ble_event_get+0x6ac>)
1000c37e:	e770      	b.n	1000c262 <at_ble_event_get+0x446>
1000c380:	9b01      	ldr	r3, [sp, #4]
1000c382:	1c30      	adds	r0, r6, #0
1000c384:	0a1f      	lsrs	r7, r3, #8
1000c386:	802f      	strh	r7, [r5, #0]
1000c388:	1c29      	adds	r1, r5, #0
1000c38a:	4b50      	ldr	r3, [pc, #320]	; (1000c4cc <at_ble_event_get+0x6b0>)
1000c38c:	e749      	b.n	1000c222 <at_ble_event_get+0x406>
1000c38e:	9801      	ldr	r0, [sp, #4]
1000c390:	1c31      	adds	r1, r6, #0
1000c392:	1c2a      	adds	r2, r5, #0
1000c394:	4b4e      	ldr	r3, [pc, #312]	; (1000c4d0 <at_ble_event_get+0x6b4>)
1000c396:	e764      	b.n	1000c262 <at_ble_event_get+0x446>
1000c398:	1c30      	adds	r0, r6, #0
1000c39a:	1c29      	adds	r1, r5, #0
1000c39c:	9a01      	ldr	r2, [sp, #4]
1000c39e:	4b4d      	ldr	r3, [pc, #308]	; (1000c4d4 <at_ble_event_get+0x6b8>)
1000c3a0:	4798      	blx	r3
1000c3a2:	263b      	movs	r6, #59	; 0x3b
1000c3a4:	e02f      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c3a6:	1c31      	adds	r1, r6, #0
1000c3a8:	9801      	ldr	r0, [sp, #4]
1000c3aa:	1c2a      	adds	r2, r5, #0
1000c3ac:	4b4a      	ldr	r3, [pc, #296]	; (1000c4d8 <at_ble_event_get+0x6bc>)
1000c3ae:	4798      	blx	r3
1000c3b0:	2618      	movs	r6, #24
1000c3b2:	e028      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c3b4:	1c31      	adds	r1, r6, #0
1000c3b6:	9801      	ldr	r0, [sp, #4]
1000c3b8:	1c2a      	adds	r2, r5, #0
1000c3ba:	4b48      	ldr	r3, [pc, #288]	; (1000c4dc <at_ble_event_get+0x6c0>)
1000c3bc:	4798      	blx	r3
1000c3be:	2620      	movs	r6, #32
1000c3c0:	e021      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c3c2:	1c31      	adds	r1, r6, #0
1000c3c4:	9801      	ldr	r0, [sp, #4]
1000c3c6:	1c2a      	adds	r2, r5, #0
1000c3c8:	4b45      	ldr	r3, [pc, #276]	; (1000c4e0 <at_ble_event_get+0x6c4>)
1000c3ca:	4798      	blx	r3
1000c3cc:	2633      	movs	r6, #51	; 0x33
1000c3ce:	e01a      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c3d0:	1c31      	adds	r1, r6, #0
1000c3d2:	9801      	ldr	r0, [sp, #4]
1000c3d4:	1c2a      	adds	r2, r5, #0
1000c3d6:	4b43      	ldr	r3, [pc, #268]	; (1000c4e4 <at_ble_event_get+0x6c8>)
1000c3d8:	4798      	blx	r3
1000c3da:	2630      	movs	r6, #48	; 0x30
1000c3dc:	e013      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c3de:	1c31      	adds	r1, r6, #0
1000c3e0:	9801      	ldr	r0, [sp, #4]
1000c3e2:	1c2a      	adds	r2, r5, #0
1000c3e4:	4b40      	ldr	r3, [pc, #256]	; (1000c4e8 <at_ble_event_get+0x6cc>)
1000c3e6:	4798      	blx	r3
1000c3e8:	2634      	movs	r6, #52	; 0x34
1000c3ea:	e00c      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c3ec:	1c31      	adds	r1, r6, #0
1000c3ee:	9801      	ldr	r0, [sp, #4]
1000c3f0:	1c2a      	adds	r2, r5, #0
1000c3f2:	4b3e      	ldr	r3, [pc, #248]	; (1000c4ec <at_ble_event_get+0x6d0>)
1000c3f4:	4798      	blx	r3
1000c3f6:	2635      	movs	r6, #53	; 0x35
1000c3f8:	e005      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c3fa:	1c31      	adds	r1, r6, #0
1000c3fc:	9801      	ldr	r0, [sp, #4]
1000c3fe:	1c2a      	adds	r2, r5, #0
1000c400:	4b3b      	ldr	r3, [pc, #236]	; (1000c4f0 <at_ble_event_get+0x6d4>)
1000c402:	4798      	blx	r3
1000c404:	2632      	movs	r6, #50	; 0x32
1000c406:	9b03      	ldr	r3, [sp, #12]
1000c408:	701e      	strb	r6, [r3, #0]
1000c40a:	2300      	movs	r3, #0
1000c40c:	9302      	str	r3, [sp, #8]
1000c40e:	e57a      	b.n	1000bf06 <at_ble_event_get+0xea>
1000c410:	23d0      	movs	r3, #208	; 0xd0
1000c412:	e7fb      	b.n	1000c40c <at_ble_event_get+0x5f0>
1000c414:	9b01      	ldr	r3, [sp, #4]
1000c416:	9e02      	ldr	r6, [sp, #8]
1000c418:	2bbb      	cmp	r3, #187	; 0xbb
1000c41a:	d000      	beq.n	1000c41e <at_ble_event_get+0x602>
1000c41c:	e6e6      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c41e:	e7f2      	b.n	1000c406 <at_ble_event_get+0x5ea>
1000c420:	9b02      	ldr	r3, [sp, #8]
1000c422:	2b00      	cmp	r3, #0
1000c424:	d000      	beq.n	1000c428 <at_ble_event_get+0x60c>
1000c426:	e56e      	b.n	1000bf06 <at_ble_event_get+0xea>
1000c428:	e6e0      	b.n	1000c1ec <at_ble_event_get+0x3d0>
1000c42a:	9802      	ldr	r0, [sp, #8]
1000c42c:	b007      	add	sp, #28
1000c42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c430:	00000e22 	.word	0x00000e22
1000c434:	00000e25 	.word	0x00000e25
1000c438:	00001b05 	.word	0x00001b05
1000c43c:	00001b01 	.word	0x00001b01
1000c440:	00001b03 	.word	0x00001b03
1000c444:	00001b06 	.word	0x00001b06
1000c448:	00001b08 	.word	0x00001b08
1000c44c:	1000dffd 	.word	0x1000dffd
1000c450:	1000dfe1 	.word	0x1000dfe1
1000c454:	1000e27d 	.word	0x1000e27d
1000c458:	1000e36d 	.word	0x1000e36d
1000c45c:	1000e479 	.word	0x1000e479
1000c460:	1000d375 	.word	0x1000d375
1000c464:	1000dbf5 	.word	0x1000dbf5
1000c468:	1000dc71 	.word	0x1000dc71
1000c46c:	1000d62d 	.word	0x1000d62d
1000c470:	1000d6c9 	.word	0x1000d6c9
1000c474:	1000d7a1 	.word	0x1000d7a1
1000c478:	1000da29 	.word	0x1000da29
1000c47c:	1000dac9 	.word	0x1000dac9
1000c480:	1000db81 	.word	0x1000db81
1000c484:	1000dba9 	.word	0x1000dba9
1000c488:	1000dbbf 	.word	0x1000dbbf
1000c48c:	1000dc89 	.word	0x1000dc89
1000c490:	1000dcb7 	.word	0x1000dcb7
1000c494:	1000dccd 	.word	0x1000dccd
1000c498:	1000dcf7 	.word	0x1000dcf7
1000c49c:	1000db25 	.word	0x1000db25
1000c4a0:	1000db4f 	.word	0x1000db4f
1000c4a4:	1000cd6d 	.word	0x1000cd6d
1000c4a8:	1000cd99 	.word	0x1000cd99
1000c4ac:	1000e621 	.word	0x1000e621
1000c4b0:	1000e65d 	.word	0x1000e65d
1000c4b4:	1000e6a5 	.word	0x1000e6a5
1000c4b8:	1000e6e9 	.word	0x1000e6e9
1000c4bc:	1000e71d 	.word	0x1000e71d
1000c4c0:	1000e5e1 	.word	0x1000e5e1
1000c4c4:	1000e7e9 	.word	0x1000e7e9
1000c4c8:	1000e771 	.word	0x1000e771
1000c4cc:	1000ccc5 	.word	0x1000ccc5
1000c4d0:	1000cd31 	.word	0x1000cd31
1000c4d4:	1000ccf5 	.word	0x1000ccf5
1000c4d8:	1000e7f9 	.word	0x1000e7f9
1000c4dc:	1000e839 	.word	0x1000e839
1000c4e0:	1000ea7d 	.word	0x1000ea7d
1000c4e4:	1000ea87 	.word	0x1000ea87
1000c4e8:	1000ea8d 	.word	0x1000ea8d
1000c4ec:	1000ea93 	.word	0x1000ea93
1000c4f0:	1000ea9f 	.word	0x1000ea9f

1000c4f4 <internal_event_flush>:
1000c4f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c4f6:	490e      	ldr	r1, [pc, #56]	; (1000c530 <internal_event_flush+0x3c>)
1000c4f8:	2400      	movs	r4, #0
1000c4fa:	680b      	ldr	r3, [r1, #0]
1000c4fc:	1c0f      	adds	r7, r1, #0
1000c4fe:	1c1e      	adds	r6, r3, #0
1000c500:	4a0c      	ldr	r2, [pc, #48]	; (1000c534 <internal_event_flush+0x40>)
1000c502:	6815      	ldr	r5, [r2, #0]
1000c504:	9201      	str	r2, [sp, #4]
1000c506:	2b00      	cmp	r3, #0
1000c508:	d00e      	beq.n	1000c528 <internal_event_flush+0x34>
1000c50a:	889a      	ldrh	r2, [r3, #4]
1000c50c:	6819      	ldr	r1, [r3, #0]
1000c50e:	4282      	cmp	r2, r0
1000c510:	d107      	bne.n	1000c522 <internal_event_flush+0x2e>
1000c512:	2c00      	cmp	r4, #0
1000c514:	d001      	beq.n	1000c51a <internal_event_flush+0x26>
1000c516:	6021      	str	r1, [r4, #0]
1000c518:	e000      	b.n	1000c51c <internal_event_flush+0x28>
1000c51a:	1c0e      	adds	r6, r1, #0
1000c51c:	601d      	str	r5, [r3, #0]
1000c51e:	1c1d      	adds	r5, r3, #0
1000c520:	1c23      	adds	r3, r4, #0
1000c522:	1c1c      	adds	r4, r3, #0
1000c524:	1c0b      	adds	r3, r1, #0
1000c526:	e7ee      	b.n	1000c506 <internal_event_flush+0x12>
1000c528:	9b01      	ldr	r3, [sp, #4]
1000c52a:	603e      	str	r6, [r7, #0]
1000c52c:	601d      	str	r5, [r3, #0]
1000c52e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c530:	10013df4 	.word	0x10013df4
1000c534:	10013df8 	.word	0x10013df8

1000c538 <internal_conn_flush>:
1000c538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000c53a:	4a12      	ldr	r2, [pc, #72]	; (1000c584 <internal_conn_flush+0x4c>)
1000c53c:	9000      	str	r0, [sp, #0]
1000c53e:	6813      	ldr	r3, [r2, #0]
1000c540:	4811      	ldr	r0, [pc, #68]	; (1000c588 <internal_conn_flush+0x50>)
1000c542:	1c1f      	adds	r7, r3, #0
1000c544:	2100      	movs	r1, #0
1000c546:	4684      	mov	ip, r0
1000c548:	6804      	ldr	r4, [r0, #0]
1000c54a:	9201      	str	r2, [sp, #4]
1000c54c:	2b00      	cmp	r3, #0
1000c54e:	d014      	beq.n	1000c57a <internal_conn_flush+0x42>
1000c550:	88d8      	ldrh	r0, [r3, #6]
1000c552:	9a00      	ldr	r2, [sp, #0]
1000c554:	681d      	ldr	r5, [r3, #0]
1000c556:	0a06      	lsrs	r6, r0, #8
1000c558:	4296      	cmp	r6, r2
1000c55a:	d10b      	bne.n	1000c574 <internal_conn_flush+0x3c>
1000c55c:	26fd      	movs	r6, #253	; 0xfd
1000c55e:	4006      	ands	r6, r0
1000c560:	2e0c      	cmp	r6, #12
1000c562:	d107      	bne.n	1000c574 <internal_conn_flush+0x3c>
1000c564:	2900      	cmp	r1, #0
1000c566:	d001      	beq.n	1000c56c <internal_conn_flush+0x34>
1000c568:	600d      	str	r5, [r1, #0]
1000c56a:	e000      	b.n	1000c56e <internal_conn_flush+0x36>
1000c56c:	1c2f      	adds	r7, r5, #0
1000c56e:	601c      	str	r4, [r3, #0]
1000c570:	1c1c      	adds	r4, r3, #0
1000c572:	1c0b      	adds	r3, r1, #0
1000c574:	1c19      	adds	r1, r3, #0
1000c576:	1c2b      	adds	r3, r5, #0
1000c578:	e7e8      	b.n	1000c54c <internal_conn_flush+0x14>
1000c57a:	9b01      	ldr	r3, [sp, #4]
1000c57c:	601f      	str	r7, [r3, #0]
1000c57e:	4663      	mov	r3, ip
1000c580:	601c      	str	r4, [r3, #0]
1000c582:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000c584:	10013df4 	.word	0x10013df4
1000c588:	10013df8 	.word	0x10013df8

1000c58c <at_ble_device_name_set>:
1000c58c:	b530      	push	{r4, r5, lr}
1000c58e:	23cf      	movs	r3, #207	; 0xcf
1000c590:	2800      	cmp	r0, #0
1000c592:	d010      	beq.n	1000c5b6 <at_ble_device_name_set+0x2a>
1000c594:	1e4a      	subs	r2, r1, #1
1000c596:	2a1f      	cmp	r2, #31
1000c598:	d80d      	bhi.n	1000c5b6 <at_ble_device_name_set+0x2a>
1000c59a:	4a08      	ldr	r2, [pc, #32]	; (1000c5bc <at_ble_device_name_set+0x30>)
1000c59c:	1c13      	adds	r3, r2, #0
1000c59e:	33aa      	adds	r3, #170	; 0xaa
1000c5a0:	8019      	strh	r1, [r3, #0]
1000c5a2:	2300      	movs	r3, #0
1000c5a4:	1c1c      	adds	r4, r3, #0
1000c5a6:	5cc5      	ldrb	r5, [r0, r3]
1000c5a8:	34ac      	adds	r4, #172	; 0xac
1000c5aa:	3301      	adds	r3, #1
1000c5ac:	5515      	strb	r5, [r2, r4]
1000c5ae:	b2dc      	uxtb	r4, r3
1000c5b0:	428c      	cmp	r4, r1
1000c5b2:	d3f7      	bcc.n	1000c5a4 <at_ble_device_name_set+0x18>
1000c5b4:	2300      	movs	r3, #0
1000c5b6:	1c18      	adds	r0, r3, #0
1000c5b8:	bd30      	pop	{r4, r5, pc}
1000c5ba:	46c0      	nop			; (mov r8, r8)
1000c5bc:	10014b96 	.word	0x10014b96

1000c5c0 <at_ble_addr_get>:
1000c5c0:	b510      	push	{r4, lr}
1000c5c2:	1c04      	adds	r4, r0, #0
1000c5c4:	20cf      	movs	r0, #207	; 0xcf
1000c5c6:	2c00      	cmp	r4, #0
1000c5c8:	d006      	beq.n	1000c5d8 <at_ble_addr_get+0x18>
1000c5ca:	4b04      	ldr	r3, [pc, #16]	; (1000c5dc <at_ble_addr_get+0x1c>)
1000c5cc:	38ce      	subs	r0, #206	; 0xce
1000c5ce:	1c21      	adds	r1, r4, #0
1000c5d0:	4798      	blx	r3
1000c5d2:	4b03      	ldr	r3, [pc, #12]	; (1000c5e0 <at_ble_addr_get+0x20>)
1000c5d4:	791b      	ldrb	r3, [r3, #4]
1000c5d6:	7023      	strb	r3, [r4, #0]
1000c5d8:	bd10      	pop	{r4, pc}
1000c5da:	46c0      	nop			; (mov r8, r8)
1000c5dc:	1000de91 	.word	0x1000de91
1000c5e0:	10014b96 	.word	0x10014b96

1000c5e4 <at_ble_set_dev_config>:
1000c5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5e6:	7906      	ldrb	r6, [r0, #4]
1000c5e8:	b089      	sub	sp, #36	; 0x24
1000c5ea:	25cf      	movs	r5, #207	; 0xcf
1000c5ec:	2e03      	cmp	r6, #3
1000c5ee:	d838      	bhi.n	1000c662 <at_ble_set_dev_config+0x7e>
1000c5f0:	7803      	ldrb	r3, [r0, #0]
1000c5f2:	3511      	adds	r5, #17
1000c5f4:	2b0f      	cmp	r3, #15
1000c5f6:	d834      	bhi.n	1000c662 <at_ble_set_dev_config+0x7e>
1000c5f8:	2380      	movs	r3, #128	; 0x80
1000c5fa:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000c5fc:	3d11      	subs	r5, #17
1000c5fe:	009b      	lsls	r3, r3, #2
1000c600:	429f      	cmp	r7, r3
1000c602:	d82e      	bhi.n	1000c662 <at_ble_set_dev_config+0x7e>
1000c604:	7fc5      	ldrb	r5, [r0, #31]
1000c606:	7f83      	ldrb	r3, [r0, #30]
1000c608:	01ad      	lsls	r5, r5, #6
1000c60a:	015b      	lsls	r3, r3, #5
1000c60c:	431d      	orrs	r5, r3
1000c60e:	7ec3      	ldrb	r3, [r0, #27]
1000c610:	431d      	orrs	r5, r3
1000c612:	7f43      	ldrb	r3, [r0, #29]
1000c614:	011b      	lsls	r3, r3, #4
1000c616:	431d      	orrs	r5, r3
1000c618:	7f03      	ldrb	r3, [r0, #28]
1000c61a:	009b      	lsls	r3, r3, #2
1000c61c:	431d      	orrs	r5, r3
1000c61e:	4b12      	ldr	r3, [pc, #72]	; (1000c668 <at_ble_set_dev_config+0x84>)
1000c620:	b2ed      	uxtb	r5, r5
1000c622:	711e      	strb	r6, [r3, #4]
1000c624:	7903      	ldrb	r3, [r0, #4]
1000c626:	3b02      	subs	r3, #2
1000c628:	2b01      	cmp	r3, #1
1000c62a:	d801      	bhi.n	1000c630 <at_ble_set_dev_config+0x4c>
1000c62c:	2302      	movs	r3, #2
1000c62e:	7103      	strb	r3, [r0, #4]
1000c630:	1c04      	adds	r4, r0, #0
1000c632:	1c23      	adds	r3, r4, #0
1000c634:	330b      	adds	r3, #11
1000c636:	8861      	ldrh	r1, [r4, #2]
1000c638:	9307      	str	r3, [sp, #28]
1000c63a:	7923      	ldrb	r3, [r4, #4]
1000c63c:	7800      	ldrb	r0, [r0, #0]
1000c63e:	9300      	str	r3, [sp, #0]
1000c640:	9501      	str	r5, [sp, #4]
1000c642:	8c25      	ldrh	r5, [r4, #32]
1000c644:	1d62      	adds	r2, r4, #5
1000c646:	9502      	str	r5, [sp, #8]
1000c648:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000c64a:	9b07      	ldr	r3, [sp, #28]
1000c64c:	9503      	str	r5, [sp, #12]
1000c64e:	9704      	str	r7, [sp, #16]
1000c650:	4d06      	ldr	r5, [pc, #24]	; (1000c66c <at_ble_set_dev_config+0x88>)
1000c652:	47a8      	blx	r5
1000c654:	7126      	strb	r6, [r4, #4]
1000c656:	1c05      	adds	r5, r0, #0
1000c658:	1c21      	adds	r1, r4, #0
1000c65a:	4803      	ldr	r0, [pc, #12]	; (1000c668 <at_ble_set_dev_config+0x84>)
1000c65c:	2226      	movs	r2, #38	; 0x26
1000c65e:	4b04      	ldr	r3, [pc, #16]	; (1000c670 <at_ble_set_dev_config+0x8c>)
1000c660:	4798      	blx	r3
1000c662:	1c28      	adds	r0, r5, #0
1000c664:	b009      	add	sp, #36	; 0x24
1000c666:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c668:	10014b96 	.word	0x10014b96
1000c66c:	1000dd89 	.word	0x1000dd89
1000c670:	10010357 	.word	0x10010357

1000c674 <at_ble_init>:
1000c674:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c676:	b087      	sub	sp, #28
1000c678:	af03      	add	r7, sp, #12
1000c67a:	4954      	ldr	r1, [pc, #336]	; (1000c7cc <at_ble_init+0x158>)
1000c67c:	220b      	movs	r2, #11
1000c67e:	4b54      	ldr	r3, [pc, #336]	; (1000c7d0 <at_ble_init+0x15c>)
1000c680:	1c04      	adds	r4, r0, #0
1000c682:	1c38      	adds	r0, r7, #0
1000c684:	4798      	blx	r3
1000c686:	2205      	movs	r2, #5
1000c688:	4b52      	ldr	r3, [pc, #328]	; (1000c7d4 <at_ble_init+0x160>)
1000c68a:	2640      	movs	r6, #64	; 0x40
1000c68c:	801a      	strh	r2, [r3, #0]
1000c68e:	2300      	movs	r3, #0
1000c690:	4a51      	ldr	r2, [pc, #324]	; (1000c7d8 <at_ble_init+0x164>)
1000c692:	6013      	str	r3, [r2, #0]
1000c694:	4a51      	ldr	r2, [pc, #324]	; (1000c7dc <at_ble_init+0x168>)
1000c696:	7013      	strb	r3, [r2, #0]
1000c698:	4a51      	ldr	r2, [pc, #324]	; (1000c7e0 <at_ble_init+0x16c>)
1000c69a:	7013      	strb	r3, [r2, #0]
1000c69c:	4b51      	ldr	r3, [pc, #324]	; (1000c7e4 <at_ble_init+0x170>)
1000c69e:	4798      	blx	r3
1000c6a0:	4b51      	ldr	r3, [pc, #324]	; (1000c7e8 <at_ble_init+0x174>)
1000c6a2:	4798      	blx	r3
1000c6a4:	4b51      	ldr	r3, [pc, #324]	; (1000c7ec <at_ble_init+0x178>)
1000c6a6:	4798      	blx	r3
1000c6a8:	4b51      	ldr	r3, [pc, #324]	; (1000c7f0 <at_ble_init+0x17c>)
1000c6aa:	4798      	blx	r3
1000c6ac:	2c00      	cmp	r4, #0
1000c6ae:	d100      	bne.n	1000c6b2 <at_ble_init+0x3e>
1000c6b0:	e089      	b.n	1000c7c6 <at_ble_init+0x152>
1000c6b2:	68a3      	ldr	r3, [r4, #8]
1000c6b4:	2b00      	cmp	r3, #0
1000c6b6:	d100      	bne.n	1000c6ba <at_ble_init+0x46>
1000c6b8:	e085      	b.n	1000c7c6 <at_ble_init+0x152>
1000c6ba:	6923      	ldr	r3, [r4, #16]
1000c6bc:	2b00      	cmp	r3, #0
1000c6be:	d100      	bne.n	1000c6c2 <at_ble_init+0x4e>
1000c6c0:	e081      	b.n	1000c7c6 <at_ble_init+0x152>
1000c6c2:	6820      	ldr	r0, [r4, #0]
1000c6c4:	2800      	cmp	r0, #0
1000c6c6:	d102      	bne.n	1000c6ce <at_ble_init+0x5a>
1000c6c8:	6863      	ldr	r3, [r4, #4]
1000c6ca:	2b00      	cmp	r3, #0
1000c6cc:	d17b      	bne.n	1000c7c6 <at_ble_init+0x152>
1000c6ce:	4b49      	ldr	r3, [pc, #292]	; (1000c7f4 <at_ble_init+0x180>)
1000c6d0:	6861      	ldr	r1, [r4, #4]
1000c6d2:	4798      	blx	r3
1000c6d4:	4b48      	ldr	r3, [pc, #288]	; (1000c7f8 <at_ble_init+0x184>)
1000c6d6:	4798      	blx	r3
1000c6d8:	2801      	cmp	r0, #1
1000c6da:	d901      	bls.n	1000c6e0 <at_ble_init+0x6c>
1000c6dc:	26e2      	movs	r6, #226	; 0xe2
1000c6de:	e072      	b.n	1000c7c6 <at_ble_init+0x152>
1000c6e0:	4846      	ldr	r0, [pc, #280]	; (1000c7fc <at_ble_init+0x188>)
1000c6e2:	4b47      	ldr	r3, [pc, #284]	; (1000c800 <at_ble_init+0x18c>)
1000c6e4:	4798      	blx	r3
1000c6e6:	2800      	cmp	r0, #0
1000c6e8:	d1f8      	bne.n	1000c6dc <at_ble_init+0x68>
1000c6ea:	1c20      	adds	r0, r4, #0
1000c6ec:	4b45      	ldr	r3, [pc, #276]	; (1000c804 <at_ble_init+0x190>)
1000c6ee:	4798      	blx	r3
1000c6f0:	68e0      	ldr	r0, [r4, #12]
1000c6f2:	68a1      	ldr	r1, [r4, #8]
1000c6f4:	4b44      	ldr	r3, [pc, #272]	; (1000c808 <at_ble_init+0x194>)
1000c6f6:	4798      	blx	r3
1000c6f8:	466b      	mov	r3, sp
1000c6fa:	2201      	movs	r2, #1
1000c6fc:	1cdc      	adds	r4, r3, #3
1000c6fe:	1c20      	adds	r0, r4, #0
1000c700:	a901      	add	r1, sp, #4
1000c702:	4252      	negs	r2, r2
1000c704:	4b41      	ldr	r3, [pc, #260]	; (1000c80c <at_ble_init+0x198>)
1000c706:	4798      	blx	r3
1000c708:	2800      	cmp	r0, #0
1000c70a:	d102      	bne.n	1000c712 <at_ble_init+0x9e>
1000c70c:	7823      	ldrb	r3, [r4, #0]
1000c70e:	2b39      	cmp	r3, #57	; 0x39
1000c710:	d1f2      	bne.n	1000c6f8 <at_ble_init+0x84>
1000c712:	4b3f      	ldr	r3, [pc, #252]	; (1000c810 <at_ble_init+0x19c>)
1000c714:	4798      	blx	r3
1000c716:	1e06      	subs	r6, r0, #0
1000c718:	d155      	bne.n	1000c7c6 <at_ble_init+0x152>
1000c71a:	1c03      	adds	r3, r0, #0
1000c71c:	2101      	movs	r1, #1
1000c71e:	4a3d      	ldr	r2, [pc, #244]	; (1000c814 <at_ble_init+0x1a0>)
1000c720:	4249      	negs	r1, r1
1000c722:	189a      	adds	r2, r3, r2
1000c724:	3312      	adds	r3, #18
1000c726:	8151      	strh	r1, [r2, #10]
1000c728:	2b90      	cmp	r3, #144	; 0x90
1000c72a:	d1f7      	bne.n	1000c71c <at_ble_init+0xa8>
1000c72c:	4c3a      	ldr	r4, [pc, #232]	; (1000c818 <at_ble_init+0x1a4>)
1000c72e:	3b81      	subs	r3, #129	; 0x81
1000c730:	7023      	strb	r3, [r4, #0]
1000c732:	4b3a      	ldr	r3, [pc, #232]	; (1000c81c <at_ble_init+0x1a8>)
1000c734:	4a3a      	ldr	r2, [pc, #232]	; (1000c820 <at_ble_init+0x1ac>)
1000c736:	8063      	strh	r3, [r4, #2]
1000c738:	2300      	movs	r3, #0
1000c73a:	7123      	strb	r3, [r4, #4]
1000c73c:	3301      	adds	r3, #1
1000c73e:	1e58      	subs	r0, r3, #1
1000c740:	0119      	lsls	r1, r3, #4
1000c742:	4301      	orrs	r1, r0
1000c744:	3302      	adds	r3, #2
1000c746:	7011      	strb	r1, [r2, #0]
1000c748:	3201      	adds	r2, #1
1000c74a:	2b21      	cmp	r3, #33	; 0x21
1000c74c:	d1f7      	bne.n	1000c73e <at_ble_init+0xca>
1000c74e:	33e0      	adds	r3, #224	; 0xe0
1000c750:	33ff      	adds	r3, #255	; 0xff
1000c752:	84a3      	strh	r3, [r4, #36]	; 0x24
1000c754:	1c23      	adds	r3, r4, #0
1000c756:	2500      	movs	r5, #0
1000c758:	3373      	adds	r3, #115	; 0x73
1000c75a:	701d      	strb	r5, [r3, #0]
1000c75c:	1c23      	adds	r3, r4, #0
1000c75e:	3372      	adds	r3, #114	; 0x72
1000c760:	701d      	strb	r5, [r3, #0]
1000c762:	1c23      	adds	r3, r4, #0
1000c764:	3376      	adds	r3, #118	; 0x76
1000c766:	701d      	strb	r5, [r3, #0]
1000c768:	1c23      	adds	r3, r4, #0
1000c76a:	33cc      	adds	r3, #204	; 0xcc
1000c76c:	801d      	strh	r5, [r3, #0]
1000c76e:	1c22      	adds	r2, r4, #0
1000c770:	23a0      	movs	r3, #160	; 0xa0
1000c772:	32d0      	adds	r2, #208	; 0xd0
1000c774:	005b      	lsls	r3, r3, #1
1000c776:	8013      	strh	r3, [r2, #0]
1000c778:	1c22      	adds	r2, r4, #0
1000c77a:	32ce      	adds	r2, #206	; 0xce
1000c77c:	8013      	strh	r3, [r2, #0]
1000c77e:	1c23      	adds	r3, r4, #0
1000c780:	33d2      	adds	r3, #210	; 0xd2
1000c782:	801d      	strh	r5, [r3, #0]
1000c784:	22fa      	movs	r2, #250	; 0xfa
1000c786:	1c23      	adds	r3, r4, #0
1000c788:	0052      	lsls	r2, r2, #1
1000c78a:	33d4      	adds	r3, #212	; 0xd4
1000c78c:	801a      	strh	r2, [r3, #0]
1000c78e:	1c23      	adds	r3, r4, #0
1000c790:	33d6      	adds	r3, #214	; 0xd6
1000c792:	701d      	strb	r5, [r3, #0]
1000c794:	1c20      	adds	r0, r4, #0
1000c796:	4b23      	ldr	r3, [pc, #140]	; (1000c824 <at_ble_init+0x1b0>)
1000c798:	76e5      	strb	r5, [r4, #27]
1000c79a:	7725      	strb	r5, [r4, #28]
1000c79c:	7765      	strb	r5, [r4, #29]
1000c79e:	77a5      	strb	r5, [r4, #30]
1000c7a0:	77e5      	strb	r5, [r4, #31]
1000c7a2:	8425      	strh	r5, [r4, #32]
1000c7a4:	8465      	strh	r5, [r4, #34]	; 0x22
1000c7a6:	4798      	blx	r3
1000c7a8:	1c23      	adds	r3, r4, #0
1000c7aa:	2207      	movs	r2, #7
1000c7ac:	3374      	adds	r3, #116	; 0x74
1000c7ae:	701a      	strb	r2, [r3, #0]
1000c7b0:	1c23      	adds	r3, r4, #0
1000c7b2:	3204      	adds	r2, #4
1000c7b4:	33aa      	adds	r3, #170	; 0xaa
1000c7b6:	801a      	strh	r2, [r3, #0]
1000c7b8:	1c2b      	adds	r3, r5, #0
1000c7ba:	5d7a      	ldrb	r2, [r7, r5]
1000c7bc:	33ac      	adds	r3, #172	; 0xac
1000c7be:	3501      	adds	r5, #1
1000c7c0:	54e2      	strb	r2, [r4, r3]
1000c7c2:	2d0b      	cmp	r5, #11
1000c7c4:	d1f8      	bne.n	1000c7b8 <at_ble_init+0x144>
1000c7c6:	1c30      	adds	r0, r6, #0
1000c7c8:	b007      	add	sp, #28
1000c7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c7cc:	10012200 	.word	0x10012200
1000c7d0:	10010357 	.word	0x10010357
1000c7d4:	10014b04 	.word	0x10014b04
1000c7d8:	10013ea4 	.word	0x10013ea4
1000c7dc:	10013e04 	.word	0x10013e04
1000c7e0:	10012364 	.word	0x10012364
1000c7e4:	1000e849 	.word	0x1000e849
1000c7e8:	1000cac5 	.word	0x1000cac5
1000c7ec:	1000cb41 	.word	0x1000cb41
1000c7f0:	1000cd61 	.word	0x1000cd61
1000c7f4:	1000cb7d 	.word	0x1000cb7d
1000c7f8:	1000b1b9 	.word	0x1000b1b9
1000c7fc:	1000d0a9 	.word	0x1000d0a9
1000c800:	1000b3fd 	.word	0x1000b3fd
1000c804:	1000d151 	.word	0x1000d151
1000c808:	1000bd61 	.word	0x1000bd61
1000c80c:	1000be1d 	.word	0x1000be1d
1000c810:	1000dd19 	.word	0x1000dd19
1000c814:	10014b06 	.word	0x10014b06
1000c818:	10014b96 	.word	0x10014b96
1000c81c:	00003a98 	.word	0x00003a98
1000c820:	10014ba1 	.word	0x10014ba1
1000c824:	1000c5e5 	.word	0x1000c5e5

1000c828 <at_ble_addr_set>:
1000c828:	b538      	push	{r3, r4, r5, lr}
1000c82a:	1c45      	adds	r5, r0, #1
1000c82c:	1c03      	adds	r3, r0, #0
1000c82e:	20cf      	movs	r0, #207	; 0xcf
1000c830:	2d00      	cmp	r5, #0
1000c832:	d018      	beq.n	1000c866 <at_ble_addr_set+0x3e>
1000c834:	781a      	ldrb	r2, [r3, #0]
1000c836:	2a03      	cmp	r2, #3
1000c838:	d815      	bhi.n	1000c866 <at_ble_addr_set+0x3e>
1000c83a:	2a01      	cmp	r2, #1
1000c83c:	d102      	bne.n	1000c844 <at_ble_addr_set+0x1c>
1000c83e:	785a      	ldrb	r2, [r3, #1]
1000c840:	2a00      	cmp	r2, #0
1000c842:	d010      	beq.n	1000c866 <at_ble_addr_set+0x3e>
1000c844:	1c1c      	adds	r4, r3, #0
1000c846:	1c29      	adds	r1, r5, #0
1000c848:	2206      	movs	r2, #6
1000c84a:	4b07      	ldr	r3, [pc, #28]	; (1000c868 <at_ble_addr_set+0x40>)
1000c84c:	4807      	ldr	r0, [pc, #28]	; (1000c86c <at_ble_addr_set+0x44>)
1000c84e:	4798      	blx	r3
1000c850:	7823      	ldrb	r3, [r4, #0]
1000c852:	4807      	ldr	r0, [pc, #28]	; (1000c870 <at_ble_addr_set+0x48>)
1000c854:	7103      	strb	r3, [r0, #4]
1000c856:	4b07      	ldr	r3, [pc, #28]	; (1000c874 <at_ble_addr_set+0x4c>)
1000c858:	4798      	blx	r3
1000c85a:	7823      	ldrb	r3, [r4, #0]
1000c85c:	2b00      	cmp	r3, #0
1000c85e:	d102      	bne.n	1000c866 <at_ble_addr_set+0x3e>
1000c860:	1c28      	adds	r0, r5, #0
1000c862:	4b05      	ldr	r3, [pc, #20]	; (1000c878 <at_ble_addr_set+0x50>)
1000c864:	4798      	blx	r3
1000c866:	bd38      	pop	{r3, r4, r5, pc}
1000c868:	10010357 	.word	0x10010357
1000c86c:	10014b9b 	.word	0x10014b9b
1000c870:	10014b96 	.word	0x10014b96
1000c874:	1000c5e5 	.word	0x1000c5e5
1000c878:	1000d1d5 	.word	0x1000d1d5

1000c87c <at_ble_adv_data_set>:
1000c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c87e:	4684      	mov	ip, r0
1000c880:	1c0f      	adds	r7, r1, #0
1000c882:	1c16      	adds	r6, r2, #0
1000c884:	1c1c      	adds	r4, r3, #0
1000c886:	2800      	cmp	r0, #0
1000c888:	d102      	bne.n	1000c890 <at_ble_adv_data_set+0x14>
1000c88a:	20e2      	movs	r0, #226	; 0xe2
1000c88c:	2a00      	cmp	r2, #0
1000c88e:	d02b      	beq.n	1000c8e8 <at_ble_adv_data_set+0x6c>
1000c890:	20cf      	movs	r0, #207	; 0xcf
1000c892:	2f1f      	cmp	r7, #31
1000c894:	d828      	bhi.n	1000c8e8 <at_ble_adv_data_set+0x6c>
1000c896:	2c1f      	cmp	r4, #31
1000c898:	d826      	bhi.n	1000c8e8 <at_ble_adv_data_set+0x6c>
1000c89a:	4663      	mov	r3, ip
1000c89c:	2b00      	cmp	r3, #0
1000c89e:	d00e      	beq.n	1000c8be <at_ble_adv_data_set+0x42>
1000c8a0:	4812      	ldr	r0, [pc, #72]	; (1000c8ec <at_ble_adv_data_set+0x70>)
1000c8a2:	4d13      	ldr	r5, [pc, #76]	; (1000c8f0 <at_ble_adv_data_set+0x74>)
1000c8a4:	2f00      	cmp	r7, #0
1000c8a6:	d104      	bne.n	1000c8b2 <at_ble_adv_data_set+0x36>
1000c8a8:	1c39      	adds	r1, r7, #0
1000c8aa:	221f      	movs	r2, #31
1000c8ac:	4b11      	ldr	r3, [pc, #68]	; (1000c8f4 <at_ble_adv_data_set+0x78>)
1000c8ae:	4798      	blx	r3
1000c8b0:	e003      	b.n	1000c8ba <at_ble_adv_data_set+0x3e>
1000c8b2:	4661      	mov	r1, ip
1000c8b4:	1c3a      	adds	r2, r7, #0
1000c8b6:	4b10      	ldr	r3, [pc, #64]	; (1000c8f8 <at_ble_adv_data_set+0x7c>)
1000c8b8:	4798      	blx	r3
1000c8ba:	3572      	adds	r5, #114	; 0x72
1000c8bc:	702f      	strb	r7, [r5, #0]
1000c8be:	1e30      	subs	r0, r6, #0
1000c8c0:	d012      	beq.n	1000c8e8 <at_ble_adv_data_set+0x6c>
1000c8c2:	4d0b      	ldr	r5, [pc, #44]	; (1000c8f0 <at_ble_adv_data_set+0x74>)
1000c8c4:	480d      	ldr	r0, [pc, #52]	; (1000c8fc <at_ble_adv_data_set+0x80>)
1000c8c6:	2c00      	cmp	r4, #0
1000c8c8:	d107      	bne.n	1000c8da <at_ble_adv_data_set+0x5e>
1000c8ca:	1c21      	adds	r1, r4, #0
1000c8cc:	221f      	movs	r2, #31
1000c8ce:	4b09      	ldr	r3, [pc, #36]	; (1000c8f4 <at_ble_adv_data_set+0x78>)
1000c8d0:	3573      	adds	r5, #115	; 0x73
1000c8d2:	4798      	blx	r3
1000c8d4:	702c      	strb	r4, [r5, #0]
1000c8d6:	1c20      	adds	r0, r4, #0
1000c8d8:	e006      	b.n	1000c8e8 <at_ble_adv_data_set+0x6c>
1000c8da:	1c31      	adds	r1, r6, #0
1000c8dc:	1c22      	adds	r2, r4, #0
1000c8de:	4b06      	ldr	r3, [pc, #24]	; (1000c8f8 <at_ble_adv_data_set+0x7c>)
1000c8e0:	4798      	blx	r3
1000c8e2:	2000      	movs	r0, #0
1000c8e4:	3573      	adds	r5, #115	; 0x73
1000c8e6:	702c      	strb	r4, [r5, #0]
1000c8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c8ea:	46c0      	nop			; (mov r8, r8)
1000c8ec:	10014bca 	.word	0x10014bca
1000c8f0:	10014b96 	.word	0x10014b96
1000c8f4:	10010369 	.word	0x10010369
1000c8f8:	10010357 	.word	0x10010357
1000c8fc:	10014be9 	.word	0x10014be9

1000c900 <at_ble_adv_start>:
1000c900:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c902:	b091      	sub	sp, #68	; 0x44
1000c904:	1c1f      	adds	r7, r3, #0
1000c906:	ab16      	add	r3, sp, #88	; 0x58
1000c908:	881d      	ldrh	r5, [r3, #0]
1000c90a:	ab17      	add	r3, sp, #92	; 0x5c
1000c90c:	881b      	ldrh	r3, [r3, #0]
1000c90e:	910d      	str	r1, [sp, #52]	; 0x34
1000c910:	930e      	str	r3, [sp, #56]	; 0x38
1000c912:	ab18      	add	r3, sp, #96	; 0x60
1000c914:	781b      	ldrb	r3, [r3, #0]
1000c916:	1c04      	adds	r4, r0, #0
1000c918:	930f      	str	r3, [sp, #60]	; 0x3c
1000c91a:	4b42      	ldr	r3, [pc, #264]	; (1000ca24 <at_ble_adv_start+0x124>)
1000c91c:	1c16      	adds	r6, r2, #0
1000c91e:	3373      	adds	r3, #115	; 0x73
1000c920:	781b      	ldrb	r3, [r3, #0]
1000c922:	20cf      	movs	r0, #207	; 0xcf
1000c924:	930c      	str	r3, [sp, #48]	; 0x30
1000c926:	2c01      	cmp	r4, #1
1000c928:	d103      	bne.n	1000c932 <at_ble_adv_start+0x32>
1000c92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000c92c:	2b00      	cmp	r3, #0
1000c92e:	d176      	bne.n	1000ca1e <at_ble_adv_start+0x11e>
1000c930:	e024      	b.n	1000c97c <at_ble_adv_start+0x7c>
1000c932:	2c04      	cmp	r4, #4
1000c934:	d873      	bhi.n	1000ca1e <at_ble_adv_start+0x11e>
1000c936:	2380      	movs	r3, #128	; 0x80
1000c938:	01db      	lsls	r3, r3, #7
1000c93a:	429d      	cmp	r5, r3
1000c93c:	d86f      	bhi.n	1000ca1e <at_ble_adv_start+0x11e>
1000c93e:	2c00      	cmp	r4, #0
1000c940:	d102      	bne.n	1000c948 <at_ble_adv_start+0x48>
1000c942:	2d1f      	cmp	r5, #31
1000c944:	d96b      	bls.n	1000ca1e <at_ble_adv_start+0x11e>
1000c946:	e003      	b.n	1000c950 <at_ble_adv_start+0x50>
1000c948:	2d9f      	cmp	r5, #159	; 0x9f
1000c94a:	d801      	bhi.n	1000c950 <at_ble_adv_start+0x50>
1000c94c:	2c01      	cmp	r4, #1
1000c94e:	d166      	bne.n	1000ca1e <at_ble_adv_start+0x11e>
1000c950:	2f00      	cmp	r7, #0
1000c952:	d009      	beq.n	1000c968 <at_ble_adv_start+0x68>
1000c954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000c956:	20cf      	movs	r0, #207	; 0xcf
1000c958:	3b01      	subs	r3, #1
1000c95a:	2b01      	cmp	r3, #1
1000c95c:	d95f      	bls.n	1000ca1e <at_ble_adv_start+0x11e>
1000c95e:	2c01      	cmp	r4, #1
1000c960:	d102      	bne.n	1000c968 <at_ble_adv_start+0x68>
1000c962:	2d00      	cmp	r5, #0
1000c964:	d100      	bne.n	1000c968 <at_ble_adv_start+0x68>
1000c966:	3520      	adds	r5, #32
1000c968:	4b2f      	ldr	r3, [pc, #188]	; (1000ca28 <at_ble_adv_start+0x128>)
1000c96a:	4798      	blx	r3
1000c96c:	1c01      	adds	r1, r0, #0
1000c96e:	2e00      	cmp	r6, #0
1000c970:	d043      	beq.n	1000c9fa <at_ble_adv_start+0xfa>
1000c972:	7833      	ldrb	r3, [r6, #0]
1000c974:	1e60      	subs	r0, r4, #1
1000c976:	2b00      	cmp	r3, #0
1000c978:	d109      	bne.n	1000c98e <at_ble_adv_start+0x8e>
1000c97a:	e03b      	b.n	1000c9f4 <at_ble_adv_start+0xf4>
1000c97c:	2380      	movs	r3, #128	; 0x80
1000c97e:	01db      	lsls	r3, r3, #7
1000c980:	429d      	cmp	r5, r3
1000c982:	d84c      	bhi.n	1000ca1e <at_ble_adv_start+0x11e>
1000c984:	2e00      	cmp	r6, #0
1000c986:	d04a      	beq.n	1000ca1e <at_ble_adv_start+0x11e>
1000c988:	2f00      	cmp	r7, #0
1000c98a:	d1e3      	bne.n	1000c954 <at_ble_adv_start+0x54>
1000c98c:	e02b      	b.n	1000c9e6 <at_ble_adv_start+0xe6>
1000c98e:	2301      	movs	r3, #1
1000c990:	2803      	cmp	r0, #3
1000c992:	d93a      	bls.n	1000ca0a <at_ble_adv_start+0x10a>
1000c994:	200d      	movs	r0, #13
1000c996:	1c72      	adds	r2, r6, #1
1000c998:	e002      	b.n	1000c9a0 <at_ble_adv_start+0xa0>
1000c99a:	200e      	movs	r0, #14
1000c99c:	1e32      	subs	r2, r6, #0
1000c99e:	d1fa      	bne.n	1000c996 <at_ble_adv_start+0x96>
1000c9a0:	4c20      	ldr	r4, [pc, #128]	; (1000ca24 <at_ble_adv_start+0x124>)
1000c9a2:	3474      	adds	r4, #116	; 0x74
1000c9a4:	7826      	ldrb	r6, [r4, #0]
1000c9a6:	2407      	movs	r4, #7
1000c9a8:	2e00      	cmp	r6, #0
1000c9aa:	d000      	beq.n	1000c9ae <at_ble_adv_start+0xae>
1000c9ac:	1c34      	adds	r4, r6, #0
1000c9ae:	9200      	str	r2, [sp, #0]
1000c9b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000c9b2:	9403      	str	r4, [sp, #12]
1000c9b4:	9204      	str	r2, [sp, #16]
1000c9b6:	4a1b      	ldr	r2, [pc, #108]	; (1000ca24 <at_ble_adv_start+0x124>)
1000c9b8:	9501      	str	r5, [sp, #4]
1000c9ba:	9502      	str	r5, [sp, #8]
1000c9bc:	9705      	str	r7, [sp, #20]
1000c9be:	3272      	adds	r2, #114	; 0x72
1000c9c0:	7812      	ldrb	r2, [r2, #0]
1000c9c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000c9c4:	9206      	str	r2, [sp, #24]
1000c9c6:	4a19      	ldr	r2, [pc, #100]	; (1000ca2c <at_ble_adv_start+0x12c>)
1000c9c8:	9207      	str	r2, [sp, #28]
1000c9ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000c9cc:	9208      	str	r2, [sp, #32]
1000c9ce:	4a18      	ldr	r2, [pc, #96]	; (1000ca30 <at_ble_adv_start+0x130>)
1000c9d0:	9209      	str	r2, [sp, #36]	; 0x24
1000c9d2:	2264      	movs	r2, #100	; 0x64
1000c9d4:	4362      	muls	r2, r4
1000c9d6:	b292      	uxth	r2, r2
1000c9d8:	920a      	str	r2, [sp, #40]	; 0x28
1000c9da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000c9dc:	4c15      	ldr	r4, [pc, #84]	; (1000ca34 <at_ble_adv_start+0x134>)
1000c9de:	920b      	str	r2, [sp, #44]	; 0x2c
1000c9e0:	4a15      	ldr	r2, [pc, #84]	; (1000ca38 <at_ble_adv_start+0x138>)
1000c9e2:	47a0      	blx	r4
1000c9e4:	e01b      	b.n	1000ca1e <at_ble_adv_start+0x11e>
1000c9e6:	2d00      	cmp	r5, #0
1000c9e8:	d1be      	bne.n	1000c968 <at_ble_adv_start+0x68>
1000c9ea:	4b0f      	ldr	r3, [pc, #60]	; (1000ca28 <at_ble_adv_start+0x128>)
1000c9ec:	4798      	blx	r3
1000c9ee:	2520      	movs	r5, #32
1000c9f0:	1c01      	adds	r1, r0, #0
1000c9f2:	e7be      	b.n	1000c972 <at_ble_adv_start+0x72>
1000c9f4:	2803      	cmp	r0, #3
1000c9f6:	d8cd      	bhi.n	1000c994 <at_ble_adv_start+0x94>
1000c9f8:	e006      	b.n	1000ca08 <at_ble_adv_start+0x108>
1000c9fa:	1e60      	subs	r0, r4, #1
1000c9fc:	2803      	cmp	r0, #3
1000c9fe:	d903      	bls.n	1000ca08 <at_ble_adv_start+0x108>
1000ca00:	1c33      	adds	r3, r6, #0
1000ca02:	200d      	movs	r0, #13
1000ca04:	1c32      	adds	r2, r6, #0
1000ca06:	e7cb      	b.n	1000c9a0 <at_ble_adv_start+0xa0>
1000ca08:	2300      	movs	r3, #0
1000ca0a:	f002 f84d 	bl	1000eaa8 <__gnu_thumb1_case_sqi>
1000ca0e:	06c6      	.short	0x06c6
1000ca10:	0204      	.short	0x0204
1000ca12:	200f      	movs	r0, #15
1000ca14:	e7c2      	b.n	1000c99c <at_ble_adv_start+0x9c>
1000ca16:	2200      	movs	r2, #0
1000ca18:	920c      	str	r2, [sp, #48]	; 0x30
1000ca1a:	200c      	movs	r0, #12
1000ca1c:	e7be      	b.n	1000c99c <at_ble_adv_start+0x9c>
1000ca1e:	b011      	add	sp, #68	; 0x44
1000ca20:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca22:	46c0      	nop			; (mov r8, r8)
1000ca24:	10014b96 	.word	0x10014b96
1000ca28:	1000e265 	.word	0x1000e265
1000ca2c:	10014bca 	.word	0x10014bca
1000ca30:	10014be9 	.word	0x10014be9
1000ca34:	1000e145 	.word	0x1000e145
1000ca38:	00003a98 	.word	0x00003a98

1000ca3c <at_ble_scan_stop>:
1000ca3c:	b510      	push	{r4, lr}
1000ca3e:	4b05      	ldr	r3, [pc, #20]	; (1000ca54 <at_ble_scan_stop+0x18>)
1000ca40:	4798      	blx	r3
1000ca42:	1e04      	subs	r4, r0, #0
1000ca44:	d103      	bne.n	1000ca4e <at_ble_scan_stop+0x12>
1000ca46:	20d1      	movs	r0, #209	; 0xd1
1000ca48:	4b03      	ldr	r3, [pc, #12]	; (1000ca58 <at_ble_scan_stop+0x1c>)
1000ca4a:	0100      	lsls	r0, r0, #4
1000ca4c:	4798      	blx	r3
1000ca4e:	1c20      	adds	r0, r4, #0
1000ca50:	bd10      	pop	{r4, pc}
1000ca52:	46c0      	nop			; (mov r8, r8)
1000ca54:	1000df71 	.word	0x1000df71
1000ca58:	1000c4f5 	.word	0x1000c4f5

1000ca5c <at_ble_disconnect>:
1000ca5c:	b538      	push	{r3, r4, r5, lr}
1000ca5e:	1c04      	adds	r4, r0, #0
1000ca60:	4b04      	ldr	r3, [pc, #16]	; (1000ca74 <at_ble_disconnect+0x18>)
1000ca62:	1c08      	adds	r0, r1, #0
1000ca64:	1c21      	adds	r1, r4, #0
1000ca66:	4798      	blx	r3
1000ca68:	1c05      	adds	r5, r0, #0
1000ca6a:	4b03      	ldr	r3, [pc, #12]	; (1000ca78 <at_ble_disconnect+0x1c>)
1000ca6c:	1c20      	adds	r0, r4, #0
1000ca6e:	4798      	blx	r3
1000ca70:	1c28      	adds	r0, r5, #0
1000ca72:	bd38      	pop	{r3, r4, r5, pc}
1000ca74:	1000d5e9 	.word	0x1000d5e9
1000ca78:	1000c539 	.word	0x1000c539

1000ca7c <at_ble_conn_update_reply>:
1000ca7c:	b510      	push	{r4, lr}
1000ca7e:	4c01      	ldr	r4, [pc, #4]	; (1000ca84 <at_ble_conn_update_reply+0x8>)
1000ca80:	47a0      	blx	r4
1000ca82:	bd10      	pop	{r4, pc}
1000ca84:	1000dad9 	.word	0x1000dad9

1000ca88 <at_ble_random_address_resolve>:
1000ca88:	b510      	push	{r4, lr}
1000ca8a:	23cf      	movs	r3, #207	; 0xcf
1000ca8c:	2800      	cmp	r0, #0
1000ca8e:	d00a      	beq.n	1000caa6 <at_ble_random_address_resolve+0x1e>
1000ca90:	2900      	cmp	r1, #0
1000ca92:	d008      	beq.n	1000caa6 <at_ble_random_address_resolve+0x1e>
1000ca94:	2a00      	cmp	r2, #0
1000ca96:	d006      	beq.n	1000caa6 <at_ble_random_address_resolve+0x1e>
1000ca98:	780c      	ldrb	r4, [r1, #0]
1000ca9a:	2c02      	cmp	r4, #2
1000ca9c:	d103      	bne.n	1000caa6 <at_ble_random_address_resolve+0x1e>
1000ca9e:	4b03      	ldr	r3, [pc, #12]	; (1000caac <at_ble_random_address_resolve+0x24>)
1000caa0:	3101      	adds	r1, #1
1000caa2:	4798      	blx	r3
1000caa4:	2300      	movs	r3, #0
1000caa6:	1c18      	adds	r0, r3, #0
1000caa8:	bd10      	pop	{r4, pc}
1000caaa:	46c0      	nop			; (mov r8, r8)
1000caac:	1000e305 	.word	0x1000e305

1000cab0 <at_ble_uuid_len2type>:
1000cab0:	1e83      	subs	r3, r0, #2
1000cab2:	b2db      	uxtb	r3, r3
1000cab4:	2003      	movs	r0, #3
1000cab6:	2b0e      	cmp	r3, #14
1000cab8:	d801      	bhi.n	1000cabe <at_ble_uuid_len2type+0xe>
1000caba:	4a01      	ldr	r2, [pc, #4]	; (1000cac0 <at_ble_uuid_len2type+0x10>)
1000cabc:	5cd0      	ldrb	r0, [r2, r3]
1000cabe:	4770      	bx	lr
1000cac0:	1001220b 	.word	0x1001220b

1000cac4 <init_gatt_client_module>:
1000cac4:	2200      	movs	r2, #0
1000cac6:	4b01      	ldr	r3, [pc, #4]	; (1000cacc <init_gatt_client_module+0x8>)
1000cac8:	801a      	strh	r2, [r3, #0]
1000caca:	4770      	bx	lr
1000cacc:	10013dfc 	.word	0x10013dfc

1000cad0 <db_searchATT>:
1000cad0:	b570      	push	{r4, r5, r6, lr}
1000cad2:	1c05      	adds	r5, r0, #0
1000cad4:	2400      	movs	r4, #0
1000cad6:	4b0c      	ldr	r3, [pc, #48]	; (1000cb08 <db_searchATT+0x38>)
1000cad8:	6819      	ldr	r1, [r3, #0]
1000cada:	4b0c      	ldr	r3, [pc, #48]	; (1000cb0c <db_searchATT+0x3c>)
1000cadc:	681e      	ldr	r6, [r3, #0]
1000cade:	428c      	cmp	r4, r1
1000cae0:	dc10      	bgt.n	1000cb04 <db_searchATT+0x34>
1000cae2:	200c      	movs	r0, #12
1000cae4:	1863      	adds	r3, r4, r1
1000cae6:	0fda      	lsrs	r2, r3, #31
1000cae8:	18d3      	adds	r3, r2, r3
1000caea:	1c02      	adds	r2, r0, #0
1000caec:	105b      	asrs	r3, r3, #1
1000caee:	435a      	muls	r2, r3
1000caf0:	18b0      	adds	r0, r6, r2
1000caf2:	8802      	ldrh	r2, [r0, #0]
1000caf4:	42aa      	cmp	r2, r5
1000caf6:	d201      	bcs.n	1000cafc <db_searchATT+0x2c>
1000caf8:	1e59      	subs	r1, r3, #1
1000cafa:	e7f0      	b.n	1000cade <db_searchATT+0xe>
1000cafc:	42aa      	cmp	r2, r5
1000cafe:	d902      	bls.n	1000cb06 <db_searchATT+0x36>
1000cb00:	1c5c      	adds	r4, r3, #1
1000cb02:	e7ec      	b.n	1000cade <db_searchATT+0xe>
1000cb04:	2000      	movs	r0, #0
1000cb06:	bd70      	pop	{r4, r5, r6, pc}
1000cb08:	10013e10 	.word	0x10013e10
1000cb0c:	10013e08 	.word	0x10013e08

1000cb10 <at_ble_read_authorize_reply.part.1>:
1000cb10:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000cb12:	4b09      	ldr	r3, [pc, #36]	; (1000cb38 <at_ble_read_authorize_reply.part.1+0x28>)
1000cb14:	1c05      	adds	r5, r0, #0
1000cb16:	1c08      	adds	r0, r1, #0
1000cb18:	1c0c      	adds	r4, r1, #0
1000cb1a:	4798      	blx	r3
1000cb1c:	2800      	cmp	r0, #0
1000cb1e:	d009      	beq.n	1000cb34 <at_ble_read_authorize_reply.part.1+0x24>
1000cb20:	6882      	ldr	r2, [r0, #8]
1000cb22:	2a00      	cmp	r2, #0
1000cb24:	d006      	beq.n	1000cb34 <at_ble_read_authorize_reply.part.1+0x24>
1000cb26:	8883      	ldrh	r3, [r0, #4]
1000cb28:	1c29      	adds	r1, r5, #0
1000cb2a:	9200      	str	r2, [sp, #0]
1000cb2c:	1c20      	adds	r0, r4, #0
1000cb2e:	2200      	movs	r2, #0
1000cb30:	4c02      	ldr	r4, [pc, #8]	; (1000cb3c <at_ble_read_authorize_reply.part.1+0x2c>)
1000cb32:	47a0      	blx	r4
1000cb34:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000cb36:	46c0      	nop			; (mov r8, r8)
1000cb38:	1000cad1 	.word	0x1000cad1
1000cb3c:	1000e4e9 	.word	0x1000e4e9

1000cb40 <initi_gatt_server_module>:
1000cb40:	2300      	movs	r3, #0
1000cb42:	4a07      	ldr	r2, [pc, #28]	; (1000cb60 <initi_gatt_server_module+0x20>)
1000cb44:	7013      	strb	r3, [r2, #0]
1000cb46:	4a07      	ldr	r2, [pc, #28]	; (1000cb64 <initi_gatt_server_module+0x24>)
1000cb48:	6013      	str	r3, [r2, #0]
1000cb4a:	4a07      	ldr	r2, [pc, #28]	; (1000cb68 <initi_gatt_server_module+0x28>)
1000cb4c:	6013      	str	r3, [r2, #0]
1000cb4e:	4a07      	ldr	r2, [pc, #28]	; (1000cb6c <initi_gatt_server_module+0x2c>)
1000cb50:	6013      	str	r3, [r2, #0]
1000cb52:	4a07      	ldr	r2, [pc, #28]	; (1000cb70 <initi_gatt_server_module+0x30>)
1000cb54:	6013      	str	r3, [r2, #0]
1000cb56:	4a07      	ldr	r2, [pc, #28]	; (1000cb74 <initi_gatt_server_module+0x34>)
1000cb58:	6013      	str	r3, [r2, #0]
1000cb5a:	4a07      	ldr	r2, [pc, #28]	; (1000cb78 <initi_gatt_server_module+0x38>)
1000cb5c:	6013      	str	r3, [r2, #0]
1000cb5e:	4770      	bx	lr
1000cb60:	10013e04 	.word	0x10013e04
1000cb64:	10013e14 	.word	0x10013e14
1000cb68:	10013e10 	.word	0x10013e10
1000cb6c:	10013e00 	.word	0x10013e00
1000cb70:	10013e0c 	.word	0x10013e0c
1000cb74:	10013e08 	.word	0x10013e08
1000cb78:	10013e18 	.word	0x10013e18

1000cb7c <db_init>:
1000cb7c:	4b0a      	ldr	r3, [pc, #40]	; (1000cba8 <db_init+0x2c>)
1000cb7e:	4a0b      	ldr	r2, [pc, #44]	; (1000cbac <db_init+0x30>)
1000cb80:	6018      	str	r0, [r3, #0]
1000cb82:	084b      	lsrs	r3, r1, #1
1000cb84:	6013      	str	r3, [r2, #0]
1000cb86:	4a0a      	ldr	r2, [pc, #40]	; (1000cbb0 <db_init+0x34>)
1000cb88:	18c3      	adds	r3, r0, r3
1000cb8a:	6013      	str	r3, [r2, #0]
1000cb8c:	4a09      	ldr	r2, [pc, #36]	; (1000cbb4 <db_init+0x38>)
1000cb8e:	1841      	adds	r1, r0, r1
1000cb90:	6013      	str	r3, [r2, #0]
1000cb92:	2303      	movs	r3, #3
1000cb94:	2200      	movs	r2, #0
1000cb96:	3103      	adds	r1, #3
1000cb98:	4399      	bics	r1, r3
1000cb9a:	4b07      	ldr	r3, [pc, #28]	; (1000cbb8 <db_init+0x3c>)
1000cb9c:	3904      	subs	r1, #4
1000cb9e:	6019      	str	r1, [r3, #0]
1000cba0:	4b06      	ldr	r3, [pc, #24]	; (1000cbbc <db_init+0x40>)
1000cba2:	601a      	str	r2, [r3, #0]
1000cba4:	4770      	bx	lr
1000cba6:	46c0      	nop			; (mov r8, r8)
1000cba8:	10013e18 	.word	0x10013e18
1000cbac:	10013e14 	.word	0x10013e14
1000cbb0:	10013e00 	.word	0x10013e00
1000cbb4:	10013e0c 	.word	0x10013e0c
1000cbb8:	10013e08 	.word	0x10013e08
1000cbbc:	10013e10 	.word	0x10013e10

1000cbc0 <at_ble_characteristic_value_set>:
1000cbc0:	b570      	push	{r4, r5, r6, lr}
1000cbc2:	4b0b      	ldr	r3, [pc, #44]	; (1000cbf0 <at_ble_characteristic_value_set+0x30>)
1000cbc4:	1c06      	adds	r6, r0, #0
1000cbc6:	1c0c      	adds	r4, r1, #0
1000cbc8:	1c15      	adds	r5, r2, #0
1000cbca:	4798      	blx	r3
1000cbcc:	2800      	cmp	r0, #0
1000cbce:	d008      	beq.n	1000cbe2 <at_ble_characteristic_value_set+0x22>
1000cbd0:	6880      	ldr	r0, [r0, #8]
1000cbd2:	2800      	cmp	r0, #0
1000cbd4:	d005      	beq.n	1000cbe2 <at_ble_characteristic_value_set+0x22>
1000cbd6:	1c21      	adds	r1, r4, #0
1000cbd8:	1c2a      	adds	r2, r5, #0
1000cbda:	4b06      	ldr	r3, [pc, #24]	; (1000cbf4 <at_ble_characteristic_value_set+0x34>)
1000cbdc:	4798      	blx	r3
1000cbde:	2000      	movs	r0, #0
1000cbe0:	e004      	b.n	1000cbec <at_ble_characteristic_value_set+0x2c>
1000cbe2:	1c30      	adds	r0, r6, #0
1000cbe4:	1c29      	adds	r1, r5, #0
1000cbe6:	1c22      	adds	r2, r4, #0
1000cbe8:	4b03      	ldr	r3, [pc, #12]	; (1000cbf8 <at_ble_characteristic_value_set+0x38>)
1000cbea:	4798      	blx	r3
1000cbec:	bd70      	pop	{r4, r5, r6, pc}
1000cbee:	46c0      	nop			; (mov r8, r8)
1000cbf0:	1000cad1 	.word	0x1000cad1
1000cbf4:	10010357 	.word	0x10010357
1000cbf8:	1000e85d 	.word	0x1000e85d

1000cbfc <at_ble_characteristic_value_get>:
1000cbfc:	b570      	push	{r4, r5, r6, lr}
1000cbfe:	4b0c      	ldr	r3, [pc, #48]	; (1000cc30 <at_ble_characteristic_value_get+0x34>)
1000cc00:	1c06      	adds	r6, r0, #0
1000cc02:	1c0c      	adds	r4, r1, #0
1000cc04:	1c15      	adds	r5, r2, #0
1000cc06:	4798      	blx	r3
1000cc08:	2800      	cmp	r0, #0
1000cc0a:	d00b      	beq.n	1000cc24 <at_ble_characteristic_value_get+0x28>
1000cc0c:	6883      	ldr	r3, [r0, #8]
1000cc0e:	2b00      	cmp	r3, #0
1000cc10:	d008      	beq.n	1000cc24 <at_ble_characteristic_value_get+0x28>
1000cc12:	8883      	ldrh	r3, [r0, #4]
1000cc14:	802b      	strh	r3, [r5, #0]
1000cc16:	8882      	ldrh	r2, [r0, #4]
1000cc18:	6881      	ldr	r1, [r0, #8]
1000cc1a:	4b06      	ldr	r3, [pc, #24]	; (1000cc34 <at_ble_characteristic_value_get+0x38>)
1000cc1c:	1c20      	adds	r0, r4, #0
1000cc1e:	4798      	blx	r3
1000cc20:	2000      	movs	r0, #0
1000cc22:	e004      	b.n	1000cc2e <at_ble_characteristic_value_get+0x32>
1000cc24:	1c30      	adds	r0, r6, #0
1000cc26:	1c29      	adds	r1, r5, #0
1000cc28:	1c22      	adds	r2, r4, #0
1000cc2a:	4b03      	ldr	r3, [pc, #12]	; (1000cc38 <at_ble_characteristic_value_get+0x3c>)
1000cc2c:	4798      	blx	r3
1000cc2e:	bd70      	pop	{r4, r5, r6, pc}
1000cc30:	1000cad1 	.word	0x1000cad1
1000cc34:	10010357 	.word	0x10010357
1000cc38:	1000e8e9 	.word	0x1000e8e9

1000cc3c <at_ble_write_authorize_reply>:
1000cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc3e:	b085      	sub	sp, #20
1000cc40:	1c04      	adds	r4, r0, #0
1000cc42:	9101      	str	r1, [sp, #4]
1000cc44:	2900      	cmp	r1, #0
1000cc46:	d128      	bne.n	1000cc9a <at_ble_write_authorize_reply+0x5e>
1000cc48:	8843      	ldrh	r3, [r0, #2]
1000cc4a:	1c27      	adds	r7, r4, #0
1000cc4c:	9300      	str	r3, [sp, #0]
1000cc4e:	1c18      	adds	r0, r3, #0
1000cc50:	4b16      	ldr	r3, [pc, #88]	; (1000ccac <at_ble_write_authorize_reply+0x70>)
1000cc52:	4798      	blx	r3
1000cc54:	3708      	adds	r7, #8
1000cc56:	2800      	cmp	r0, #0
1000cc58:	d009      	beq.n	1000cc6e <at_ble_write_authorize_reply+0x32>
1000cc5a:	6880      	ldr	r0, [r0, #8]
1000cc5c:	2800      	cmp	r0, #0
1000cc5e:	d006      	beq.n	1000cc6e <at_ble_write_authorize_reply+0x32>
1000cc60:	88a3      	ldrh	r3, [r4, #4]
1000cc62:	88e2      	ldrh	r2, [r4, #6]
1000cc64:	18c0      	adds	r0, r0, r3
1000cc66:	1c39      	adds	r1, r7, #0
1000cc68:	4b11      	ldr	r3, [pc, #68]	; (1000ccb0 <at_ble_write_authorize_reply+0x74>)
1000cc6a:	4798      	blx	r3
1000cc6c:	e015      	b.n	1000cc9a <at_ble_write_authorize_reply+0x5e>
1000cc6e:	ab02      	add	r3, sp, #8
1000cc70:	1d9e      	adds	r6, r3, #6
1000cc72:	2300      	movs	r3, #0
1000cc74:	4d0f      	ldr	r5, [pc, #60]	; (1000ccb4 <at_ble_write_authorize_reply+0x78>)
1000cc76:	8033      	strh	r3, [r6, #0]
1000cc78:	6829      	ldr	r1, [r5, #0]
1000cc7a:	1c32      	adds	r2, r6, #0
1000cc7c:	4b0e      	ldr	r3, [pc, #56]	; (1000ccb8 <at_ble_write_authorize_reply+0x7c>)
1000cc7e:	9800      	ldr	r0, [sp, #0]
1000cc80:	4798      	blx	r3
1000cc82:	682b      	ldr	r3, [r5, #0]
1000cc84:	88a0      	ldrh	r0, [r4, #4]
1000cc86:	88e2      	ldrh	r2, [r4, #6]
1000cc88:	1818      	adds	r0, r3, r0
1000cc8a:	1c39      	adds	r1, r7, #0
1000cc8c:	4b08      	ldr	r3, [pc, #32]	; (1000ccb0 <at_ble_write_authorize_reply+0x74>)
1000cc8e:	4798      	blx	r3
1000cc90:	8860      	ldrh	r0, [r4, #2]
1000cc92:	8832      	ldrh	r2, [r6, #0]
1000cc94:	6829      	ldr	r1, [r5, #0]
1000cc96:	4b09      	ldr	r3, [pc, #36]	; (1000ccbc <at_ble_write_authorize_reply+0x80>)
1000cc98:	4798      	blx	r3
1000cc9a:	8860      	ldrh	r0, [r4, #2]
1000cc9c:	8821      	ldrh	r1, [r4, #0]
1000cc9e:	9a01      	ldr	r2, [sp, #4]
1000cca0:	4b07      	ldr	r3, [pc, #28]	; (1000ccc0 <at_ble_write_authorize_reply+0x84>)
1000cca2:	4798      	blx	r3
1000cca4:	2000      	movs	r0, #0
1000cca6:	b005      	add	sp, #20
1000cca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ccaa:	46c0      	nop			; (mov r8, r8)
1000ccac:	1000cad1 	.word	0x1000cad1
1000ccb0:	10010357 	.word	0x10010357
1000ccb4:	10012368 	.word	0x10012368
1000ccb8:	1000cbfd 	.word	0x1000cbfd
1000ccbc:	1000cbc1 	.word	0x1000cbc1
1000ccc0:	1000e555 	.word	0x1000e555

1000ccc4 <gatts_handle_read_req>:
1000ccc4:	b538      	push	{r3, r4, r5, lr}
1000ccc6:	1c0c      	adds	r4, r1, #0
1000ccc8:	4b07      	ldr	r3, [pc, #28]	; (1000cce8 <gatts_handle_read_req+0x24>)
1000ccca:	4798      	blx	r3
1000cccc:	8865      	ldrh	r5, [r4, #2]
1000ccce:	4b07      	ldr	r3, [pc, #28]	; (1000ccec <gatts_handle_read_req+0x28>)
1000ccd0:	1c28      	adds	r0, r5, #0
1000ccd2:	4798      	blx	r3
1000ccd4:	7883      	ldrb	r3, [r0, #2]
1000ccd6:	2026      	movs	r0, #38	; 0x26
1000ccd8:	07db      	lsls	r3, r3, #31
1000ccda:	d404      	bmi.n	1000cce6 <gatts_handle_read_req+0x22>
1000ccdc:	8820      	ldrh	r0, [r4, #0]
1000ccde:	1c29      	adds	r1, r5, #0
1000cce0:	4b03      	ldr	r3, [pc, #12]	; (1000ccf0 <gatts_handle_read_req+0x2c>)
1000cce2:	4798      	blx	r3
1000cce4:	203b      	movs	r0, #59	; 0x3b
1000cce6:	bd38      	pop	{r3, r4, r5, pc}
1000cce8:	1000e499 	.word	0x1000e499
1000ccec:	1000cad1 	.word	0x1000cad1
1000ccf0:	1000cb11 	.word	0x1000cb11

1000ccf4 <gatts_handle_att_info_req>:
1000ccf4:	b538      	push	{r3, r4, r5, lr}
1000ccf6:	1c0d      	adds	r5, r1, #0
1000ccf8:	4b0a      	ldr	r3, [pc, #40]	; (1000cd24 <gatts_handle_att_info_req+0x30>)
1000ccfa:	1c14      	adds	r4, r2, #0
1000ccfc:	4798      	blx	r3
1000ccfe:	882d      	ldrh	r5, [r5, #0]
1000cd00:	4b09      	ldr	r3, [pc, #36]	; (1000cd28 <gatts_handle_att_info_req+0x34>)
1000cd02:	1c28      	adds	r0, r5, #0
1000cd04:	4798      	blx	r3
1000cd06:	0a22      	lsrs	r2, r4, #8
1000cd08:	1c03      	adds	r3, r0, #0
1000cd0a:	4c08      	ldr	r4, [pc, #32]	; (1000cd2c <gatts_handle_att_info_req+0x38>)
1000cd0c:	b291      	uxth	r1, r2
1000cd0e:	2800      	cmp	r0, #0
1000cd10:	d003      	beq.n	1000cd1a <gatts_handle_att_info_req+0x26>
1000cd12:	8882      	ldrh	r2, [r0, #4]
1000cd14:	2300      	movs	r3, #0
1000cd16:	1c28      	adds	r0, r5, #0
1000cd18:	e001      	b.n	1000cd1e <gatts_handle_att_info_req+0x2a>
1000cd1a:	1c28      	adds	r0, r5, #0
1000cd1c:	2201      	movs	r2, #1
1000cd1e:	47a0      	blx	r4
1000cd20:	203b      	movs	r0, #59	; 0x3b
1000cd22:	bd38      	pop	{r3, r4, r5, pc}
1000cd24:	1000e4dd 	.word	0x1000e4dd
1000cd28:	1000cad1 	.word	0x1000cad1
1000cd2c:	1000e599 	.word	0x1000e599

1000cd30 <gatts_handle_write_req>:
1000cd30:	b510      	push	{r4, lr}
1000cd32:	1c14      	adds	r4, r2, #0
1000cd34:	4b07      	ldr	r3, [pc, #28]	; (1000cd54 <gatts_handle_write_req+0x24>)
1000cd36:	4798      	blx	r3
1000cd38:	4b07      	ldr	r3, [pc, #28]	; (1000cd58 <gatts_handle_write_req+0x28>)
1000cd3a:	8860      	ldrh	r0, [r4, #2]
1000cd3c:	4798      	blx	r3
1000cd3e:	2302      	movs	r3, #2
1000cd40:	7881      	ldrb	r1, [r0, #2]
1000cd42:	2022      	movs	r0, #34	; 0x22
1000cd44:	4019      	ands	r1, r3
1000cd46:	d103      	bne.n	1000cd50 <gatts_handle_write_req+0x20>
1000cd48:	1c20      	adds	r0, r4, #0
1000cd4a:	4b04      	ldr	r3, [pc, #16]	; (1000cd5c <gatts_handle_write_req+0x2c>)
1000cd4c:	4798      	blx	r3
1000cd4e:	201f      	movs	r0, #31
1000cd50:	bd10      	pop	{r4, pc}
1000cd52:	46c0      	nop			; (mov r8, r8)
1000cd54:	1000e4a5 	.word	0x1000e4a5
1000cd58:	1000cad1 	.word	0x1000cad1
1000cd5c:	1000cc3d 	.word	0x1000cc3d

1000cd60 <init_l2cc_task_module>:
1000cd60:	220a      	movs	r2, #10
1000cd62:	4b01      	ldr	r3, [pc, #4]	; (1000cd68 <init_l2cc_task_module+0x8>)
1000cd64:	701a      	strb	r2, [r3, #0]
1000cd66:	4770      	bx	lr
1000cd68:	10012364 	.word	0x10012364

1000cd6c <l2cc_data_send_rsp_handler>:
1000cd6c:	b510      	push	{r4, lr}
1000cd6e:	7802      	ldrb	r2, [r0, #0]
1000cd70:	700a      	strb	r2, [r1, #0]
1000cd72:	7883      	ldrb	r3, [r0, #2]
1000cd74:	7844      	ldrb	r4, [r0, #1]
1000cd76:	021b      	lsls	r3, r3, #8
1000cd78:	4323      	orrs	r3, r4
1000cd7a:	804b      	strh	r3, [r1, #2]
1000cd7c:	7903      	ldrb	r3, [r0, #4]
1000cd7e:	78c0      	ldrb	r0, [r0, #3]
1000cd80:	021b      	lsls	r3, r3, #8
1000cd82:	4303      	orrs	r3, r0
1000cd84:	808b      	strh	r3, [r1, #4]
1000cd86:	2a00      	cmp	r2, #0
1000cd88:	d103      	bne.n	1000cd92 <l2cc_data_send_rsp_handler+0x26>
1000cd8a:	4a02      	ldr	r2, [pc, #8]	; (1000cd94 <l2cc_data_send_rsp_handler+0x28>)
1000cd8c:	7813      	ldrb	r3, [r2, #0]
1000cd8e:	3301      	adds	r3, #1
1000cd90:	7013      	strb	r3, [r2, #0]
1000cd92:	bd10      	pop	{r4, pc}
1000cd94:	10012364 	.word	0x10012364

1000cd98 <l2cc_data_received_handler>:
1000cd98:	b508      	push	{r3, lr}
1000cd9a:	1c03      	adds	r3, r0, #0
1000cd9c:	7842      	ldrb	r2, [r0, #1]
1000cd9e:	7800      	ldrb	r0, [r0, #0]
1000cda0:	0212      	lsls	r2, r2, #8
1000cda2:	4302      	orrs	r2, r0
1000cda4:	800a      	strh	r2, [r1, #0]
1000cda6:	78da      	ldrb	r2, [r3, #3]
1000cda8:	7898      	ldrb	r0, [r3, #2]
1000cdaa:	0212      	lsls	r2, r2, #8
1000cdac:	4302      	orrs	r2, r0
1000cdae:	804a      	strh	r2, [r1, #2]
1000cdb0:	795a      	ldrb	r2, [r3, #5]
1000cdb2:	7918      	ldrb	r0, [r3, #4]
1000cdb4:	0212      	lsls	r2, r2, #8
1000cdb6:	4302      	orrs	r2, r0
1000cdb8:	808a      	strh	r2, [r1, #4]
1000cdba:	1d88      	adds	r0, r1, #6
1000cdbc:	1d99      	adds	r1, r3, #6
1000cdbe:	4b01      	ldr	r3, [pc, #4]	; (1000cdc4 <l2cc_data_received_handler+0x2c>)
1000cdc0:	4798      	blx	r3
1000cdc2:	bd08      	pop	{r3, pc}
1000cdc4:	10010357 	.word	0x10010357

1000cdc8 <at_ble_authenticate>:
1000cdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdca:	1c0c      	adds	r4, r1, #0
1000cdcc:	211f      	movs	r1, #31
1000cdce:	b08b      	sub	sp, #44	; 0x2c
1000cdd0:	9307      	str	r3, [sp, #28]
1000cdd2:	ab02      	add	r3, sp, #8
1000cdd4:	18c9      	adds	r1, r1, r3
1000cdd6:	230f      	movs	r3, #15
1000cdd8:	700b      	strb	r3, [r1, #0]
1000cdda:	4b40      	ldr	r3, [pc, #256]	; (1000cedc <at_ble_authenticate+0x114>)
1000cddc:	1c05      	adds	r5, r0, #0
1000cdde:	1c16      	adds	r6, r2, #0
1000cde0:	4798      	blx	r3
1000cde2:	1c07      	adds	r7, r0, #0
1000cde4:	2001      	movs	r0, #1
1000cde6:	2f07      	cmp	r7, #7
1000cde8:	d875      	bhi.n	1000ced6 <at_ble_authenticate+0x10e>
1000cdea:	2c00      	cmp	r4, #0
1000cdec:	d113      	bne.n	1000ce16 <at_ble_authenticate+0x4e>
1000cdee:	2312      	movs	r3, #18
1000cdf0:	435f      	muls	r7, r3
1000cdf2:	4b3b      	ldr	r3, [pc, #236]	; (1000cee0 <at_ble_authenticate+0x118>)
1000cdf4:	5cfb      	ldrb	r3, [r7, r3]
1000cdf6:	4283      	cmp	r3, r0
1000cdf8:	d001      	beq.n	1000cdfe <at_ble_authenticate+0x36>
1000cdfa:	20cf      	movs	r0, #207	; 0xcf
1000cdfc:	e06b      	b.n	1000ced6 <at_ble_authenticate+0x10e>
1000cdfe:	9504      	str	r5, [sp, #16]
1000ce00:	9400      	str	r4, [sp, #0]
1000ce02:	9401      	str	r4, [sp, #4]
1000ce04:	9402      	str	r4, [sp, #8]
1000ce06:	9403      	str	r4, [sp, #12]
1000ce08:	1c20      	adds	r0, r4, #0
1000ce0a:	1c21      	adds	r1, r4, #0
1000ce0c:	1c22      	adds	r2, r4, #0
1000ce0e:	1c23      	adds	r3, r4, #0
1000ce10:	4d34      	ldr	r5, [pc, #208]	; (1000cee4 <at_ble_authenticate+0x11c>)
1000ce12:	47a8      	blx	r5
1000ce14:	e05e      	b.n	1000ced4 <at_ble_authenticate+0x10c>
1000ce16:	7922      	ldrb	r2, [r4, #4]
1000ce18:	2a06      	cmp	r2, #6
1000ce1a:	d9ee      	bls.n	1000cdfa <at_ble_authenticate+0x32>
1000ce1c:	7963      	ldrb	r3, [r4, #5]
1000ce1e:	2b10      	cmp	r3, #16
1000ce20:	d8eb      	bhi.n	1000cdfa <at_ble_authenticate+0x32>
1000ce22:	429a      	cmp	r2, r3
1000ce24:	d8e9      	bhi.n	1000cdfa <at_ble_authenticate+0x32>
1000ce26:	7a23      	ldrb	r3, [r4, #8]
1000ce28:	2b04      	cmp	r3, #4
1000ce2a:	d8e6      	bhi.n	1000cdfa <at_ble_authenticate+0x32>
1000ce2c:	79a3      	ldrb	r3, [r4, #6]
1000ce2e:	2b07      	cmp	r3, #7
1000ce30:	d8e3      	bhi.n	1000cdfa <at_ble_authenticate+0x32>
1000ce32:	79e3      	ldrb	r3, [r4, #7]
1000ce34:	2b07      	cmp	r3, #7
1000ce36:	d8e0      	bhi.n	1000cdfa <at_ble_authenticate+0x32>
1000ce38:	78a3      	ldrb	r3, [r4, #2]
1000ce3a:	2b00      	cmp	r3, #0
1000ce3c:	d006      	beq.n	1000ce4c <at_ble_authenticate+0x84>
1000ce3e:	2e00      	cmp	r6, #0
1000ce40:	d0db      	beq.n	1000cdfa <at_ble_authenticate+0x32>
1000ce42:	4829      	ldr	r0, [pc, #164]	; (1000cee8 <at_ble_authenticate+0x120>)
1000ce44:	1c31      	adds	r1, r6, #0
1000ce46:	221c      	movs	r2, #28
1000ce48:	4b28      	ldr	r3, [pc, #160]	; (1000ceec <at_ble_authenticate+0x124>)
1000ce4a:	4798      	blx	r3
1000ce4c:	9b07      	ldr	r3, [sp, #28]
1000ce4e:	2b00      	cmp	r3, #0
1000ce50:	d005      	beq.n	1000ce5e <at_ble_authenticate+0x96>
1000ce52:	4827      	ldr	r0, [pc, #156]	; (1000cef0 <at_ble_authenticate+0x128>)
1000ce54:	1c19      	adds	r1, r3, #0
1000ce56:	309a      	adds	r0, #154	; 0x9a
1000ce58:	2210      	movs	r2, #16
1000ce5a:	4b24      	ldr	r3, [pc, #144]	; (1000ceec <at_ble_authenticate+0x124>)
1000ce5c:	4798      	blx	r3
1000ce5e:	7863      	ldrb	r3, [r4, #1]
1000ce60:	78a2      	ldrb	r2, [r4, #2]
1000ce62:	009b      	lsls	r3, r3, #2
1000ce64:	4313      	orrs	r3, r2
1000ce66:	2212      	movs	r2, #18
1000ce68:	4357      	muls	r7, r2
1000ce6a:	4a1d      	ldr	r2, [pc, #116]	; (1000cee0 <at_ble_authenticate+0x118>)
1000ce6c:	b2db      	uxtb	r3, r3
1000ce6e:	5cba      	ldrb	r2, [r7, r2]
1000ce70:	2a00      	cmp	r2, #0
1000ce72:	d116      	bne.n	1000cea2 <at_ble_authenticate+0xda>
1000ce74:	79a0      	ldrb	r0, [r4, #6]
1000ce76:	0742      	lsls	r2, r0, #29
1000ce78:	d502      	bpl.n	1000ce80 <at_ble_authenticate+0xb8>
1000ce7a:	9a07      	ldr	r2, [sp, #28]
1000ce7c:	2a00      	cmp	r2, #0
1000ce7e:	d0bc      	beq.n	1000cdfa <at_ble_authenticate+0x32>
1000ce80:	07c2      	lsls	r2, r0, #31
1000ce82:	d501      	bpl.n	1000ce88 <at_ble_authenticate+0xc0>
1000ce84:	2e00      	cmp	r6, #0
1000ce86:	d0b8      	beq.n	1000cdfa <at_ble_authenticate+0x32>
1000ce88:	7966      	ldrb	r6, [r4, #5]
1000ce8a:	7821      	ldrb	r1, [r4, #0]
1000ce8c:	78e2      	ldrb	r2, [r4, #3]
1000ce8e:	9600      	str	r6, [sp, #0]
1000ce90:	9001      	str	r0, [sp, #4]
1000ce92:	79e0      	ldrb	r0, [r4, #7]
1000ce94:	9002      	str	r0, [sp, #8]
1000ce96:	7a20      	ldrb	r0, [r4, #8]
1000ce98:	4c16      	ldr	r4, [pc, #88]	; (1000cef4 <at_ble_authenticate+0x12c>)
1000ce9a:	9003      	str	r0, [sp, #12]
1000ce9c:	1c28      	adds	r0, r5, #0
1000ce9e:	47a0      	blx	r4
1000cea0:	e018      	b.n	1000ced4 <at_ble_authenticate+0x10c>
1000cea2:	2a01      	cmp	r2, #1
1000cea4:	d1a9      	bne.n	1000cdfa <at_ble_authenticate+0x32>
1000cea6:	79e0      	ldrb	r0, [r4, #7]
1000cea8:	0742      	lsls	r2, r0, #29
1000ceaa:	d502      	bpl.n	1000ceb2 <at_ble_authenticate+0xea>
1000ceac:	9a07      	ldr	r2, [sp, #28]
1000ceae:	2a00      	cmp	r2, #0
1000ceb0:	d0a3      	beq.n	1000cdfa <at_ble_authenticate+0x32>
1000ceb2:	07c2      	lsls	r2, r0, #31
1000ceb4:	d501      	bpl.n	1000ceba <at_ble_authenticate+0xf2>
1000ceb6:	2e00      	cmp	r6, #0
1000ceb8:	d09f      	beq.n	1000cdfa <at_ble_authenticate+0x32>
1000ceba:	7966      	ldrb	r6, [r4, #5]
1000cebc:	7821      	ldrb	r1, [r4, #0]
1000cebe:	78e2      	ldrb	r2, [r4, #3]
1000cec0:	9600      	str	r6, [sp, #0]
1000cec2:	79a6      	ldrb	r6, [r4, #6]
1000cec4:	9002      	str	r0, [sp, #8]
1000cec6:	9601      	str	r6, [sp, #4]
1000cec8:	7a20      	ldrb	r0, [r4, #8]
1000ceca:	9504      	str	r5, [sp, #16]
1000cecc:	9003      	str	r0, [sp, #12]
1000cece:	4c05      	ldr	r4, [pc, #20]	; (1000cee4 <at_ble_authenticate+0x11c>)
1000ced0:	2001      	movs	r0, #1
1000ced2:	47a0      	blx	r4
1000ced4:	2000      	movs	r0, #0
1000ced6:	b00b      	add	sp, #44	; 0x2c
1000ced8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ceda:	46c0      	nop			; (mov r8, r8)
1000cedc:	1000d311 	.word	0x1000d311
1000cee0:	10014b06 	.word	0x10014b06
1000cee4:	1000d881 	.word	0x1000d881
1000cee8:	10014c14 	.word	0x10014c14
1000ceec:	10010357 	.word	0x10010357
1000cef0:	10014b96 	.word	0x10014b96
1000cef4:	1000d661 	.word	0x1000d661

1000cef8 <at_ble_pair_key_reply>:
1000cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cefa:	b085      	sub	sp, #20
1000cefc:	1c05      	adds	r5, r0, #0
1000cefe:	1c0c      	adds	r4, r1, #0
1000cf00:	1c16      	adds	r6, r2, #0
1000cf02:	2100      	movs	r1, #0
1000cf04:	4668      	mov	r0, sp
1000cf06:	2210      	movs	r2, #16
1000cf08:	4b18      	ldr	r3, [pc, #96]	; (1000cf6c <at_ble_pair_key_reply+0x74>)
1000cf0a:	4798      	blx	r3
1000cf0c:	2101      	movs	r1, #1
1000cf0e:	2e00      	cmp	r6, #0
1000cf10:	d101      	bne.n	1000cf16 <at_ble_pair_key_reply+0x1e>
1000cf12:	1c31      	adds	r1, r6, #0
1000cf14:	466e      	mov	r6, sp
1000cf16:	2c00      	cmp	r4, #0
1000cf18:	d116      	bne.n	1000cf48 <at_ble_pair_key_reply+0x50>
1000cf1a:	2701      	movs	r7, #1
1000cf1c:	1c23      	adds	r3, r4, #0
1000cf1e:	1d70      	adds	r0, r6, #5
1000cf20:	3e01      	subs	r6, #1
1000cf22:	7802      	ldrb	r2, [r0, #0]
1000cf24:	3801      	subs	r0, #1
1000cf26:	3a30      	subs	r2, #48	; 0x30
1000cf28:	437a      	muls	r2, r7
1000cf2a:	189b      	adds	r3, r3, r2
1000cf2c:	220a      	movs	r2, #10
1000cf2e:	4357      	muls	r7, r2
1000cf30:	42b0      	cmp	r0, r6
1000cf32:	d1f6      	bne.n	1000cf22 <at_ble_pair_key_reply+0x2a>
1000cf34:	466a      	mov	r2, sp
1000cf36:	4668      	mov	r0, sp
1000cf38:	7013      	strb	r3, [r2, #0]
1000cf3a:	0a1a      	lsrs	r2, r3, #8
1000cf3c:	7042      	strb	r2, [r0, #1]
1000cf3e:	0c1a      	lsrs	r2, r3, #16
1000cf40:	0e1b      	lsrs	r3, r3, #24
1000cf42:	7082      	strb	r2, [r0, #2]
1000cf44:	70c3      	strb	r3, [r0, #3]
1000cf46:	e009      	b.n	1000cf5c <at_ble_pair_key_reply+0x64>
1000cf48:	20cf      	movs	r0, #207	; 0xcf
1000cf4a:	2c01      	cmp	r4, #1
1000cf4c:	d10c      	bne.n	1000cf68 <at_ble_pair_key_reply+0x70>
1000cf4e:	2300      	movs	r3, #0
1000cf50:	4668      	mov	r0, sp
1000cf52:	5cf2      	ldrb	r2, [r6, r3]
1000cf54:	54c2      	strb	r2, [r0, r3]
1000cf56:	3301      	adds	r3, #1
1000cf58:	2b10      	cmp	r3, #16
1000cf5a:	d1f9      	bne.n	1000cf50 <at_ble_pair_key_reply+0x58>
1000cf5c:	2004      	movs	r0, #4
1000cf5e:	466a      	mov	r2, sp
1000cf60:	1c2b      	adds	r3, r5, #0
1000cf62:	4c03      	ldr	r4, [pc, #12]	; (1000cf70 <at_ble_pair_key_reply+0x78>)
1000cf64:	47a0      	blx	r4
1000cf66:	2000      	movs	r0, #0
1000cf68:	b005      	add	sp, #20
1000cf6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf6c:	10010369 	.word	0x10010369
1000cf70:	1000d8fd 	.word	0x1000d8fd

1000cf74 <at_ble_send_slave_sec_request>:
1000cf74:	b570      	push	{r4, r5, r6, lr}
1000cf76:	4b0c      	ldr	r3, [pc, #48]	; (1000cfa8 <at_ble_send_slave_sec_request+0x34>)
1000cf78:	1c0e      	adds	r6, r1, #0
1000cf7a:	2100      	movs	r1, #0
1000cf7c:	1c05      	adds	r5, r0, #0
1000cf7e:	1c14      	adds	r4, r2, #0
1000cf80:	4798      	blx	r3
1000cf82:	2301      	movs	r3, #1
1000cf84:	2807      	cmp	r0, #7
1000cf86:	d80d      	bhi.n	1000cfa4 <at_ble_send_slave_sec_request+0x30>
1000cf88:	3311      	adds	r3, #17
1000cf8a:	4358      	muls	r0, r3
1000cf8c:	4b07      	ldr	r3, [pc, #28]	; (1000cfac <at_ble_send_slave_sec_request+0x38>)
1000cf8e:	5cc2      	ldrb	r2, [r0, r3]
1000cf90:	23e0      	movs	r3, #224	; 0xe0
1000cf92:	2a01      	cmp	r2, #1
1000cf94:	d106      	bne.n	1000cfa4 <at_ble_send_slave_sec_request+0x30>
1000cf96:	00b1      	lsls	r1, r6, #2
1000cf98:	430c      	orrs	r4, r1
1000cf9a:	4b05      	ldr	r3, [pc, #20]	; (1000cfb0 <at_ble_send_slave_sec_request+0x3c>)
1000cf9c:	b2e1      	uxtb	r1, r4
1000cf9e:	1c28      	adds	r0, r5, #0
1000cfa0:	4798      	blx	r3
1000cfa2:	2300      	movs	r3, #0
1000cfa4:	1c18      	adds	r0, r3, #0
1000cfa6:	bd70      	pop	{r4, r5, r6, pc}
1000cfa8:	1000d311 	.word	0x1000d311
1000cfac:	10014b06 	.word	0x10014b06
1000cfb0:	1000d94d 	.word	0x1000d94d

1000cfb4 <at_ble_encryption_start>:
1000cfb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000cfb6:	23cf      	movs	r3, #207	; 0xcf
1000cfb8:	2900      	cmp	r1, #0
1000cfba:	d02b      	beq.n	1000d014 <at_ble_encryption_start+0x60>
1000cfbc:	2a05      	cmp	r2, #5
1000cfbe:	d829      	bhi.n	1000d014 <at_ble_encryption_start+0x60>
1000cfc0:	2701      	movs	r7, #1
1000cfc2:	1c3d      	adds	r5, r7, #0
1000cfc4:	2433      	movs	r4, #51	; 0x33
1000cfc6:	4095      	lsls	r5, r2
1000cfc8:	4225      	tst	r5, r4
1000cfca:	d023      	beq.n	1000d014 <at_ble_encryption_start+0x60>
1000cfcc:	7e8c      	ldrb	r4, [r1, #26]
1000cfce:	3c07      	subs	r4, #7
1000cfd0:	2c09      	cmp	r4, #9
1000cfd2:	d81f      	bhi.n	1000d014 <at_ble_encryption_start+0x60>
1000cfd4:	4b10      	ldr	r3, [pc, #64]	; (1000d018 <at_ble_encryption_start+0x64>)
1000cfd6:	1c0c      	adds	r4, r1, #0
1000cfd8:	2100      	movs	r1, #0
1000cfda:	1c15      	adds	r5, r2, #0
1000cfdc:	1c06      	adds	r6, r0, #0
1000cfde:	4798      	blx	r3
1000cfe0:	1c3b      	adds	r3, r7, #0
1000cfe2:	2807      	cmp	r0, #7
1000cfe4:	d816      	bhi.n	1000d014 <at_ble_encryption_start+0x60>
1000cfe6:	2312      	movs	r3, #18
1000cfe8:	4358      	muls	r0, r3
1000cfea:	4b0c      	ldr	r3, [pc, #48]	; (1000d01c <at_ble_encryption_start+0x68>)
1000cfec:	5cc7      	ldrb	r7, [r0, r3]
1000cfee:	23e0      	movs	r3, #224	; 0xe0
1000cff0:	2f00      	cmp	r7, #0
1000cff2:	d10f      	bne.n	1000d014 <at_ble_encryption_start+0x60>
1000cff4:	1c21      	adds	r1, r4, #0
1000cff6:	221c      	movs	r2, #28
1000cff8:	4b09      	ldr	r3, [pc, #36]	; (1000d020 <at_ble_encryption_start+0x6c>)
1000cffa:	480a      	ldr	r0, [pc, #40]	; (1000d024 <at_ble_encryption_start+0x70>)
1000cffc:	4798      	blx	r3
1000cffe:	1c23      	adds	r3, r4, #0
1000d000:	7ea1      	ldrb	r1, [r4, #26]
1000d002:	8a22      	ldrh	r2, [r4, #16]
1000d004:	3312      	adds	r3, #18
1000d006:	9100      	str	r1, [sp, #0]
1000d008:	9501      	str	r5, [sp, #4]
1000d00a:	1c21      	adds	r1, r4, #0
1000d00c:	1c30      	adds	r0, r6, #0
1000d00e:	4c06      	ldr	r4, [pc, #24]	; (1000d028 <at_ble_encryption_start+0x74>)
1000d010:	47a0      	blx	r4
1000d012:	1c3b      	adds	r3, r7, #0
1000d014:	1c18      	adds	r0, r3, #0
1000d016:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d018:	1000d311 	.word	0x1000d311
1000d01c:	10014b06 	.word	0x10014b06
1000d020:	10010357 	.word	0x10010357
1000d024:	10014c14 	.word	0x10014c14
1000d028:	1000d98d 	.word	0x1000d98d

1000d02c <at_ble_encryption_request_reply>:
1000d02c:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000d02e:	24cf      	movs	r4, #207	; 0xcf
1000d030:	2b00      	cmp	r3, #0
1000d032:	d011      	beq.n	1000d058 <at_ble_encryption_request_reply+0x2c>
1000d034:	2a00      	cmp	r2, #0
1000d036:	d00a      	beq.n	1000d04e <at_ble_encryption_request_reply+0x22>
1000d038:	2905      	cmp	r1, #5
1000d03a:	d80d      	bhi.n	1000d058 <at_ble_encryption_request_reply+0x2c>
1000d03c:	2501      	movs	r5, #1
1000d03e:	2633      	movs	r6, #51	; 0x33
1000d040:	408d      	lsls	r5, r1
1000d042:	4235      	tst	r5, r6
1000d044:	d008      	beq.n	1000d058 <at_ble_encryption_request_reply+0x2c>
1000d046:	7e9d      	ldrb	r5, [r3, #26]
1000d048:	3d07      	subs	r5, #7
1000d04a:	2d09      	cmp	r5, #9
1000d04c:	d804      	bhi.n	1000d058 <at_ble_encryption_request_reply+0x2c>
1000d04e:	7e9c      	ldrb	r4, [r3, #26]
1000d050:	9400      	str	r4, [sp, #0]
1000d052:	4c02      	ldr	r4, [pc, #8]	; (1000d05c <at_ble_encryption_request_reply+0x30>)
1000d054:	47a0      	blx	r4
1000d056:	2400      	movs	r4, #0
1000d058:	1c20      	adds	r0, r4, #0
1000d05a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000d05c:	1000da49 	.word	0x1000da49

1000d060 <at_ble_htpt_create_db>:
1000d060:	b530      	push	{r4, r5, lr}
1000d062:	b085      	sub	sp, #20
1000d064:	ac08      	add	r4, sp, #32
1000d066:	8825      	ldrh	r5, [r4, #0]
1000d068:	ac09      	add	r4, sp, #36	; 0x24
1000d06a:	7824      	ldrb	r4, [r4, #0]
1000d06c:	9500      	str	r5, [sp, #0]
1000d06e:	9401      	str	r4, [sp, #4]
1000d070:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000d072:	9402      	str	r4, [sp, #8]
1000d074:	4c01      	ldr	r4, [pc, #4]	; (1000d07c <at_ble_htpt_create_db+0x1c>)
1000d076:	47a0      	blx	r4
1000d078:	b005      	add	sp, #20
1000d07a:	bd30      	pop	{r4, r5, pc}
1000d07c:	1000e985 	.word	0x1000e985

1000d080 <at_ble_htpt_enable>:
1000d080:	b508      	push	{r3, lr}
1000d082:	4b01      	ldr	r3, [pc, #4]	; (1000d088 <at_ble_htpt_enable+0x8>)
1000d084:	4798      	blx	r3
1000d086:	bd08      	pop	{r3, pc}
1000d088:	1000e9c5 	.word	0x1000e9c5

1000d08c <at_ble_htpt_temp_send>:
1000d08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000d08e:	1c04      	adds	r4, r0, #0
1000d090:	a806      	add	r0, sp, #24
1000d092:	7805      	ldrb	r5, [r0, #0]
1000d094:	20cf      	movs	r0, #207	; 0xcf
1000d096:	2900      	cmp	r1, #0
1000d098:	d003      	beq.n	1000d0a2 <at_ble_htpt_temp_send+0x16>
1000d09a:	1c20      	adds	r0, r4, #0
1000d09c:	9500      	str	r5, [sp, #0]
1000d09e:	4c01      	ldr	r4, [pc, #4]	; (1000d0a4 <at_ble_htpt_temp_send+0x18>)
1000d0a0:	47a0      	blx	r4
1000d0a2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000d0a4:	1000ea05 	.word	0x1000ea05

1000d0a8 <rx_callback>:
1000d0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d0aa:	8883      	ldrh	r3, [r0, #4]
1000d0ac:	1c01      	adds	r1, r0, #0
1000d0ae:	9301      	str	r3, [sp, #4]
1000d0b0:	88c5      	ldrh	r5, [r0, #6]
1000d0b2:	8806      	ldrh	r6, [r0, #0]
1000d0b4:	2d00      	cmp	r5, #0
1000d0b6:	d10f      	bne.n	1000d0d8 <rx_callback+0x30>
1000d0b8:	1c19      	adds	r1, r3, #0
1000d0ba:	1c30      	adds	r0, r6, #0
1000d0bc:	4b19      	ldr	r3, [pc, #100]	; (1000d124 <rx_callback+0x7c>)
1000d0be:	1c2a      	adds	r2, r5, #0
1000d0c0:	4798      	blx	r3
1000d0c2:	1e03      	subs	r3, r0, #0
1000d0c4:	d105      	bne.n	1000d0d2 <rx_callback+0x2a>
1000d0c6:	1c30      	adds	r0, r6, #0
1000d0c8:	9901      	ldr	r1, [sp, #4]
1000d0ca:	1c1a      	adds	r2, r3, #0
1000d0cc:	4c16      	ldr	r4, [pc, #88]	; (1000d128 <rx_callback+0x80>)
1000d0ce:	47a0      	blx	r4
1000d0d0:	e027      	b.n	1000d122 <rx_callback+0x7a>
1000d0d2:	4b16      	ldr	r3, [pc, #88]	; (1000d12c <rx_callback+0x84>)
1000d0d4:	4798      	blx	r3
1000d0d6:	e024      	b.n	1000d122 <rx_callback+0x7a>
1000d0d8:	4c15      	ldr	r4, [pc, #84]	; (1000d130 <rx_callback+0x88>)
1000d0da:	4a16      	ldr	r2, [pc, #88]	; (1000d134 <rx_callback+0x8c>)
1000d0dc:	6823      	ldr	r3, [r4, #0]
1000d0de:	6812      	ldr	r2, [r2, #0]
1000d0e0:	18eb      	adds	r3, r5, r3
1000d0e2:	4293      	cmp	r3, r2
1000d0e4:	d901      	bls.n	1000d0ea <rx_callback+0x42>
1000d0e6:	2300      	movs	r3, #0
1000d0e8:	6023      	str	r3, [r4, #0]
1000d0ea:	4f13      	ldr	r7, [pc, #76]	; (1000d138 <rx_callback+0x90>)
1000d0ec:	6822      	ldr	r2, [r4, #0]
1000d0ee:	683b      	ldr	r3, [r7, #0]
1000d0f0:	3108      	adds	r1, #8
1000d0f2:	1898      	adds	r0, r3, r2
1000d0f4:	1c2a      	adds	r2, r5, #0
1000d0f6:	4b11      	ldr	r3, [pc, #68]	; (1000d13c <rx_callback+0x94>)
1000d0f8:	4798      	blx	r3
1000d0fa:	683b      	ldr	r3, [r7, #0]
1000d0fc:	6822      	ldr	r2, [r4, #0]
1000d0fe:	1c30      	adds	r0, r6, #0
1000d100:	189a      	adds	r2, r3, r2
1000d102:	9901      	ldr	r1, [sp, #4]
1000d104:	4b07      	ldr	r3, [pc, #28]	; (1000d124 <rx_callback+0x7c>)
1000d106:	4798      	blx	r3
1000d108:	2800      	cmp	r0, #0
1000d10a:	d1e2      	bne.n	1000d0d2 <rx_callback+0x2a>
1000d10c:	6823      	ldr	r3, [r4, #0]
1000d10e:	683a      	ldr	r2, [r7, #0]
1000d110:	1c30      	adds	r0, r6, #0
1000d112:	18d2      	adds	r2, r2, r3
1000d114:	9901      	ldr	r1, [sp, #4]
1000d116:	1c2b      	adds	r3, r5, #0
1000d118:	4e03      	ldr	r6, [pc, #12]	; (1000d128 <rx_callback+0x80>)
1000d11a:	47b0      	blx	r6
1000d11c:	6823      	ldr	r3, [r4, #0]
1000d11e:	18ed      	adds	r5, r5, r3
1000d120:	6025      	str	r5, [r4, #0]
1000d122:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d124:	1000bd8d 	.word	0x1000bd8d
1000d128:	1000bd05 	.word	0x1000bd05
1000d12c:	1000b6e1 	.word	0x1000b6e1
1000d130:	10014c70 	.word	0x10014c70
1000d134:	10013e20 	.word	0x10013e20
1000d138:	10013e1c 	.word	0x10013e1c
1000d13c:	10010357 	.word	0x10010357

1000d140 <interface_send>:
1000d140:	b508      	push	{r3, lr}
1000d142:	4b02      	ldr	r3, [pc, #8]	; (1000d14c <interface_send+0xc>)
1000d144:	4798      	blx	r3
1000d146:	2000      	movs	r0, #0
1000d148:	bd08      	pop	{r3, pc}
1000d14a:	46c0      	nop			; (mov r8, r8)
1000d14c:	1000b419 	.word	0x1000b419

1000d150 <interface_init>:
1000d150:	2280      	movs	r2, #128	; 0x80
1000d152:	b510      	push	{r4, lr}
1000d154:	2100      	movs	r1, #0
1000d156:	1c04      	adds	r4, r0, #0
1000d158:	0092      	lsls	r2, r2, #2
1000d15a:	4b08      	ldr	r3, [pc, #32]	; (1000d17c <interface_init+0x2c>)
1000d15c:	4808      	ldr	r0, [pc, #32]	; (1000d180 <interface_init+0x30>)
1000d15e:	4798      	blx	r3
1000d160:	2200      	movs	r2, #0
1000d162:	4b08      	ldr	r3, [pc, #32]	; (1000d184 <interface_init+0x34>)
1000d164:	601a      	str	r2, [r3, #0]
1000d166:	4a08      	ldr	r2, [pc, #32]	; (1000d188 <interface_init+0x38>)
1000d168:	4b08      	ldr	r3, [pc, #32]	; (1000d18c <interface_init+0x3c>)
1000d16a:	601a      	str	r2, [r3, #0]
1000d16c:	4b08      	ldr	r3, [pc, #32]	; (1000d190 <interface_init+0x40>)
1000d16e:	6922      	ldr	r2, [r4, #16]
1000d170:	601a      	str	r2, [r3, #0]
1000d172:	6962      	ldr	r2, [r4, #20]
1000d174:	4b07      	ldr	r3, [pc, #28]	; (1000d194 <interface_init+0x44>)
1000d176:	601a      	str	r2, [r3, #0]
1000d178:	bd10      	pop	{r4, pc}
1000d17a:	46c0      	nop			; (mov r8, r8)
1000d17c:	10010369 	.word	0x10010369
1000d180:	10014e74 	.word	0x10014e74
1000d184:	10014c70 	.word	0x10014c70
1000d188:	10014c74 	.word	0x10014c74
1000d18c:	10012368 	.word	0x10012368
1000d190:	10013e1c 	.word	0x10013e1c
1000d194:	10013e20 	.word	0x10013e20

1000d198 <platform_cmd_cmpl_signal>:
1000d198:	2201      	movs	r2, #1
1000d19a:	4b01      	ldr	r3, [pc, #4]	; (1000d1a0 <platform_cmd_cmpl_signal+0x8>)
1000d19c:	601a      	str	r2, [r3, #0]
1000d19e:	4770      	bx	lr
1000d1a0:	10013e24 	.word	0x10013e24

1000d1a4 <platform_cmd_cmpl_wait>:
1000d1a4:	b510      	push	{r4, lr}
1000d1a6:	1c04      	adds	r4, r0, #0
1000d1a8:	4b07      	ldr	r3, [pc, #28]	; (1000d1c8 <platform_cmd_cmpl_wait+0x24>)
1000d1aa:	681a      	ldr	r2, [r3, #0]
1000d1ac:	2a01      	cmp	r2, #1
1000d1ae:	d003      	beq.n	1000d1b8 <platform_cmd_cmpl_wait+0x14>
1000d1b0:	4b06      	ldr	r3, [pc, #24]	; (1000d1cc <platform_cmd_cmpl_wait+0x28>)
1000d1b2:	2000      	movs	r0, #0
1000d1b4:	4798      	blx	r3
1000d1b6:	e7f7      	b.n	1000d1a8 <platform_cmd_cmpl_wait+0x4>
1000d1b8:	6819      	ldr	r1, [r3, #0]
1000d1ba:	2901      	cmp	r1, #1
1000d1bc:	d102      	bne.n	1000d1c4 <platform_cmd_cmpl_wait+0x20>
1000d1be:	2200      	movs	r2, #0
1000d1c0:	601a      	str	r2, [r3, #0]
1000d1c2:	e000      	b.n	1000d1c6 <platform_cmd_cmpl_wait+0x22>
1000d1c4:	7022      	strb	r2, [r4, #0]
1000d1c6:	bd10      	pop	{r4, pc}
1000d1c8:	10013e24 	.word	0x10013e24
1000d1cc:	1000b469 	.word	0x1000b469

1000d1d0 <start_timer>:
1000d1d0:	4770      	bx	lr

1000d1d2 <stop_timer>:
1000d1d2:	4770      	bx	lr

1000d1d4 <dbg_le_set_bd_addr_req_handler>:
1000d1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d1d6:	466b      	mov	r3, sp
1000d1d8:	1dde      	adds	r6, r3, #7
1000d1da:	2300      	movs	r3, #0
1000d1dc:	7033      	strb	r3, [r6, #0]
1000d1de:	230f      	movs	r3, #15
1000d1e0:	4c13      	ldr	r4, [pc, #76]	; (1000d230 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000d1e2:	2703      	movs	r7, #3
1000d1e4:	7023      	strb	r3, [r4, #0]
1000d1e6:	2300      	movs	r3, #0
1000d1e8:	70e3      	strb	r3, [r4, #3]
1000d1ea:	4b12      	ldr	r3, [pc, #72]	; (1000d234 <dbg_le_set_bd_addr_req_handler+0x60>)
1000d1ec:	1c01      	adds	r1, r0, #0
1000d1ee:	881a      	ldrh	r2, [r3, #0]
1000d1f0:	881b      	ldrh	r3, [r3, #0]
1000d1f2:	7122      	strb	r2, [r4, #4]
1000d1f4:	0a1b      	lsrs	r3, r3, #8
1000d1f6:	2206      	movs	r2, #6
1000d1f8:	7163      	strb	r3, [r4, #5]
1000d1fa:	480f      	ldr	r0, [pc, #60]	; (1000d238 <dbg_le_set_bd_addr_req_handler+0x64>)
1000d1fc:	4b0f      	ldr	r3, [pc, #60]	; (1000d23c <dbg_le_set_bd_addr_req_handler+0x68>)
1000d1fe:	7067      	strb	r7, [r4, #1]
1000d200:	70a7      	strb	r7, [r4, #2]
1000d202:	4798      	blx	r3
1000d204:	4d0e      	ldr	r5, [pc, #56]	; (1000d240 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000d206:	4b0f      	ldr	r3, [pc, #60]	; (1000d244 <dbg_le_set_bd_addr_req_handler+0x70>)
1000d208:	210e      	movs	r1, #14
1000d20a:	802b      	strh	r3, [r5, #0]
1000d20c:	2306      	movs	r3, #6
1000d20e:	71a3      	strb	r3, [r4, #6]
1000d210:	2300      	movs	r3, #0
1000d212:	1c20      	adds	r0, r4, #0
1000d214:	71e3      	strb	r3, [r4, #7]
1000d216:	4b0c      	ldr	r3, [pc, #48]	; (1000d248 <dbg_le_set_bd_addr_req_handler+0x74>)
1000d218:	80af      	strh	r7, [r5, #4]
1000d21a:	4798      	blx	r3
1000d21c:	1c30      	adds	r0, r6, #0
1000d21e:	4b0b      	ldr	r3, [pc, #44]	; (1000d24c <dbg_le_set_bd_addr_req_handler+0x78>)
1000d220:	4798      	blx	r3
1000d222:	7833      	ldrb	r3, [r6, #0]
1000d224:	20e2      	movs	r0, #226	; 0xe2
1000d226:	2b00      	cmp	r3, #0
1000d228:	d101      	bne.n	1000d22e <dbg_le_set_bd_addr_req_handler+0x5a>
1000d22a:	68ab      	ldr	r3, [r5, #8]
1000d22c:	7818      	ldrb	r0, [r3, #0]
1000d22e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d230:	10014e74 	.word	0x10014e74
1000d234:	10014b04 	.word	0x10014b04
1000d238:	10014e7c 	.word	0x10014e7c
1000d23c:	10010357 	.word	0x10010357
1000d240:	10014af8 	.word	0x10014af8
1000d244:	00000329 	.word	0x00000329
1000d248:	1000d141 	.word	0x1000d141
1000d24c:	1000d1a5 	.word	0x1000d1a5

1000d250 <gapc_get_dev_info_cfm.constprop.1>:
1000d250:	b538      	push	{r3, r4, r5, lr}
1000d252:	230b      	movs	r3, #11
1000d254:	4c27      	ldr	r4, [pc, #156]	; (1000d2f4 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000d256:	7023      	strb	r3, [r4, #0]
1000d258:	3303      	adds	r3, #3
1000d25a:	7063      	strb	r3, [r4, #1]
1000d25c:	3329      	adds	r3, #41	; 0x29
1000d25e:	70a3      	strb	r3, [r4, #2]
1000d260:	4b25      	ldr	r3, [pc, #148]	; (1000d2f8 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000d262:	70e1      	strb	r1, [r4, #3]
1000d264:	881a      	ldrh	r2, [r3, #0]
1000d266:	881b      	ldrh	r3, [r3, #0]
1000d268:	7122      	strb	r2, [r4, #4]
1000d26a:	0a1b      	lsrs	r3, r3, #8
1000d26c:	7163      	strb	r3, [r4, #5]
1000d26e:	2300      	movs	r3, #0
1000d270:	7220      	strb	r0, [r4, #8]
1000d272:	7263      	strb	r3, [r4, #9]
1000d274:	2801      	cmp	r0, #1
1000d276:	d02b      	beq.n	1000d2d0 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000d278:	4298      	cmp	r0, r3
1000d27a:	d01b      	beq.n	1000d2b4 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000d27c:	2802      	cmp	r0, #2
1000d27e:	d12f      	bne.n	1000d2e0 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000d280:	4b1e      	ldr	r3, [pc, #120]	; (1000d2fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d282:	2112      	movs	r1, #18
1000d284:	1c1a      	adds	r2, r3, #0
1000d286:	32ce      	adds	r2, #206	; 0xce
1000d288:	8812      	ldrh	r2, [r2, #0]
1000d28a:	72a2      	strb	r2, [r4, #10]
1000d28c:	0a12      	lsrs	r2, r2, #8
1000d28e:	72e2      	strb	r2, [r4, #11]
1000d290:	1c1a      	adds	r2, r3, #0
1000d292:	32d0      	adds	r2, #208	; 0xd0
1000d294:	8812      	ldrh	r2, [r2, #0]
1000d296:	7322      	strb	r2, [r4, #12]
1000d298:	0a12      	lsrs	r2, r2, #8
1000d29a:	7362      	strb	r2, [r4, #13]
1000d29c:	1c1a      	adds	r2, r3, #0
1000d29e:	32d2      	adds	r2, #210	; 0xd2
1000d2a0:	8812      	ldrh	r2, [r2, #0]
1000d2a2:	33d4      	adds	r3, #212	; 0xd4
1000d2a4:	73a2      	strb	r2, [r4, #14]
1000d2a6:	0a12      	lsrs	r2, r2, #8
1000d2a8:	73e2      	strb	r2, [r4, #15]
1000d2aa:	881b      	ldrh	r3, [r3, #0]
1000d2ac:	7423      	strb	r3, [r4, #16]
1000d2ae:	0a1b      	lsrs	r3, r3, #8
1000d2b0:	7463      	strb	r3, [r4, #17]
1000d2b2:	e016      	b.n	1000d2e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d2b4:	4b11      	ldr	r3, [pc, #68]	; (1000d2fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d2b6:	4912      	ldr	r1, [pc, #72]	; (1000d300 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000d2b8:	33aa      	adds	r3, #170	; 0xaa
1000d2ba:	881d      	ldrh	r5, [r3, #0]
1000d2bc:	4811      	ldr	r0, [pc, #68]	; (1000d304 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000d2be:	0a2b      	lsrs	r3, r5, #8
1000d2c0:	72a5      	strb	r5, [r4, #10]
1000d2c2:	72e3      	strb	r3, [r4, #11]
1000d2c4:	1c2a      	adds	r2, r5, #0
1000d2c6:	4b10      	ldr	r3, [pc, #64]	; (1000d308 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000d2c8:	350c      	adds	r5, #12
1000d2ca:	4798      	blx	r3
1000d2cc:	b2a9      	uxth	r1, r5
1000d2ce:	e008      	b.n	1000d2e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d2d0:	4b0a      	ldr	r3, [pc, #40]	; (1000d2fc <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000d2d2:	210c      	movs	r1, #12
1000d2d4:	33cc      	adds	r3, #204	; 0xcc
1000d2d6:	881b      	ldrh	r3, [r3, #0]
1000d2d8:	72a3      	strb	r3, [r4, #10]
1000d2da:	0a1b      	lsrs	r3, r3, #8
1000d2dc:	72e3      	strb	r3, [r4, #11]
1000d2de:	e000      	b.n	1000d2e2 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000d2e0:	210a      	movs	r1, #10
1000d2e2:	1c0b      	adds	r3, r1, #0
1000d2e4:	3b08      	subs	r3, #8
1000d2e6:	71a3      	strb	r3, [r4, #6]
1000d2e8:	121b      	asrs	r3, r3, #8
1000d2ea:	71e3      	strb	r3, [r4, #7]
1000d2ec:	1c20      	adds	r0, r4, #0
1000d2ee:	4b07      	ldr	r3, [pc, #28]	; (1000d30c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000d2f0:	4798      	blx	r3
1000d2f2:	bd38      	pop	{r3, r4, r5, pc}
1000d2f4:	10014e74 	.word	0x10014e74
1000d2f8:	10014b04 	.word	0x10014b04
1000d2fc:	10014b96 	.word	0x10014b96
1000d300:	10014c42 	.word	0x10014c42
1000d304:	10014e80 	.word	0x10014e80
1000d308:	10010357 	.word	0x10010357
1000d30c:	1000d141 	.word	0x1000d141

1000d310 <check_ConnData_idx_role>:
1000d310:	4b0c      	ldr	r3, [pc, #48]	; (1000d344 <check_ConnData_idx_role+0x34>)
1000d312:	b570      	push	{r4, r5, r6, lr}
1000d314:	1c04      	adds	r4, r0, #0
1000d316:	2008      	movs	r0, #8
1000d318:	429c      	cmp	r4, r3
1000d31a:	d011      	beq.n	1000d340 <check_ConnData_idx_role+0x30>
1000d31c:	2300      	movs	r3, #0
1000d31e:	2212      	movs	r2, #18
1000d320:	435a      	muls	r2, r3
1000d322:	4d09      	ldr	r5, [pc, #36]	; (1000d348 <check_ConnData_idx_role+0x38>)
1000d324:	b2d8      	uxtb	r0, r3
1000d326:	1956      	adds	r6, r2, r5
1000d328:	8976      	ldrh	r6, [r6, #10]
1000d32a:	42a6      	cmp	r6, r4
1000d32c:	d104      	bne.n	1000d338 <check_ConnData_idx_role+0x28>
1000d32e:	2900      	cmp	r1, #0
1000d330:	d006      	beq.n	1000d340 <check_ConnData_idx_role+0x30>
1000d332:	5d53      	ldrb	r3, [r2, r5]
1000d334:	700b      	strb	r3, [r1, #0]
1000d336:	e003      	b.n	1000d340 <check_ConnData_idx_role+0x30>
1000d338:	3301      	adds	r3, #1
1000d33a:	2b08      	cmp	r3, #8
1000d33c:	d1ef      	bne.n	1000d31e <check_ConnData_idx_role+0xe>
1000d33e:	1c18      	adds	r0, r3, #0
1000d340:	bd70      	pop	{r4, r5, r6, pc}
1000d342:	46c0      	nop			; (mov r8, r8)
1000d344:	0000ffff 	.word	0x0000ffff
1000d348:	10014b06 	.word	0x10014b06

1000d34c <check_ConnData_emptyEntry>:
1000d34c:	2300      	movs	r3, #0
1000d34e:	2212      	movs	r2, #18
1000d350:	435a      	muls	r2, r3
1000d352:	4906      	ldr	r1, [pc, #24]	; (1000d36c <check_ConnData_emptyEntry+0x20>)
1000d354:	b2d8      	uxtb	r0, r3
1000d356:	1852      	adds	r2, r2, r1
1000d358:	8951      	ldrh	r1, [r2, #10]
1000d35a:	4a05      	ldr	r2, [pc, #20]	; (1000d370 <check_ConnData_emptyEntry+0x24>)
1000d35c:	4291      	cmp	r1, r2
1000d35e:	d003      	beq.n	1000d368 <check_ConnData_emptyEntry+0x1c>
1000d360:	3301      	adds	r3, #1
1000d362:	2b08      	cmp	r3, #8
1000d364:	d1f3      	bne.n	1000d34e <check_ConnData_emptyEntry+0x2>
1000d366:	1c18      	adds	r0, r3, #0
1000d368:	4770      	bx	lr
1000d36a:	46c0      	nop			; (mov r8, r8)
1000d36c:	10014b06 	.word	0x10014b06
1000d370:	0000ffff 	.word	0x0000ffff

1000d374 <gapc_cmp_evt>:
1000d374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d376:	780b      	ldrb	r3, [r1, #0]
1000d378:	1c05      	adds	r5, r0, #0
1000d37a:	1e58      	subs	r0, r3, #1
1000d37c:	784e      	ldrb	r6, [r1, #1]
1000d37e:	280f      	cmp	r0, #15
1000d380:	d85a      	bhi.n	1000d438 <gapc_cmp_evt+0xc4>
1000d382:	1c14      	adds	r4, r2, #0
1000d384:	f001 fb9a 	bl	1000eabc <__gnu_thumb1_case_uqi>
1000d388:	5858440a 	.word	0x5858440a
1000d38c:	4b584444 	.word	0x4b584444
1000d390:	0825122d 	.word	0x0825122d
1000d394:	3e395858 	.word	0x3e395858
1000d398:	203b      	movs	r0, #59	; 0x3b
1000d39a:	e04e      	b.n	1000d43a <gapc_cmp_evt+0xc6>
1000d39c:	203b      	movs	r0, #59	; 0x3b
1000d39e:	2e00      	cmp	r6, #0
1000d3a0:	d04b      	beq.n	1000d43a <gapc_cmp_evt+0xc6>
1000d3a2:	0a2d      	lsrs	r5, r5, #8
1000d3a4:	8015      	strh	r5, [r2, #0]
1000d3a6:	7096      	strb	r6, [r2, #2]
1000d3a8:	3835      	subs	r0, #53	; 0x35
1000d3aa:	e046      	b.n	1000d43a <gapc_cmp_evt+0xc6>
1000d3ac:	466b      	mov	r3, sp
1000d3ae:	1ddf      	adds	r7, r3, #7
1000d3b0:	2301      	movs	r3, #1
1000d3b2:	0a2d      	lsrs	r5, r5, #8
1000d3b4:	703b      	strb	r3, [r7, #0]
1000d3b6:	1c28      	adds	r0, r5, #0
1000d3b8:	1c39      	adds	r1, r7, #0
1000d3ba:	4b20      	ldr	r3, [pc, #128]	; (1000d43c <gapc_cmp_evt+0xc8>)
1000d3bc:	4798      	blx	r3
1000d3be:	2807      	cmp	r0, #7
1000d3c0:	d803      	bhi.n	1000d3ca <gapc_cmp_evt+0x56>
1000d3c2:	783b      	ldrb	r3, [r7, #0]
1000d3c4:	203b      	movs	r0, #59	; 0x3b
1000d3c6:	2b00      	cmp	r3, #0
1000d3c8:	d037      	beq.n	1000d43a <gapc_cmp_evt+0xc6>
1000d3ca:	8065      	strh	r5, [r4, #2]
1000d3cc:	7126      	strb	r6, [r4, #4]
1000d3ce:	2009      	movs	r0, #9
1000d3d0:	e033      	b.n	1000d43a <gapc_cmp_evt+0xc6>
1000d3d2:	203b      	movs	r0, #59	; 0x3b
1000d3d4:	2e00      	cmp	r6, #0
1000d3d6:	d030      	beq.n	1000d43a <gapc_cmp_evt+0xc6>
1000d3d8:	0a2d      	lsrs	r5, r5, #8
1000d3da:	8015      	strh	r5, [r2, #0]
1000d3dc:	7096      	strb	r6, [r2, #2]
1000d3de:	382d      	subs	r0, #45	; 0x2d
1000d3e0:	e02b      	b.n	1000d43a <gapc_cmp_evt+0xc6>
1000d3e2:	203b      	movs	r0, #59	; 0x3b
1000d3e4:	2e00      	cmp	r6, #0
1000d3e6:	d028      	beq.n	1000d43a <gapc_cmp_evt+0xc6>
1000d3e8:	2300      	movs	r3, #0
1000d3ea:	0a2d      	lsrs	r5, r5, #8
1000d3ec:	8015      	strh	r5, [r2, #0]
1000d3ee:	7096      	strb	r6, [r2, #2]
1000d3f0:	8093      	strh	r3, [r2, #4]
1000d3f2:	80d3      	strh	r3, [r2, #6]
1000d3f4:	8113      	strh	r3, [r2, #8]
1000d3f6:	3834      	subs	r0, #52	; 0x34
1000d3f8:	e01f      	b.n	1000d43a <gapc_cmp_evt+0xc6>
1000d3fa:	203b      	movs	r0, #59	; 0x3b
1000d3fc:	2e00      	cmp	r6, #0
1000d3fe:	d01c      	beq.n	1000d43a <gapc_cmp_evt+0xc6>
1000d400:	7216      	strb	r6, [r2, #8]
1000d402:	e003      	b.n	1000d40c <gapc_cmp_evt+0x98>
1000d404:	203b      	movs	r0, #59	; 0x3b
1000d406:	2e00      	cmp	r6, #0
1000d408:	d017      	beq.n	1000d43a <gapc_cmp_evt+0xc6>
1000d40a:	7116      	strb	r6, [r2, #4]
1000d40c:	3812      	subs	r0, #18
1000d40e:	e014      	b.n	1000d43a <gapc_cmp_evt+0xc6>
1000d410:	203b      	movs	r0, #59	; 0x3b
1000d412:	2e00      	cmp	r6, #0
1000d414:	d011      	beq.n	1000d43a <gapc_cmp_evt+0xc6>
1000d416:	7093      	strb	r3, [r2, #2]
1000d418:	70d6      	strb	r6, [r2, #3]
1000d41a:	382a      	subs	r0, #42	; 0x2a
1000d41c:	e00d      	b.n	1000d43a <gapc_cmp_evt+0xc6>
1000d41e:	203b      	movs	r0, #59	; 0x3b
1000d420:	2e00      	cmp	r6, #0
1000d422:	d00a      	beq.n	1000d43a <gapc_cmp_evt+0xc6>
1000d424:	0a2d      	lsrs	r5, r5, #8
1000d426:	7016      	strb	r6, [r2, #0]
1000d428:	8055      	strh	r5, [r2, #2]
1000d42a:	1d10      	adds	r0, r2, #4
1000d42c:	2100      	movs	r1, #0
1000d42e:	2205      	movs	r2, #5
1000d430:	4b03      	ldr	r3, [pc, #12]	; (1000d440 <gapc_cmp_evt+0xcc>)
1000d432:	4798      	blx	r3
1000d434:	2012      	movs	r0, #18
1000d436:	e000      	b.n	1000d43a <gapc_cmp_evt+0xc6>
1000d438:	2000      	movs	r0, #0
1000d43a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000d43c:	1000d311 	.word	0x1000d311
1000d440:	10010369 	.word	0x10010369

1000d444 <gapc_connection_cfm_handler>:
1000d444:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d446:	b085      	sub	sp, #20
1000d448:	1c1d      	adds	r5, r3, #0
1000d44a:	ab0a      	add	r3, sp, #40	; 0x28
1000d44c:	781b      	ldrb	r3, [r3, #0]
1000d44e:	9201      	str	r2, [sp, #4]
1000d450:	9302      	str	r3, [sp, #8]
1000d452:	ab0b      	add	r3, sp, #44	; 0x2c
1000d454:	781b      	ldrb	r3, [r3, #0]
1000d456:	1c07      	adds	r7, r0, #0
1000d458:	9303      	str	r3, [sp, #12]
1000d45a:	ab0c      	add	r3, sp, #48	; 0x30
1000d45c:	881a      	ldrh	r2, [r3, #0]
1000d45e:	2302      	movs	r3, #2
1000d460:	1c0e      	adds	r6, r1, #0
1000d462:	4c23      	ldr	r4, [pc, #140]	; (1000d4f0 <gapc_connection_cfm_handler+0xac>)
1000d464:	1c39      	adds	r1, r7, #0
1000d466:	7023      	strb	r3, [r4, #0]
1000d468:	330c      	adds	r3, #12
1000d46a:	7063      	strb	r3, [r4, #1]
1000d46c:	70a3      	strb	r3, [r4, #2]
1000d46e:	4b21      	ldr	r3, [pc, #132]	; (1000d4f4 <gapc_connection_cfm_handler+0xb0>)
1000d470:	70e2      	strb	r2, [r4, #3]
1000d472:	881a      	ldrh	r2, [r3, #0]
1000d474:	881b      	ldrh	r3, [r3, #0]
1000d476:	7122      	strb	r2, [r4, #4]
1000d478:	0a1b      	lsrs	r3, r3, #8
1000d47a:	4f1f      	ldr	r7, [pc, #124]	; (1000d4f8 <gapc_connection_cfm_handler+0xb4>)
1000d47c:	2210      	movs	r2, #16
1000d47e:	481f      	ldr	r0, [pc, #124]	; (1000d4fc <gapc_connection_cfm_handler+0xb8>)
1000d480:	7163      	strb	r3, [r4, #5]
1000d482:	47b8      	blx	r7
1000d484:	0a33      	lsrs	r3, r6, #8
1000d486:	7626      	strb	r6, [r4, #24]
1000d488:	7663      	strb	r3, [r4, #25]
1000d48a:	9901      	ldr	r1, [sp, #4]
1000d48c:	0c33      	lsrs	r3, r6, #16
1000d48e:	2210      	movs	r2, #16
1000d490:	0e36      	lsrs	r6, r6, #24
1000d492:	481b      	ldr	r0, [pc, #108]	; (1000d500 <gapc_connection_cfm_handler+0xbc>)
1000d494:	76a3      	strb	r3, [r4, #26]
1000d496:	76e6      	strb	r6, [r4, #27]
1000d498:	47b8      	blx	r7
1000d49a:	1c23      	adds	r3, r4, #0
1000d49c:	332c      	adds	r3, #44	; 0x2c
1000d49e:	701d      	strb	r5, [r3, #0]
1000d4a0:	1c23      	adds	r3, r4, #0
1000d4a2:	0a2a      	lsrs	r2, r5, #8
1000d4a4:	332d      	adds	r3, #45	; 0x2d
1000d4a6:	701a      	strb	r2, [r3, #0]
1000d4a8:	1c23      	adds	r3, r4, #0
1000d4aa:	0c2a      	lsrs	r2, r5, #16
1000d4ac:	332e      	adds	r3, #46	; 0x2e
1000d4ae:	701a      	strb	r2, [r3, #0]
1000d4b0:	1c23      	adds	r3, r4, #0
1000d4b2:	0e2d      	lsrs	r5, r5, #24
1000d4b4:	332f      	adds	r3, #47	; 0x2f
1000d4b6:	466a      	mov	r2, sp
1000d4b8:	701d      	strb	r5, [r3, #0]
1000d4ba:	1c23      	adds	r3, r4, #0
1000d4bc:	7a12      	ldrb	r2, [r2, #8]
1000d4be:	3330      	adds	r3, #48	; 0x30
1000d4c0:	701a      	strb	r2, [r3, #0]
1000d4c2:	1c23      	adds	r3, r4, #0
1000d4c4:	2500      	movs	r5, #0
1000d4c6:	3331      	adds	r3, #49	; 0x31
1000d4c8:	466a      	mov	r2, sp
1000d4ca:	701d      	strb	r5, [r3, #0]
1000d4cc:	1c23      	adds	r3, r4, #0
1000d4ce:	7b12      	ldrb	r2, [r2, #12]
1000d4d0:	3332      	adds	r3, #50	; 0x32
1000d4d2:	701a      	strb	r2, [r3, #0]
1000d4d4:	1c23      	adds	r3, r4, #0
1000d4d6:	3333      	adds	r3, #51	; 0x33
1000d4d8:	701d      	strb	r5, [r3, #0]
1000d4da:	232c      	movs	r3, #44	; 0x2c
1000d4dc:	1c20      	adds	r0, r4, #0
1000d4de:	71a3      	strb	r3, [r4, #6]
1000d4e0:	2134      	movs	r1, #52	; 0x34
1000d4e2:	4b08      	ldr	r3, [pc, #32]	; (1000d504 <gapc_connection_cfm_handler+0xc0>)
1000d4e4:	71e5      	strb	r5, [r4, #7]
1000d4e6:	4798      	blx	r3
1000d4e8:	1c28      	adds	r0, r5, #0
1000d4ea:	b005      	add	sp, #20
1000d4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d4ee:	46c0      	nop			; (mov r8, r8)
1000d4f0:	10014e74 	.word	0x10014e74
1000d4f4:	10014b04 	.word	0x10014b04
1000d4f8:	10010357 	.word	0x10010357
1000d4fc:	10014e7c 	.word	0x10014e7c
1000d500:	10014e90 	.word	0x10014e90
1000d504:	1000d141 	.word	0x1000d141

1000d508 <gapc_con_req_ind>:
1000d508:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d50a:	7845      	ldrb	r5, [r0, #1]
1000d50c:	7803      	ldrb	r3, [r0, #0]
1000d50e:	4c30      	ldr	r4, [pc, #192]	; (1000d5d0 <gapc_con_req_ind+0xc8>)
1000d510:	022d      	lsls	r5, r5, #8
1000d512:	431d      	orrs	r5, r3
1000d514:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000d516:	78c3      	ldrb	r3, [r0, #3]
1000d518:	7882      	ldrb	r2, [r0, #2]
1000d51a:	b08b      	sub	sp, #44	; 0x2c
1000d51c:	021b      	lsls	r3, r3, #8
1000d51e:	431a      	orrs	r2, r3
1000d520:	466b      	mov	r3, sp
1000d522:	9205      	str	r2, [sp, #20]
1000d524:	8a9b      	ldrh	r3, [r3, #20]
1000d526:	2120      	movs	r1, #32
1000d528:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000d52a:	7943      	ldrb	r3, [r0, #5]
1000d52c:	7902      	ldrb	r2, [r0, #4]
1000d52e:	021b      	lsls	r3, r3, #8
1000d530:	431a      	orrs	r2, r3
1000d532:	466b      	mov	r3, sp
1000d534:	9206      	str	r2, [sp, #24]
1000d536:	8b1b      	ldrh	r3, [r3, #24]
1000d538:	1c06      	adds	r6, r0, #0
1000d53a:	8623      	strh	r3, [r4, #48]	; 0x30
1000d53c:	79c3      	ldrb	r3, [r0, #7]
1000d53e:	7982      	ldrb	r2, [r0, #6]
1000d540:	021b      	lsls	r3, r3, #8
1000d542:	431a      	orrs	r2, r3
1000d544:	466b      	mov	r3, sp
1000d546:	9207      	str	r2, [sp, #28]
1000d548:	466a      	mov	r2, sp
1000d54a:	8b9b      	ldrh	r3, [r3, #28]
1000d54c:	1852      	adds	r2, r2, r1
1000d54e:	8663      	strh	r3, [r4, #50]	; 0x32
1000d550:	7a43      	ldrb	r3, [r0, #9]
1000d552:	1c01      	adds	r1, r0, #0
1000d554:	9308      	str	r3, [sp, #32]
1000d556:	1c23      	adds	r3, r4, #0
1000d558:	7812      	ldrb	r2, [r2, #0]
1000d55a:	3377      	adds	r3, #119	; 0x77
1000d55c:	3478      	adds	r4, #120	; 0x78
1000d55e:	701a      	strb	r2, [r3, #0]
1000d560:	310a      	adds	r1, #10
1000d562:	2206      	movs	r2, #6
1000d564:	4b1b      	ldr	r3, [pc, #108]	; (1000d5d4 <gapc_con_req_ind+0xcc>)
1000d566:	1c20      	adds	r0, r4, #0
1000d568:	4798      	blx	r3
1000d56a:	7c33      	ldrb	r3, [r6, #16]
1000d56c:	9309      	str	r3, [sp, #36]	; 0x24
1000d56e:	4b1a      	ldr	r3, [pc, #104]	; (1000d5d8 <gapc_con_req_ind+0xd0>)
1000d570:	4798      	blx	r3
1000d572:	4e1a      	ldr	r6, [pc, #104]	; (1000d5dc <gapc_con_req_ind+0xd4>)
1000d574:	1e07      	subs	r7, r0, #0
1000d576:	2f07      	cmp	r7, #7
1000d578:	d81b      	bhi.n	1000d5b2 <gapc_con_req_ind+0xaa>
1000d57a:	2312      	movs	r3, #18
1000d57c:	4343      	muls	r3, r0
1000d57e:	18f0      	adds	r0, r6, r3
1000d580:	8145      	strh	r5, [r0, #10]
1000d582:	4669      	mov	r1, sp
1000d584:	2524      	movs	r5, #36	; 0x24
1000d586:	1949      	adds	r1, r1, r5
1000d588:	7809      	ldrb	r1, [r1, #0]
1000d58a:	2206      	movs	r2, #6
1000d58c:	54f1      	strb	r1, [r6, r3]
1000d58e:	2120      	movs	r1, #32
1000d590:	466b      	mov	r3, sp
1000d592:	185b      	adds	r3, r3, r1
1000d594:	781b      	ldrb	r3, [r3, #0]
1000d596:	1c21      	adds	r1, r4, #0
1000d598:	7043      	strb	r3, [r0, #1]
1000d59a:	466b      	mov	r3, sp
1000d59c:	8a9b      	ldrh	r3, [r3, #20]
1000d59e:	3002      	adds	r0, #2
1000d5a0:	8143      	strh	r3, [r0, #10]
1000d5a2:	466b      	mov	r3, sp
1000d5a4:	8b1b      	ldrh	r3, [r3, #24]
1000d5a6:	8183      	strh	r3, [r0, #12]
1000d5a8:	466b      	mov	r3, sp
1000d5aa:	8b9b      	ldrh	r3, [r3, #28]
1000d5ac:	81c3      	strh	r3, [r0, #14]
1000d5ae:	4b09      	ldr	r3, [pc, #36]	; (1000d5d4 <gapc_con_req_ind+0xcc>)
1000d5b0:	4798      	blx	r3
1000d5b2:	2112      	movs	r1, #18
1000d5b4:	2300      	movs	r3, #0
1000d5b6:	434f      	muls	r7, r1
1000d5b8:	9300      	str	r3, [sp, #0]
1000d5ba:	9301      	str	r3, [sp, #4]
1000d5bc:	19f6      	adds	r6, r6, r7
1000d5be:	8971      	ldrh	r1, [r6, #10]
1000d5c0:	4a07      	ldr	r2, [pc, #28]	; (1000d5e0 <gapc_con_req_ind+0xd8>)
1000d5c2:	9102      	str	r1, [sp, #8]
1000d5c4:	1c10      	adds	r0, r2, #0
1000d5c6:	1c19      	adds	r1, r3, #0
1000d5c8:	4c06      	ldr	r4, [pc, #24]	; (1000d5e4 <gapc_con_req_ind+0xdc>)
1000d5ca:	47a0      	blx	r4
1000d5cc:	b00b      	add	sp, #44	; 0x2c
1000d5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d5d0:	10014b96 	.word	0x10014b96
1000d5d4:	10010357 	.word	0x10010357
1000d5d8:	1000d34d 	.word	0x1000d34d
1000d5dc:	10014b06 	.word	0x10014b06
1000d5e0:	10013e28 	.word	0x10013e28
1000d5e4:	1000d445 	.word	0x1000d445

1000d5e8 <gapc_disconnect_cmd_handler>:
1000d5e8:	2204      	movs	r2, #4
1000d5ea:	b510      	push	{r4, lr}
1000d5ec:	4b0c      	ldr	r3, [pc, #48]	; (1000d620 <gapc_disconnect_cmd_handler+0x38>)
1000d5ee:	2400      	movs	r4, #0
1000d5f0:	701a      	strb	r2, [r3, #0]
1000d5f2:	320a      	adds	r2, #10
1000d5f4:	705a      	strb	r2, [r3, #1]
1000d5f6:	709a      	strb	r2, [r3, #2]
1000d5f8:	4a0a      	ldr	r2, [pc, #40]	; (1000d624 <gapc_disconnect_cmd_handler+0x3c>)
1000d5fa:	70d9      	strb	r1, [r3, #3]
1000d5fc:	8811      	ldrh	r1, [r2, #0]
1000d5fe:	8812      	ldrh	r2, [r2, #0]
1000d600:	7119      	strb	r1, [r3, #4]
1000d602:	0a12      	lsrs	r2, r2, #8
1000d604:	715a      	strb	r2, [r3, #5]
1000d606:	2201      	movs	r2, #1
1000d608:	721a      	strb	r2, [r3, #8]
1000d60a:	1892      	adds	r2, r2, r2
1000d60c:	7258      	strb	r0, [r3, #9]
1000d60e:	719a      	strb	r2, [r3, #6]
1000d610:	71dc      	strb	r4, [r3, #7]
1000d612:	1c18      	adds	r0, r3, #0
1000d614:	210a      	movs	r1, #10
1000d616:	4b04      	ldr	r3, [pc, #16]	; (1000d628 <gapc_disconnect_cmd_handler+0x40>)
1000d618:	4798      	blx	r3
1000d61a:	1c20      	adds	r0, r4, #0
1000d61c:	bd10      	pop	{r4, pc}
1000d61e:	46c0      	nop			; (mov r8, r8)
1000d620:	10014e74 	.word	0x10014e74
1000d624:	10014b04 	.word	0x10014b04
1000d628:	1000d141 	.word	0x1000d141

1000d62c <gapc_disconnect_ind>:
1000d62c:	1c02      	adds	r2, r0, #0
1000d62e:	b508      	push	{r3, lr}
1000d630:	7843      	ldrb	r3, [r0, #1]
1000d632:	7800      	ldrb	r0, [r0, #0]
1000d634:	021b      	lsls	r3, r3, #8
1000d636:	4318      	orrs	r0, r3
1000d638:	8008      	strh	r0, [r1, #0]
1000d63a:	7893      	ldrb	r3, [r2, #2]
1000d63c:	708b      	strb	r3, [r1, #2]
1000d63e:	2100      	movs	r1, #0
1000d640:	4b05      	ldr	r3, [pc, #20]	; (1000d658 <gapc_disconnect_ind+0x2c>)
1000d642:	4798      	blx	r3
1000d644:	2807      	cmp	r0, #7
1000d646:	d806      	bhi.n	1000d656 <gapc_disconnect_ind+0x2a>
1000d648:	2312      	movs	r3, #18
1000d64a:	4358      	muls	r0, r3
1000d64c:	4b03      	ldr	r3, [pc, #12]	; (1000d65c <gapc_disconnect_ind+0x30>)
1000d64e:	1818      	adds	r0, r3, r0
1000d650:	2301      	movs	r3, #1
1000d652:	425b      	negs	r3, r3
1000d654:	8143      	strh	r3, [r0, #10]
1000d656:	bd08      	pop	{r3, pc}
1000d658:	1000d311 	.word	0x1000d311
1000d65c:	10014b06 	.word	0x10014b06

1000d660 <gapc_bond_cmd_handler>:
1000d660:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d662:	9300      	str	r3, [sp, #0]
1000d664:	2312      	movs	r3, #18
1000d666:	1c04      	adds	r4, r0, #0
1000d668:	a808      	add	r0, sp, #32
1000d66a:	7807      	ldrb	r7, [r0, #0]
1000d66c:	a809      	add	r0, sp, #36	; 0x24
1000d66e:	7806      	ldrb	r6, [r0, #0]
1000d670:	a80a      	add	r0, sp, #40	; 0x28
1000d672:	7805      	ldrb	r5, [r0, #0]
1000d674:	a80b      	add	r0, sp, #44	; 0x2c
1000d676:	7800      	ldrb	r0, [r0, #0]
1000d678:	9001      	str	r0, [sp, #4]
1000d67a:	4810      	ldr	r0, [pc, #64]	; (1000d6bc <gapc_bond_cmd_handler+0x5c>)
1000d67c:	7003      	strb	r3, [r0, #0]
1000d67e:	230e      	movs	r3, #14
1000d680:	70c4      	strb	r4, [r0, #3]
1000d682:	4c0f      	ldr	r4, [pc, #60]	; (1000d6c0 <gapc_bond_cmd_handler+0x60>)
1000d684:	7043      	strb	r3, [r0, #1]
1000d686:	7083      	strb	r3, [r0, #2]
1000d688:	8823      	ldrh	r3, [r4, #0]
1000d68a:	8824      	ldrh	r4, [r4, #0]
1000d68c:	7103      	strb	r3, [r0, #4]
1000d68e:	466b      	mov	r3, sp
1000d690:	781b      	ldrb	r3, [r3, #0]
1000d692:	0a24      	lsrs	r4, r4, #8
1000d694:	72c3      	strb	r3, [r0, #11]
1000d696:	466b      	mov	r3, sp
1000d698:	791b      	ldrb	r3, [r3, #4]
1000d69a:	7144      	strb	r4, [r0, #5]
1000d69c:	73c3      	strb	r3, [r0, #15]
1000d69e:	2308      	movs	r3, #8
1000d6a0:	7183      	strb	r3, [r0, #6]
1000d6a2:	2300      	movs	r3, #0
1000d6a4:	240a      	movs	r4, #10
1000d6a6:	7241      	strb	r1, [r0, #9]
1000d6a8:	71c3      	strb	r3, [r0, #7]
1000d6aa:	2110      	movs	r1, #16
1000d6ac:	4b05      	ldr	r3, [pc, #20]	; (1000d6c4 <gapc_bond_cmd_handler+0x64>)
1000d6ae:	7307      	strb	r7, [r0, #12]
1000d6b0:	7346      	strb	r6, [r0, #13]
1000d6b2:	7385      	strb	r5, [r0, #14]
1000d6b4:	7204      	strb	r4, [r0, #8]
1000d6b6:	7282      	strb	r2, [r0, #10]
1000d6b8:	4798      	blx	r3
1000d6ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d6bc:	10014e74 	.word	0x10014e74
1000d6c0:	10014b04 	.word	0x10014b04
1000d6c4:	1000d141 	.word	0x1000d141

1000d6c8 <gapc_bond_ind>:
1000d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d6ca:	780e      	ldrb	r6, [r1, #0]
1000d6cc:	1c03      	adds	r3, r0, #0
1000d6ce:	1eb0      	subs	r0, r6, #2
1000d6d0:	2805      	cmp	r0, #5
1000d6d2:	d85d      	bhi.n	1000d790 <gapc_bond_ind+0xc8>
1000d6d4:	1c15      	adds	r5, r2, #0
1000d6d6:	1c0c      	adds	r4, r1, #0
1000d6d8:	f001 f9f0 	bl	1000eabc <__gnu_thumb1_case_uqi>
1000d6dc:	2f5a030d 	.word	0x2f5a030d
1000d6e0:	4740      	.short	0x4740
1000d6e2:	2009      	movs	r0, #9
1000d6e4:	2a00      	cmp	r2, #0
1000d6e6:	d054      	beq.n	1000d792 <gapc_bond_ind+0xca>
1000d6e8:	0a1b      	lsrs	r3, r3, #8
1000d6ea:	8053      	strh	r3, [r2, #2]
1000d6ec:	788b      	ldrb	r3, [r1, #2]
1000d6ee:	4829      	ldr	r0, [pc, #164]	; (1000d794 <gapc_bond_ind+0xcc>)
1000d6f0:	7113      	strb	r3, [r2, #4]
1000d6f2:	2100      	movs	r1, #0
1000d6f4:	e01c      	b.n	1000d730 <gapc_bond_ind+0x68>
1000d6f6:	2009      	movs	r0, #9
1000d6f8:	2a00      	cmp	r2, #0
1000d6fa:	d04a      	beq.n	1000d792 <gapc_bond_ind+0xca>
1000d6fc:	4c25      	ldr	r4, [pc, #148]	; (1000d794 <gapc_bond_ind+0xcc>)
1000d6fe:	0a1b      	lsrs	r3, r3, #8
1000d700:	8053      	strh	r3, [r2, #2]
1000d702:	788b      	ldrb	r3, [r1, #2]
1000d704:	2700      	movs	r7, #0
1000d706:	1c10      	adds	r0, r2, #0
1000d708:	1c21      	adds	r1, r4, #0
1000d70a:	7013      	strb	r3, [r2, #0]
1000d70c:	4e22      	ldr	r6, [pc, #136]	; (1000d798 <gapc_bond_ind+0xd0>)
1000d70e:	7117      	strb	r7, [r2, #4]
1000d710:	312e      	adds	r1, #46	; 0x2e
1000d712:	2217      	movs	r2, #23
1000d714:	3032      	adds	r0, #50	; 0x32
1000d716:	47b0      	blx	r6
1000d718:	1c28      	adds	r0, r5, #0
1000d71a:	1c21      	adds	r1, r4, #0
1000d71c:	2210      	movs	r2, #16
1000d71e:	311e      	adds	r1, #30
1000d720:	3022      	adds	r0, #34	; 0x22
1000d722:	47b0      	blx	r6
1000d724:	1ca1      	adds	r1, r4, #2
1000d726:	1da8      	adds	r0, r5, #6
1000d728:	221c      	movs	r2, #28
1000d72a:	47b0      	blx	r6
1000d72c:	1c20      	adds	r0, r4, #0
1000d72e:	1c39      	adds	r1, r7, #0
1000d730:	2246      	movs	r2, #70	; 0x46
1000d732:	4b1a      	ldr	r3, [pc, #104]	; (1000d79c <gapc_bond_ind+0xd4>)
1000d734:	4798      	blx	r3
1000d736:	2009      	movs	r0, #9
1000d738:	e02b      	b.n	1000d792 <gapc_bond_ind+0xca>
1000d73a:	4d16      	ldr	r5, [pc, #88]	; (1000d794 <gapc_bond_ind+0xcc>)
1000d73c:	3102      	adds	r1, #2
1000d73e:	1c28      	adds	r0, r5, #0
1000d740:	2210      	movs	r2, #16
1000d742:	4e15      	ldr	r6, [pc, #84]	; (1000d798 <gapc_bond_ind+0xd0>)
1000d744:	302e      	adds	r0, #46	; 0x2e
1000d746:	47b0      	blx	r6
1000d748:	1c28      	adds	r0, r5, #0
1000d74a:	1c21      	adds	r1, r4, #0
1000d74c:	303f      	adds	r0, #63	; 0x3f
1000d74e:	3112      	adds	r1, #18
1000d750:	2206      	movs	r2, #6
1000d752:	47b0      	blx	r6
1000d754:	7e23      	ldrb	r3, [r4, #24]
1000d756:	353e      	adds	r5, #62	; 0x3e
1000d758:	702b      	strb	r3, [r5, #0]
1000d75a:	e019      	b.n	1000d790 <gapc_bond_ind+0xc8>
1000d75c:	480d      	ldr	r0, [pc, #52]	; (1000d794 <gapc_bond_ind+0xcc>)
1000d75e:	3102      	adds	r1, #2
1000d760:	2210      	movs	r2, #16
1000d762:	4b0d      	ldr	r3, [pc, #52]	; (1000d798 <gapc_bond_ind+0xd0>)
1000d764:	301e      	adds	r0, #30
1000d766:	4798      	blx	r3
1000d768:	e012      	b.n	1000d790 <gapc_bond_ind+0xc8>
1000d76a:	4d0a      	ldr	r5, [pc, #40]	; (1000d794 <gapc_bond_ind+0xcc>)
1000d76c:	3102      	adds	r1, #2
1000d76e:	2210      	movs	r2, #16
1000d770:	4e09      	ldr	r6, [pc, #36]	; (1000d798 <gapc_bond_ind+0xd0>)
1000d772:	1ca8      	adds	r0, r5, #2
1000d774:	47b0      	blx	r6
1000d776:	1c28      	adds	r0, r5, #0
1000d778:	1c21      	adds	r1, r4, #0
1000d77a:	7ce3      	ldrb	r3, [r4, #19]
1000d77c:	7ca2      	ldrb	r2, [r4, #18]
1000d77e:	021b      	lsls	r3, r3, #8
1000d780:	4313      	orrs	r3, r2
1000d782:	3014      	adds	r0, #20
1000d784:	3114      	adds	r1, #20
1000d786:	2208      	movs	r2, #8
1000d788:	826b      	strh	r3, [r5, #18]
1000d78a:	47b0      	blx	r6
1000d78c:	7f23      	ldrb	r3, [r4, #28]
1000d78e:	772b      	strb	r3, [r5, #28]
1000d790:	2000      	movs	r0, #0
1000d792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d794:	10013e58 	.word	0x10013e58
1000d798:	10010357 	.word	0x10010357
1000d79c:	10010369 	.word	0x10010369

1000d7a0 <gapc_bond_req_ind>:
1000d7a0:	b570      	push	{r4, r5, r6, lr}
1000d7a2:	780c      	ldrb	r4, [r1, #0]
1000d7a4:	1c03      	adds	r3, r0, #0
1000d7a6:	7849      	ldrb	r1, [r1, #1]
1000d7a8:	2c07      	cmp	r4, #7
1000d7aa:	d85c      	bhi.n	1000d866 <gapc_bond_req_ind+0xc6>
1000d7ac:	1c20      	adds	r0, r4, #0
1000d7ae:	f001 f985 	bl	1000eabc <__gnu_thumb1_case_uqi>
1000d7b2:	5a04      	.short	0x5a04
1000d7b4:	5a0b5a5a 	.word	0x5a0b5a5a
1000d7b8:	1f1f      	.short	0x1f1f
1000d7ba:	200a      	movs	r0, #10
1000d7bc:	2a00      	cmp	r2, #0
1000d7be:	d053      	beq.n	1000d868 <gapc_bond_req_ind+0xc8>
1000d7c0:	0a1b      	lsrs	r3, r3, #8
1000d7c2:	8013      	strh	r3, [r2, #0]
1000d7c4:	7091      	strb	r1, [r2, #2]
1000d7c6:	e04f      	b.n	1000d868 <gapc_bond_req_ind+0xc8>
1000d7c8:	2a00      	cmp	r2, #0
1000d7ca:	d00b      	beq.n	1000d7e4 <gapc_bond_req_ind+0x44>
1000d7cc:	0a1b      	lsrs	r3, r3, #8
1000d7ce:	8013      	strh	r3, [r2, #0]
1000d7d0:	2900      	cmp	r1, #0
1000d7d2:	d102      	bne.n	1000d7da <gapc_bond_req_ind+0x3a>
1000d7d4:	2301      	movs	r3, #1
1000d7d6:	7093      	strb	r3, [r2, #2]
1000d7d8:	e004      	b.n	1000d7e4 <gapc_bond_req_ind+0x44>
1000d7da:	2300      	movs	r3, #0
1000d7dc:	7093      	strb	r3, [r2, #2]
1000d7de:	2902      	cmp	r1, #2
1000d7e0:	d102      	bne.n	1000d7e8 <gapc_bond_req_ind+0x48>
1000d7e2:	70d3      	strb	r3, [r2, #3]
1000d7e4:	200c      	movs	r0, #12
1000d7e6:	e03f      	b.n	1000d868 <gapc_bond_req_ind+0xc8>
1000d7e8:	2901      	cmp	r1, #1
1000d7ea:	d1fb      	bne.n	1000d7e4 <gapc_bond_req_ind+0x44>
1000d7ec:	70d1      	strb	r1, [r2, #3]
1000d7ee:	e7f9      	b.n	1000d7e4 <gapc_bond_req_ind+0x44>
1000d7f0:	2214      	movs	r2, #20
1000d7f2:	481e      	ldr	r0, [pc, #120]	; (1000d86c <gapc_bond_req_ind+0xcc>)
1000d7f4:	0a1b      	lsrs	r3, r3, #8
1000d7f6:	70c3      	strb	r3, [r0, #3]
1000d7f8:	4b1d      	ldr	r3, [pc, #116]	; (1000d870 <gapc_bond_req_ind+0xd0>)
1000d7fa:	7002      	strb	r2, [r0, #0]
1000d7fc:	3a06      	subs	r2, #6
1000d7fe:	7042      	strb	r2, [r0, #1]
1000d800:	7082      	strb	r2, [r0, #2]
1000d802:	881a      	ldrh	r2, [r3, #0]
1000d804:	881b      	ldrh	r3, [r3, #0]
1000d806:	4e1b      	ldr	r6, [pc, #108]	; (1000d874 <gapc_bond_req_ind+0xd4>)
1000d808:	0a1b      	lsrs	r3, r3, #8
1000d80a:	7143      	strb	r3, [r0, #5]
1000d80c:	2301      	movs	r3, #1
1000d80e:	7102      	strb	r2, [r0, #4]
1000d810:	7204      	strb	r4, [r0, #8]
1000d812:	7243      	strb	r3, [r0, #9]
1000d814:	1c05      	adds	r5, r0, #0
1000d816:	1c31      	adds	r1, r6, #0
1000d818:	300a      	adds	r0, #10
1000d81a:	2c07      	cmp	r4, #7
1000d81c:	d116      	bne.n	1000d84c <gapc_bond_req_ind+0xac>
1000d81e:	317e      	adds	r1, #126	; 0x7e
1000d820:	2210      	movs	r2, #16
1000d822:	4c15      	ldr	r4, [pc, #84]	; (1000d878 <gapc_bond_req_ind+0xd8>)
1000d824:	47a0      	blx	r4
1000d826:	1c33      	adds	r3, r6, #0
1000d828:	1c31      	adds	r1, r6, #0
1000d82a:	1c28      	adds	r0, r5, #0
1000d82c:	338e      	adds	r3, #142	; 0x8e
1000d82e:	881b      	ldrh	r3, [r3, #0]
1000d830:	3190      	adds	r1, #144	; 0x90
1000d832:	76ab      	strb	r3, [r5, #26]
1000d834:	2208      	movs	r2, #8
1000d836:	0a1b      	lsrs	r3, r3, #8
1000d838:	301c      	adds	r0, #28
1000d83a:	76eb      	strb	r3, [r5, #27]
1000d83c:	47a0      	blx	r4
1000d83e:	1c31      	adds	r1, r6, #0
1000d840:	3198      	adds	r1, #152	; 0x98
1000d842:	780a      	ldrb	r2, [r1, #0]
1000d844:	1d6b      	adds	r3, r5, #5
1000d846:	77da      	strb	r2, [r3, #31]
1000d848:	2125      	movs	r1, #37	; 0x25
1000d84a:	e004      	b.n	1000d856 <gapc_bond_req_ind+0xb6>
1000d84c:	319a      	adds	r1, #154	; 0x9a
1000d84e:	2210      	movs	r2, #16
1000d850:	4b09      	ldr	r3, [pc, #36]	; (1000d878 <gapc_bond_req_ind+0xd8>)
1000d852:	4798      	blx	r3
1000d854:	211a      	movs	r1, #26
1000d856:	1c0b      	adds	r3, r1, #0
1000d858:	2400      	movs	r4, #0
1000d85a:	3b08      	subs	r3, #8
1000d85c:	71ab      	strb	r3, [r5, #6]
1000d85e:	1c28      	adds	r0, r5, #0
1000d860:	4b06      	ldr	r3, [pc, #24]	; (1000d87c <gapc_bond_req_ind+0xdc>)
1000d862:	71ec      	strb	r4, [r5, #7]
1000d864:	4798      	blx	r3
1000d866:	2000      	movs	r0, #0
1000d868:	bd70      	pop	{r4, r5, r6, pc}
1000d86a:	46c0      	nop			; (mov r8, r8)
1000d86c:	10014e74 	.word	0x10014e74
1000d870:	10014b04 	.word	0x10014b04
1000d874:	10014b96 	.word	0x10014b96
1000d878:	10010357 	.word	0x10010357
1000d87c:	1000d141 	.word	0x1000d141

1000d880 <gapc_bond_cfm_handler_pair_resp>:
1000d880:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d882:	b085      	sub	sp, #20
1000d884:	1c07      	adds	r7, r0, #0
1000d886:	a80a      	add	r0, sp, #40	; 0x28
1000d888:	7806      	ldrb	r6, [r0, #0]
1000d88a:	a80b      	add	r0, sp, #44	; 0x2c
1000d88c:	7805      	ldrb	r5, [r0, #0]
1000d88e:	a80c      	add	r0, sp, #48	; 0x30
1000d890:	7800      	ldrb	r0, [r0, #0]
1000d892:	2414      	movs	r4, #20
1000d894:	9002      	str	r0, [sp, #8]
1000d896:	a80d      	add	r0, sp, #52	; 0x34
1000d898:	7800      	ldrb	r0, [r0, #0]
1000d89a:	9301      	str	r3, [sp, #4]
1000d89c:	9003      	str	r0, [sp, #12]
1000d89e:	a80e      	add	r0, sp, #56	; 0x38
1000d8a0:	8800      	ldrh	r0, [r0, #0]
1000d8a2:	4684      	mov	ip, r0
1000d8a4:	4812      	ldr	r0, [pc, #72]	; (1000d8f0 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000d8a6:	7004      	strb	r4, [r0, #0]
1000d8a8:	3c06      	subs	r4, #6
1000d8aa:	7044      	strb	r4, [r0, #1]
1000d8ac:	7084      	strb	r4, [r0, #2]
1000d8ae:	4664      	mov	r4, ip
1000d8b0:	70c4      	strb	r4, [r0, #3]
1000d8b2:	4c10      	ldr	r4, [pc, #64]	; (1000d8f4 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000d8b4:	7247      	strb	r7, [r0, #9]
1000d8b6:	8823      	ldrh	r3, [r4, #0]
1000d8b8:	8824      	ldrh	r4, [r4, #0]
1000d8ba:	7103      	strb	r3, [r0, #4]
1000d8bc:	466b      	mov	r3, sp
1000d8be:	791b      	ldrb	r3, [r3, #4]
1000d8c0:	0a24      	lsrs	r4, r4, #8
1000d8c2:	7303      	strb	r3, [r0, #12]
1000d8c4:	466b      	mov	r3, sp
1000d8c6:	7a1b      	ldrb	r3, [r3, #8]
1000d8c8:	7144      	strb	r4, [r0, #5]
1000d8ca:	73c3      	strb	r3, [r0, #15]
1000d8cc:	466b      	mov	r3, sp
1000d8ce:	7b1b      	ldrb	r3, [r3, #12]
1000d8d0:	2401      	movs	r4, #1
1000d8d2:	7403      	strb	r3, [r0, #16]
1000d8d4:	2309      	movs	r3, #9
1000d8d6:	7183      	strb	r3, [r0, #6]
1000d8d8:	2300      	movs	r3, #0
1000d8da:	7204      	strb	r4, [r0, #8]
1000d8dc:	7281      	strb	r1, [r0, #10]
1000d8de:	72c2      	strb	r2, [r0, #11]
1000d8e0:	7346      	strb	r6, [r0, #13]
1000d8e2:	7385      	strb	r5, [r0, #14]
1000d8e4:	71c3      	strb	r3, [r0, #7]
1000d8e6:	2111      	movs	r1, #17
1000d8e8:	4b03      	ldr	r3, [pc, #12]	; (1000d8f8 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000d8ea:	4798      	blx	r3
1000d8ec:	b005      	add	sp, #20
1000d8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8f0:	10014e74 	.word	0x10014e74
1000d8f4:	10014b04 	.word	0x10014b04
1000d8f8:	1000d141 	.word	0x1000d141

1000d8fc <gapc_bond_cfm_handler_key_exch>:
1000d8fc:	b538      	push	{r3, r4, r5, lr}
1000d8fe:	2514      	movs	r5, #20
1000d900:	4c0d      	ldr	r4, [pc, #52]	; (1000d938 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000d902:	70e3      	strb	r3, [r4, #3]
1000d904:	4b0d      	ldr	r3, [pc, #52]	; (1000d93c <gapc_bond_cfm_handler_key_exch+0x40>)
1000d906:	7025      	strb	r5, [r4, #0]
1000d908:	3d06      	subs	r5, #6
1000d90a:	7065      	strb	r5, [r4, #1]
1000d90c:	70a5      	strb	r5, [r4, #2]
1000d90e:	881d      	ldrh	r5, [r3, #0]
1000d910:	881b      	ldrh	r3, [r3, #0]
1000d912:	7220      	strb	r0, [r4, #8]
1000d914:	0a1b      	lsrs	r3, r3, #8
1000d916:	7163      	strb	r3, [r4, #5]
1000d918:	7261      	strb	r1, [r4, #9]
1000d91a:	4b09      	ldr	r3, [pc, #36]	; (1000d940 <gapc_bond_cfm_handler_key_exch+0x44>)
1000d91c:	1c11      	adds	r1, r2, #0
1000d91e:	4809      	ldr	r0, [pc, #36]	; (1000d944 <gapc_bond_cfm_handler_key_exch+0x48>)
1000d920:	2210      	movs	r2, #16
1000d922:	7125      	strb	r5, [r4, #4]
1000d924:	4798      	blx	r3
1000d926:	2312      	movs	r3, #18
1000d928:	71a3      	strb	r3, [r4, #6]
1000d92a:	2300      	movs	r3, #0
1000d92c:	1c20      	adds	r0, r4, #0
1000d92e:	71e3      	strb	r3, [r4, #7]
1000d930:	211a      	movs	r1, #26
1000d932:	4b05      	ldr	r3, [pc, #20]	; (1000d948 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000d934:	4798      	blx	r3
1000d936:	bd38      	pop	{r3, r4, r5, pc}
1000d938:	10014e74 	.word	0x10014e74
1000d93c:	10014b04 	.word	0x10014b04
1000d940:	10010357 	.word	0x10010357
1000d944:	10014e7e 	.word	0x10014e7e
1000d948:	1000d141 	.word	0x1000d141

1000d94c <gapc_security_cmd_handler>:
1000d94c:	221a      	movs	r2, #26
1000d94e:	b508      	push	{r3, lr}
1000d950:	4b0b      	ldr	r3, [pc, #44]	; (1000d980 <gapc_security_cmd_handler+0x34>)
1000d952:	701a      	strb	r2, [r3, #0]
1000d954:	3a0c      	subs	r2, #12
1000d956:	705a      	strb	r2, [r3, #1]
1000d958:	709a      	strb	r2, [r3, #2]
1000d95a:	4a0a      	ldr	r2, [pc, #40]	; (1000d984 <gapc_security_cmd_handler+0x38>)
1000d95c:	70d8      	strb	r0, [r3, #3]
1000d95e:	8810      	ldrh	r0, [r2, #0]
1000d960:	8812      	ldrh	r2, [r2, #0]
1000d962:	7118      	strb	r0, [r3, #4]
1000d964:	0a12      	lsrs	r2, r2, #8
1000d966:	715a      	strb	r2, [r3, #5]
1000d968:	220c      	movs	r2, #12
1000d96a:	721a      	strb	r2, [r3, #8]
1000d96c:	3a0a      	subs	r2, #10
1000d96e:	719a      	strb	r2, [r3, #6]
1000d970:	2200      	movs	r2, #0
1000d972:	7259      	strb	r1, [r3, #9]
1000d974:	71da      	strb	r2, [r3, #7]
1000d976:	1c18      	adds	r0, r3, #0
1000d978:	210a      	movs	r1, #10
1000d97a:	4b03      	ldr	r3, [pc, #12]	; (1000d988 <gapc_security_cmd_handler+0x3c>)
1000d97c:	4798      	blx	r3
1000d97e:	bd08      	pop	{r3, pc}
1000d980:	10014e74 	.word	0x10014e74
1000d984:	10014b04 	.word	0x10014b04
1000d988:	1000d141 	.word	0x1000d141

1000d98c <gapc_encrypt_cmd_handler>:
1000d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d98e:	2500      	movs	r5, #0
1000d990:	b089      	sub	sp, #36	; 0x24
1000d992:	9306      	str	r3, [sp, #24]
1000d994:	ab0e      	add	r3, sp, #56	; 0x38
1000d996:	781b      	ldrb	r3, [r3, #0]
1000d998:	1c17      	adds	r7, r2, #0
1000d99a:	9307      	str	r3, [sp, #28]
1000d99c:	ab0f      	add	r3, sp, #60	; 0x3c
1000d99e:	781b      	ldrb	r3, [r3, #0]
1000d9a0:	4a19      	ldr	r2, [pc, #100]	; (1000da08 <gapc_encrypt_cmd_handler+0x7c>)
1000d9a2:	1c06      	adds	r6, r0, #0
1000d9a4:	9105      	str	r1, [sp, #20]
1000d9a6:	9300      	str	r3, [sp, #0]
1000d9a8:	9002      	str	r0, [sp, #8]
1000d9aa:	1c29      	adds	r1, r5, #0
1000d9ac:	1c2b      	adds	r3, r5, #0
1000d9ae:	9501      	str	r5, [sp, #4]
1000d9b0:	1c10      	adds	r0, r2, #0
1000d9b2:	4c16      	ldr	r4, [pc, #88]	; (1000da0c <gapc_encrypt_cmd_handler+0x80>)
1000d9b4:	47a0      	blx	r4
1000d9b6:	2316      	movs	r3, #22
1000d9b8:	4c15      	ldr	r4, [pc, #84]	; (1000da10 <gapc_encrypt_cmd_handler+0x84>)
1000d9ba:	9905      	ldr	r1, [sp, #20]
1000d9bc:	7023      	strb	r3, [r4, #0]
1000d9be:	3b08      	subs	r3, #8
1000d9c0:	7063      	strb	r3, [r4, #1]
1000d9c2:	70a3      	strb	r3, [r4, #2]
1000d9c4:	4b13      	ldr	r3, [pc, #76]	; (1000da14 <gapc_encrypt_cmd_handler+0x88>)
1000d9c6:	70e6      	strb	r6, [r4, #3]
1000d9c8:	881a      	ldrh	r2, [r3, #0]
1000d9ca:	881b      	ldrh	r3, [r3, #0]
1000d9cc:	7122      	strb	r2, [r4, #4]
1000d9ce:	0a1b      	lsrs	r3, r3, #8
1000d9d0:	7163      	strb	r3, [r4, #5]
1000d9d2:	230b      	movs	r3, #11
1000d9d4:	4e10      	ldr	r6, [pc, #64]	; (1000da18 <gapc_encrypt_cmd_handler+0x8c>)
1000d9d6:	2210      	movs	r2, #16
1000d9d8:	4810      	ldr	r0, [pc, #64]	; (1000da1c <gapc_encrypt_cmd_handler+0x90>)
1000d9da:	7223      	strb	r3, [r4, #8]
1000d9dc:	7265      	strb	r5, [r4, #9]
1000d9de:	47b0      	blx	r6
1000d9e0:	0a3b      	lsrs	r3, r7, #8
1000d9e2:	9906      	ldr	r1, [sp, #24]
1000d9e4:	2208      	movs	r2, #8
1000d9e6:	480e      	ldr	r0, [pc, #56]	; (1000da20 <gapc_encrypt_cmd_handler+0x94>)
1000d9e8:	76e3      	strb	r3, [r4, #27]
1000d9ea:	76a7      	strb	r7, [r4, #26]
1000d9ec:	47b0      	blx	r6
1000d9ee:	466a      	mov	r2, sp
1000d9f0:	7f12      	ldrb	r2, [r2, #28]
1000d9f2:	1d63      	adds	r3, r4, #5
1000d9f4:	77da      	strb	r2, [r3, #31]
1000d9f6:	231d      	movs	r3, #29
1000d9f8:	1c20      	adds	r0, r4, #0
1000d9fa:	71a3      	strb	r3, [r4, #6]
1000d9fc:	2125      	movs	r1, #37	; 0x25
1000d9fe:	4b09      	ldr	r3, [pc, #36]	; (1000da24 <gapc_encrypt_cmd_handler+0x98>)
1000da00:	71e5      	strb	r5, [r4, #7]
1000da02:	4798      	blx	r3
1000da04:	b009      	add	sp, #36	; 0x24
1000da06:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da08:	10013e38 	.word	0x10013e38
1000da0c:	1000d445 	.word	0x1000d445
1000da10:	10014e74 	.word	0x10014e74
1000da14:	10014b04 	.word	0x10014b04
1000da18:	10010357 	.word	0x10010357
1000da1c:	10014e7e 	.word	0x10014e7e
1000da20:	10014e90 	.word	0x10014e90
1000da24:	1000d141 	.word	0x1000d141

1000da28 <gapc_encrypt_req_ind>:
1000da28:	b508      	push	{r3, lr}
1000da2a:	0a00      	lsrs	r0, r0, #8
1000da2c:	8010      	strh	r0, [r2, #0]
1000da2e:	784b      	ldrb	r3, [r1, #1]
1000da30:	7808      	ldrb	r0, [r1, #0]
1000da32:	021b      	lsls	r3, r3, #8
1000da34:	4303      	orrs	r3, r0
1000da36:	8053      	strh	r3, [r2, #2]
1000da38:	1d10      	adds	r0, r2, #4
1000da3a:	3102      	adds	r1, #2
1000da3c:	2208      	movs	r2, #8
1000da3e:	4b01      	ldr	r3, [pc, #4]	; (1000da44 <gapc_encrypt_req_ind+0x1c>)
1000da40:	4798      	blx	r3
1000da42:	bd08      	pop	{r3, pc}
1000da44:	10010357 	.word	0x10010357

1000da48 <gapc_encrypt_cfm_handler>:
1000da48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000da4a:	2500      	movs	r5, #0
1000da4c:	b087      	sub	sp, #28
1000da4e:	9304      	str	r3, [sp, #16]
1000da50:	ab0c      	add	r3, sp, #48	; 0x30
1000da52:	781b      	ldrb	r3, [r3, #0]
1000da54:	1c17      	adds	r7, r2, #0
1000da56:	4a15      	ldr	r2, [pc, #84]	; (1000daac <gapc_encrypt_cfm_handler+0x64>)
1000da58:	1c06      	adds	r6, r0, #0
1000da5a:	9305      	str	r3, [sp, #20]
1000da5c:	9100      	str	r1, [sp, #0]
1000da5e:	9002      	str	r0, [sp, #8]
1000da60:	1c29      	adds	r1, r5, #0
1000da62:	1c2b      	adds	r3, r5, #0
1000da64:	9501      	str	r5, [sp, #4]
1000da66:	1c10      	adds	r0, r2, #0
1000da68:	4c11      	ldr	r4, [pc, #68]	; (1000dab0 <gapc_encrypt_cfm_handler+0x68>)
1000da6a:	47a0      	blx	r4
1000da6c:	2318      	movs	r3, #24
1000da6e:	4c11      	ldr	r4, [pc, #68]	; (1000dab4 <gapc_encrypt_cfm_handler+0x6c>)
1000da70:	9904      	ldr	r1, [sp, #16]
1000da72:	7023      	strb	r3, [r4, #0]
1000da74:	3b0a      	subs	r3, #10
1000da76:	7063      	strb	r3, [r4, #1]
1000da78:	70a3      	strb	r3, [r4, #2]
1000da7a:	4b0f      	ldr	r3, [pc, #60]	; (1000dab8 <gapc_encrypt_cfm_handler+0x70>)
1000da7c:	480f      	ldr	r0, [pc, #60]	; (1000dabc <gapc_encrypt_cfm_handler+0x74>)
1000da7e:	881a      	ldrh	r2, [r3, #0]
1000da80:	881b      	ldrh	r3, [r3, #0]
1000da82:	7122      	strb	r2, [r4, #4]
1000da84:	0a1b      	lsrs	r3, r3, #8
1000da86:	7163      	strb	r3, [r4, #5]
1000da88:	2210      	movs	r2, #16
1000da8a:	4b0d      	ldr	r3, [pc, #52]	; (1000dac0 <gapc_encrypt_cfm_handler+0x78>)
1000da8c:	70e6      	strb	r6, [r4, #3]
1000da8e:	7227      	strb	r7, [r4, #8]
1000da90:	4798      	blx	r3
1000da92:	466b      	mov	r3, sp
1000da94:	7d1b      	ldrb	r3, [r3, #20]
1000da96:	1c20      	adds	r0, r4, #0
1000da98:	7663      	strb	r3, [r4, #25]
1000da9a:	2312      	movs	r3, #18
1000da9c:	211a      	movs	r1, #26
1000da9e:	71a3      	strb	r3, [r4, #6]
1000daa0:	4b08      	ldr	r3, [pc, #32]	; (1000dac4 <gapc_encrypt_cfm_handler+0x7c>)
1000daa2:	71e5      	strb	r5, [r4, #7]
1000daa4:	4798      	blx	r3
1000daa6:	b007      	add	sp, #28
1000daa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000daaa:	46c0      	nop			; (mov r8, r8)
1000daac:	10013e48 	.word	0x10013e48
1000dab0:	1000d445 	.word	0x1000d445
1000dab4:	10014e74 	.word	0x10014e74
1000dab8:	10014b04 	.word	0x10014b04
1000dabc:	10014e7d 	.word	0x10014e7d
1000dac0:	10010357 	.word	0x10010357
1000dac4:	1000d141 	.word	0x1000d141

1000dac8 <gapc_encrypt_ind>:
1000dac8:	780b      	ldrb	r3, [r1, #0]
1000daca:	0a00      	lsrs	r0, r0, #8
1000dacc:	70d3      	strb	r3, [r2, #3]
1000dace:	2300      	movs	r3, #0
1000dad0:	8010      	strh	r0, [r2, #0]
1000dad2:	7093      	strb	r3, [r2, #2]
1000dad4:	4770      	bx	lr
	...

1000dad8 <gapc_param_update_cfm_handler>:
1000dad8:	b538      	push	{r3, r4, r5, lr}
1000dada:	2410      	movs	r4, #16
1000dadc:	1c05      	adds	r5, r0, #0
1000dade:	480e      	ldr	r0, [pc, #56]	; (1000db18 <gapc_param_update_cfm_handler+0x40>)
1000dae0:	7004      	strb	r4, [r0, #0]
1000dae2:	3c02      	subs	r4, #2
1000dae4:	7044      	strb	r4, [r0, #1]
1000dae6:	7084      	strb	r4, [r0, #2]
1000dae8:	4c0c      	ldr	r4, [pc, #48]	; (1000db1c <gapc_param_update_cfm_handler+0x44>)
1000daea:	70c5      	strb	r5, [r0, #3]
1000daec:	8825      	ldrh	r5, [r4, #0]
1000daee:	8824      	ldrh	r4, [r4, #0]
1000daf0:	72c3      	strb	r3, [r0, #11]
1000daf2:	0a1b      	lsrs	r3, r3, #8
1000daf4:	0a24      	lsrs	r4, r4, #8
1000daf6:	7303      	strb	r3, [r0, #12]
1000daf8:	2305      	movs	r3, #5
1000dafa:	7144      	strb	r4, [r0, #5]
1000dafc:	2400      	movs	r4, #0
1000dafe:	7201      	strb	r1, [r0, #8]
1000db00:	7242      	strb	r2, [r0, #9]
1000db02:	7183      	strb	r3, [r0, #6]
1000db04:	0a12      	lsrs	r2, r2, #8
1000db06:	210d      	movs	r1, #13
1000db08:	4b05      	ldr	r3, [pc, #20]	; (1000db20 <gapc_param_update_cfm_handler+0x48>)
1000db0a:	7105      	strb	r5, [r0, #4]
1000db0c:	7282      	strb	r2, [r0, #10]
1000db0e:	71c4      	strb	r4, [r0, #7]
1000db10:	4798      	blx	r3
1000db12:	1c20      	adds	r0, r4, #0
1000db14:	bd38      	pop	{r3, r4, r5, pc}
1000db16:	46c0      	nop			; (mov r8, r8)
1000db18:	10014e74 	.word	0x10014e74
1000db1c:	10014b04 	.word	0x10014b04
1000db20:	1000d141 	.word	0x1000d141

1000db24 <gapc_param_updated_ind>:
1000db24:	2300      	movs	r3, #0
1000db26:	0a00      	lsrs	r0, r0, #8
1000db28:	8010      	strh	r0, [r2, #0]
1000db2a:	7093      	strb	r3, [r2, #2]
1000db2c:	784b      	ldrb	r3, [r1, #1]
1000db2e:	7808      	ldrb	r0, [r1, #0]
1000db30:	021b      	lsls	r3, r3, #8
1000db32:	4303      	orrs	r3, r0
1000db34:	8093      	strh	r3, [r2, #4]
1000db36:	78cb      	ldrb	r3, [r1, #3]
1000db38:	7888      	ldrb	r0, [r1, #2]
1000db3a:	021b      	lsls	r3, r3, #8
1000db3c:	4303      	orrs	r3, r0
1000db3e:	80d3      	strh	r3, [r2, #6]
1000db40:	794b      	ldrb	r3, [r1, #5]
1000db42:	7909      	ldrb	r1, [r1, #4]
1000db44:	021b      	lsls	r3, r3, #8
1000db46:	430b      	orrs	r3, r1
1000db48:	2007      	movs	r0, #7
1000db4a:	8113      	strh	r3, [r2, #8]
1000db4c:	4770      	bx	lr

1000db4e <gapc_param_updated_req_ind>:
1000db4e:	0a00      	lsrs	r0, r0, #8
1000db50:	8010      	strh	r0, [r2, #0]
1000db52:	784b      	ldrb	r3, [r1, #1]
1000db54:	7808      	ldrb	r0, [r1, #0]
1000db56:	021b      	lsls	r3, r3, #8
1000db58:	4303      	orrs	r3, r0
1000db5a:	8053      	strh	r3, [r2, #2]
1000db5c:	78cb      	ldrb	r3, [r1, #3]
1000db5e:	7888      	ldrb	r0, [r1, #2]
1000db60:	021b      	lsls	r3, r3, #8
1000db62:	4303      	orrs	r3, r0
1000db64:	8093      	strh	r3, [r2, #4]
1000db66:	794b      	ldrb	r3, [r1, #5]
1000db68:	7908      	ldrb	r0, [r1, #4]
1000db6a:	021b      	lsls	r3, r3, #8
1000db6c:	4303      	orrs	r3, r0
1000db6e:	80d3      	strh	r3, [r2, #6]
1000db70:	79cb      	ldrb	r3, [r1, #7]
1000db72:	7989      	ldrb	r1, [r1, #6]
1000db74:	021b      	lsls	r3, r3, #8
1000db76:	430b      	orrs	r3, r1
1000db78:	2008      	movs	r0, #8
1000db7a:	8113      	strh	r3, [r2, #8]
1000db7c:	4770      	bx	lr
	...

1000db80 <gapc_dev_info_req_ind_handler>:
1000db80:	b508      	push	{r3, lr}
1000db82:	1c0b      	adds	r3, r1, #0
1000db84:	0a01      	lsrs	r1, r0, #8
1000db86:	8011      	strh	r1, [r2, #0]
1000db88:	7818      	ldrb	r0, [r3, #0]
1000db8a:	7090      	strb	r0, [r2, #2]
1000db8c:	2800      	cmp	r0, #0
1000db8e:	d104      	bne.n	1000db9a <gapc_dev_info_req_ind_handler+0x1a>
1000db90:	4b03      	ldr	r3, [pc, #12]	; (1000dba0 <gapc_dev_info_req_ind_handler+0x20>)
1000db92:	33aa      	adds	r3, #170	; 0xaa
1000db94:	881b      	ldrh	r3, [r3, #0]
1000db96:	2b00      	cmp	r3, #0
1000db98:	d001      	beq.n	1000db9e <gapc_dev_info_req_ind_handler+0x1e>
1000db9a:	4b02      	ldr	r3, [pc, #8]	; (1000dba4 <gapc_dev_info_req_ind_handler+0x24>)
1000db9c:	4798      	blx	r3
1000db9e:	bd08      	pop	{r3, pc}
1000dba0:	10014b96 	.word	0x10014b96
1000dba4:	1000d251 	.word	0x1000d251

1000dba8 <gapc_sec_req_ind>:
1000dba8:	0a00      	lsrs	r0, r0, #8
1000dbaa:	8010      	strh	r0, [r2, #0]
1000dbac:	7809      	ldrb	r1, [r1, #0]
1000dbae:	2301      	movs	r3, #1
1000dbb0:	1c08      	adds	r0, r1, #0
1000dbb2:	0889      	lsrs	r1, r1, #2
1000dbb4:	4018      	ands	r0, r3
1000dbb6:	400b      	ands	r3, r1
1000dbb8:	70d0      	strb	r0, [r2, #3]
1000dbba:	7113      	strb	r3, [r2, #4]
1000dbbc:	4770      	bx	lr

1000dbbe <gapc_sign_counter_ind_handler>:
1000dbbe:	0a00      	lsrs	r0, r0, #8
1000dbc0:	8010      	strh	r0, [r2, #0]
1000dbc2:	784b      	ldrb	r3, [r1, #1]
1000dbc4:	0218      	lsls	r0, r3, #8
1000dbc6:	788b      	ldrb	r3, [r1, #2]
1000dbc8:	041b      	lsls	r3, r3, #16
1000dbca:	4303      	orrs	r3, r0
1000dbcc:	7808      	ldrb	r0, [r1, #0]
1000dbce:	4303      	orrs	r3, r0
1000dbd0:	78c8      	ldrb	r0, [r1, #3]
1000dbd2:	0600      	lsls	r0, r0, #24
1000dbd4:	4303      	orrs	r3, r0
1000dbd6:	6053      	str	r3, [r2, #4]
1000dbd8:	794b      	ldrb	r3, [r1, #5]
1000dbda:	0218      	lsls	r0, r3, #8
1000dbdc:	798b      	ldrb	r3, [r1, #6]
1000dbde:	041b      	lsls	r3, r3, #16
1000dbe0:	4303      	orrs	r3, r0
1000dbe2:	7908      	ldrb	r0, [r1, #4]
1000dbe4:	79c9      	ldrb	r1, [r1, #7]
1000dbe6:	4303      	orrs	r3, r0
1000dbe8:	0609      	lsls	r1, r1, #24
1000dbea:	430b      	orrs	r3, r1
1000dbec:	2000      	movs	r0, #0
1000dbee:	6093      	str	r3, [r2, #8]
1000dbf0:	4770      	bx	lr
	...

1000dbf4 <gapc_peer_att_info_ind_handler>:
1000dbf4:	b510      	push	{r4, lr}
1000dbf6:	0a00      	lsrs	r0, r0, #8
1000dbf8:	8010      	strh	r0, [r2, #0]
1000dbfa:	7808      	ldrb	r0, [r1, #0]
1000dbfc:	7090      	strb	r0, [r2, #2]
1000dbfe:	788b      	ldrb	r3, [r1, #2]
1000dc00:	784c      	ldrb	r4, [r1, #1]
1000dc02:	021b      	lsls	r3, r3, #8
1000dc04:	4323      	orrs	r3, r4
1000dc06:	8093      	strh	r3, [r2, #4]
1000dc08:	2801      	cmp	r0, #1
1000dc0a:	d027      	beq.n	1000dc5c <gapc_peer_att_info_ind_handler+0x68>
1000dc0c:	2800      	cmp	r0, #0
1000dc0e:	d017      	beq.n	1000dc40 <gapc_peer_att_info_ind_handler+0x4c>
1000dc10:	2802      	cmp	r0, #2
1000dc12:	d12a      	bne.n	1000dc6a <gapc_peer_att_info_ind_handler+0x76>
1000dc14:	790b      	ldrb	r3, [r1, #4]
1000dc16:	78c8      	ldrb	r0, [r1, #3]
1000dc18:	021b      	lsls	r3, r3, #8
1000dc1a:	4303      	orrs	r3, r0
1000dc1c:	8113      	strh	r3, [r2, #8]
1000dc1e:	798b      	ldrb	r3, [r1, #6]
1000dc20:	7948      	ldrb	r0, [r1, #5]
1000dc22:	021b      	lsls	r3, r3, #8
1000dc24:	4303      	orrs	r3, r0
1000dc26:	80d3      	strh	r3, [r2, #6]
1000dc28:	7a0b      	ldrb	r3, [r1, #8]
1000dc2a:	79c8      	ldrb	r0, [r1, #7]
1000dc2c:	021b      	lsls	r3, r3, #8
1000dc2e:	4303      	orrs	r3, r0
1000dc30:	8193      	strh	r3, [r2, #12]
1000dc32:	7a8b      	ldrb	r3, [r1, #10]
1000dc34:	7a49      	ldrb	r1, [r1, #9]
1000dc36:	021b      	lsls	r3, r3, #8
1000dc38:	430b      	orrs	r3, r1
1000dc3a:	8153      	strh	r3, [r2, #10]
1000dc3c:	2306      	movs	r3, #6
1000dc3e:	e013      	b.n	1000dc68 <gapc_peer_att_info_ind_handler+0x74>
1000dc40:	1c14      	adds	r4, r2, #0
1000dc42:	1c20      	adds	r0, r4, #0
1000dc44:	790a      	ldrb	r2, [r1, #4]
1000dc46:	78cb      	ldrb	r3, [r1, #3]
1000dc48:	0212      	lsls	r2, r2, #8
1000dc4a:	431a      	orrs	r2, r3
1000dc4c:	80e2      	strh	r2, [r4, #6]
1000dc4e:	4b07      	ldr	r3, [pc, #28]	; (1000dc6c <gapc_peer_att_info_ind_handler+0x78>)
1000dc50:	3008      	adds	r0, #8
1000dc52:	3105      	adds	r1, #5
1000dc54:	4798      	blx	r3
1000dc56:	2302      	movs	r3, #2
1000dc58:	70a3      	strb	r3, [r4, #2]
1000dc5a:	e006      	b.n	1000dc6a <gapc_peer_att_info_ind_handler+0x76>
1000dc5c:	790b      	ldrb	r3, [r1, #4]
1000dc5e:	78c9      	ldrb	r1, [r1, #3]
1000dc60:	021b      	lsls	r3, r3, #8
1000dc62:	430b      	orrs	r3, r1
1000dc64:	80d3      	strh	r3, [r2, #6]
1000dc66:	2305      	movs	r3, #5
1000dc68:	7093      	strb	r3, [r2, #2]
1000dc6a:	bd10      	pop	{r4, pc}
1000dc6c:	10010357 	.word	0x10010357

1000dc70 <gapc_con_channel_map_ind_handler>:
1000dc70:	b508      	push	{r3, lr}
1000dc72:	2300      	movs	r3, #0
1000dc74:	0a00      	lsrs	r0, r0, #8
1000dc76:	7013      	strb	r3, [r2, #0]
1000dc78:	8050      	strh	r0, [r2, #2]
1000dc7a:	4b02      	ldr	r3, [pc, #8]	; (1000dc84 <gapc_con_channel_map_ind_handler+0x14>)
1000dc7c:	1d10      	adds	r0, r2, #4
1000dc7e:	2205      	movs	r2, #5
1000dc80:	4798      	blx	r3
1000dc82:	bd08      	pop	{r3, pc}
1000dc84:	10010357 	.word	0x10010357

1000dc88 <gapc_lecb_connected>:
1000dc88:	7843      	ldrb	r3, [r0, #1]
1000dc8a:	7802      	ldrb	r2, [r0, #0]
1000dc8c:	021b      	lsls	r3, r3, #8
1000dc8e:	4313      	orrs	r3, r2
1000dc90:	800b      	strh	r3, [r1, #0]
1000dc92:	78c3      	ldrb	r3, [r0, #3]
1000dc94:	7882      	ldrb	r2, [r0, #2]
1000dc96:	021b      	lsls	r3, r3, #8
1000dc98:	4313      	orrs	r3, r2
1000dc9a:	804b      	strh	r3, [r1, #2]
1000dc9c:	7943      	ldrb	r3, [r0, #5]
1000dc9e:	7902      	ldrb	r2, [r0, #4]
1000dca0:	021b      	lsls	r3, r3, #8
1000dca2:	4313      	orrs	r3, r2
1000dca4:	808b      	strh	r3, [r1, #4]
1000dca6:	79c3      	ldrb	r3, [r0, #7]
1000dca8:	7982      	ldrb	r2, [r0, #6]
1000dcaa:	021b      	lsls	r3, r3, #8
1000dcac:	4313      	orrs	r3, r2
1000dcae:	80cb      	strh	r3, [r1, #6]
1000dcb0:	2300      	movs	r3, #0
1000dcb2:	720b      	strb	r3, [r1, #8]
1000dcb4:	4770      	bx	lr

1000dcb6 <gapc_lecb_disconnected>:
1000dcb6:	7843      	ldrb	r3, [r0, #1]
1000dcb8:	7802      	ldrb	r2, [r0, #0]
1000dcba:	021b      	lsls	r3, r3, #8
1000dcbc:	4313      	orrs	r3, r2
1000dcbe:	800b      	strh	r3, [r1, #0]
1000dcc0:	78c3      	ldrb	r3, [r0, #3]
1000dcc2:	7882      	ldrb	r2, [r0, #2]
1000dcc4:	021b      	lsls	r3, r3, #8
1000dcc6:	4313      	orrs	r3, r2
1000dcc8:	804b      	strh	r3, [r1, #2]
1000dcca:	4770      	bx	lr

1000dccc <gapc_lecb_connect_req_ind>:
1000dccc:	7843      	ldrb	r3, [r0, #1]
1000dcce:	7802      	ldrb	r2, [r0, #0]
1000dcd0:	021b      	lsls	r3, r3, #8
1000dcd2:	4313      	orrs	r3, r2
1000dcd4:	800b      	strh	r3, [r1, #0]
1000dcd6:	78c3      	ldrb	r3, [r0, #3]
1000dcd8:	7882      	ldrb	r2, [r0, #2]
1000dcda:	021b      	lsls	r3, r3, #8
1000dcdc:	4313      	orrs	r3, r2
1000dcde:	804b      	strh	r3, [r1, #2]
1000dce0:	7943      	ldrb	r3, [r0, #5]
1000dce2:	7902      	ldrb	r2, [r0, #4]
1000dce4:	021b      	lsls	r3, r3, #8
1000dce6:	4313      	orrs	r3, r2
1000dce8:	808b      	strh	r3, [r1, #4]
1000dcea:	79c3      	ldrb	r3, [r0, #7]
1000dcec:	7982      	ldrb	r2, [r0, #6]
1000dcee:	021b      	lsls	r3, r3, #8
1000dcf0:	4313      	orrs	r3, r2
1000dcf2:	80cb      	strh	r3, [r1, #6]
1000dcf4:	4770      	bx	lr

1000dcf6 <gapc_lecb_add_credit_resp_handler>:
1000dcf6:	7843      	ldrb	r3, [r0, #1]
1000dcf8:	7802      	ldrb	r2, [r0, #0]
1000dcfa:	021b      	lsls	r3, r3, #8
1000dcfc:	4313      	orrs	r3, r2
1000dcfe:	800b      	strh	r3, [r1, #0]
1000dd00:	78c3      	ldrb	r3, [r0, #3]
1000dd02:	7882      	ldrb	r2, [r0, #2]
1000dd04:	021b      	lsls	r3, r3, #8
1000dd06:	4313      	orrs	r3, r2
1000dd08:	804b      	strh	r3, [r1, #2]
1000dd0a:	7943      	ldrb	r3, [r0, #5]
1000dd0c:	7902      	ldrb	r2, [r0, #4]
1000dd0e:	021b      	lsls	r3, r3, #8
1000dd10:	4313      	orrs	r3, r2
1000dd12:	808b      	strh	r3, [r1, #4]
1000dd14:	4770      	bx	lr
	...

1000dd18 <gapm_reset_req_handler>:
1000dd18:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000dd1a:	466b      	mov	r3, sp
1000dd1c:	4915      	ldr	r1, [pc, #84]	; (1000dd74 <gapm_reset_req_handler+0x5c>)
1000dd1e:	4816      	ldr	r0, [pc, #88]	; (1000dd78 <gapm_reset_req_handler+0x60>)
1000dd20:	880c      	ldrh	r4, [r1, #0]
1000dd22:	8809      	ldrh	r1, [r1, #0]
1000dd24:	1ddd      	adds	r5, r3, #7
1000dd26:	0a09      	lsrs	r1, r1, #8
1000dd28:	2300      	movs	r3, #0
1000dd2a:	2202      	movs	r2, #2
1000dd2c:	7141      	strb	r1, [r0, #5]
1000dd2e:	26d0      	movs	r6, #208	; 0xd0
1000dd30:	2101      	movs	r1, #1
1000dd32:	7104      	strb	r4, [r0, #4]
1000dd34:	4c11      	ldr	r4, [pc, #68]	; (1000dd7c <gapm_reset_req_handler+0x64>)
1000dd36:	702b      	strb	r3, [r5, #0]
1000dd38:	7002      	strb	r2, [r0, #0]
1000dd3a:	70c3      	strb	r3, [r0, #3]
1000dd3c:	320b      	adds	r2, #11
1000dd3e:	7201      	strb	r1, [r0, #8]
1000dd40:	7181      	strb	r1, [r0, #6]
1000dd42:	71c3      	strb	r3, [r0, #7]
1000dd44:	3108      	adds	r1, #8
1000dd46:	4b0e      	ldr	r3, [pc, #56]	; (1000dd80 <gapm_reset_req_handler+0x68>)
1000dd48:	0136      	lsls	r6, r6, #4
1000dd4a:	7042      	strb	r2, [r0, #1]
1000dd4c:	7082      	strb	r2, [r0, #2]
1000dd4e:	80a2      	strh	r2, [r4, #4]
1000dd50:	8026      	strh	r6, [r4, #0]
1000dd52:	4798      	blx	r3
1000dd54:	1c28      	adds	r0, r5, #0
1000dd56:	4b0b      	ldr	r3, [pc, #44]	; (1000dd84 <gapm_reset_req_handler+0x6c>)
1000dd58:	4798      	blx	r3
1000dd5a:	782b      	ldrb	r3, [r5, #0]
1000dd5c:	20e2      	movs	r0, #226	; 0xe2
1000dd5e:	2b00      	cmp	r3, #0
1000dd60:	d106      	bne.n	1000dd70 <gapm_reset_req_handler+0x58>
1000dd62:	68a3      	ldr	r3, [r4, #8]
1000dd64:	20e2      	movs	r0, #226	; 0xe2
1000dd66:	781a      	ldrb	r2, [r3, #0]
1000dd68:	785b      	ldrb	r3, [r3, #1]
1000dd6a:	2a01      	cmp	r2, #1
1000dd6c:	d100      	bne.n	1000dd70 <gapm_reset_req_handler+0x58>
1000dd6e:	1c18      	adds	r0, r3, #0
1000dd70:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000dd72:	46c0      	nop			; (mov r8, r8)
1000dd74:	10014b04 	.word	0x10014b04
1000dd78:	10014e74 	.word	0x10014e74
1000dd7c:	10014af8 	.word	0x10014af8
1000dd80:	1000d141 	.word	0x1000d141
1000dd84:	1000d1a5 	.word	0x1000d1a5

1000dd88 <gapm_set_dev_config_cmd_handler>:
1000dd88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd8a:	b089      	sub	sp, #36	; 0x24
1000dd8c:	9303      	str	r3, [sp, #12]
1000dd8e:	ab0e      	add	r3, sp, #56	; 0x38
1000dd90:	781b      	ldrb	r3, [r3, #0]
1000dd92:	4c37      	ldr	r4, [pc, #220]	; (1000de70 <gapm_set_dev_config_cmd_handler+0xe8>)
1000dd94:	9304      	str	r3, [sp, #16]
1000dd96:	ab0f      	add	r3, sp, #60	; 0x3c
1000dd98:	781b      	ldrb	r3, [r3, #0]
1000dd9a:	270d      	movs	r7, #13
1000dd9c:	9305      	str	r3, [sp, #20]
1000dd9e:	ab10      	add	r3, sp, #64	; 0x40
1000dda0:	881b      	ldrh	r3, [r3, #0]
1000dda2:	72a1      	strb	r1, [r4, #10]
1000dda4:	9300      	str	r3, [sp, #0]
1000dda6:	ab11      	add	r3, sp, #68	; 0x44
1000dda8:	881b      	ldrh	r3, [r3, #0]
1000ddaa:	0a09      	lsrs	r1, r1, #8
1000ddac:	9301      	str	r3, [sp, #4]
1000ddae:	ab12      	add	r3, sp, #72	; 0x48
1000ddb0:	881b      	ldrh	r3, [r3, #0]
1000ddb2:	7260      	strb	r0, [r4, #9]
1000ddb4:	9302      	str	r3, [sp, #8]
1000ddb6:	ab06      	add	r3, sp, #24
1000ddb8:	1dde      	adds	r6, r3, #7
1000ddba:	2300      	movs	r3, #0
1000ddbc:	7033      	strb	r3, [r6, #0]
1000ddbe:	2304      	movs	r3, #4
1000ddc0:	7023      	strb	r3, [r4, #0]
1000ddc2:	2300      	movs	r3, #0
1000ddc4:	70e3      	strb	r3, [r4, #3]
1000ddc6:	4b2b      	ldr	r3, [pc, #172]	; (1000de74 <gapm_set_dev_config_cmd_handler+0xec>)
1000ddc8:	72e1      	strb	r1, [r4, #11]
1000ddca:	881d      	ldrh	r5, [r3, #0]
1000ddcc:	881b      	ldrh	r3, [r3, #0]
1000ddce:	1c11      	adds	r1, r2, #0
1000ddd0:	0a1b      	lsrs	r3, r3, #8
1000ddd2:	7163      	strb	r3, [r4, #5]
1000ddd4:	2303      	movs	r3, #3
1000ddd6:	7125      	strb	r5, [r4, #4]
1000ddd8:	2206      	movs	r2, #6
1000ddda:	4d27      	ldr	r5, [pc, #156]	; (1000de78 <gapm_set_dev_config_cmd_handler+0xf0>)
1000dddc:	4827      	ldr	r0, [pc, #156]	; (1000de7c <gapm_set_dev_config_cmd_handler+0xf4>)
1000ddde:	7223      	strb	r3, [r4, #8]
1000dde0:	7067      	strb	r7, [r4, #1]
1000dde2:	70a7      	strb	r7, [r4, #2]
1000dde4:	47a8      	blx	r5
1000dde6:	9903      	ldr	r1, [sp, #12]
1000dde8:	2210      	movs	r2, #16
1000ddea:	4825      	ldr	r0, [pc, #148]	; (1000de80 <gapm_set_dev_config_cmd_handler+0xf8>)
1000ddec:	47a8      	blx	r5
1000ddee:	466a      	mov	r2, sp
1000ddf0:	7c12      	ldrb	r2, [r2, #16]
1000ddf2:	1ce3      	adds	r3, r4, #3
1000ddf4:	77da      	strb	r2, [r3, #31]
1000ddf6:	466a      	mov	r2, sp
1000ddf8:	7d12      	ldrb	r2, [r2, #20]
1000ddfa:	1d23      	adds	r3, r4, #4
1000ddfc:	77da      	strb	r2, [r3, #31]
1000ddfe:	466a      	mov	r2, sp
1000de00:	7812      	ldrb	r2, [r2, #0]
1000de02:	1d63      	adds	r3, r4, #5
1000de04:	77da      	strb	r2, [r3, #31]
1000de06:	9b00      	ldr	r3, [sp, #0]
1000de08:	1da2      	adds	r2, r4, #6
1000de0a:	0a1b      	lsrs	r3, r3, #8
1000de0c:	77d3      	strb	r3, [r2, #31]
1000de0e:	466a      	mov	r2, sp
1000de10:	7912      	ldrb	r2, [r2, #4]
1000de12:	1de3      	adds	r3, r4, #7
1000de14:	77da      	strb	r2, [r3, #31]
1000de16:	1c22      	adds	r2, r4, #0
1000de18:	9b01      	ldr	r3, [sp, #4]
1000de1a:	3208      	adds	r2, #8
1000de1c:	0a1b      	lsrs	r3, r3, #8
1000de1e:	77d3      	strb	r3, [r2, #31]
1000de20:	466a      	mov	r2, sp
1000de22:	1c23      	adds	r3, r4, #0
1000de24:	7a12      	ldrb	r2, [r2, #8]
1000de26:	3328      	adds	r3, #40	; 0x28
1000de28:	701a      	strb	r2, [r3, #0]
1000de2a:	1c22      	adds	r2, r4, #0
1000de2c:	9b02      	ldr	r3, [sp, #8]
1000de2e:	3229      	adds	r2, #41	; 0x29
1000de30:	0a1b      	lsrs	r3, r3, #8
1000de32:	7013      	strb	r3, [r2, #0]
1000de34:	23d0      	movs	r3, #208	; 0xd0
1000de36:	4d13      	ldr	r5, [pc, #76]	; (1000de84 <gapm_set_dev_config_cmd_handler+0xfc>)
1000de38:	011b      	lsls	r3, r3, #4
1000de3a:	802b      	strh	r3, [r5, #0]
1000de3c:	2322      	movs	r3, #34	; 0x22
1000de3e:	71a3      	strb	r3, [r4, #6]
1000de40:	2300      	movs	r3, #0
1000de42:	212a      	movs	r1, #42	; 0x2a
1000de44:	71e3      	strb	r3, [r4, #7]
1000de46:	1c20      	adds	r0, r4, #0
1000de48:	4b0f      	ldr	r3, [pc, #60]	; (1000de88 <gapm_set_dev_config_cmd_handler+0x100>)
1000de4a:	80af      	strh	r7, [r5, #4]
1000de4c:	4798      	blx	r3
1000de4e:	1c30      	adds	r0, r6, #0
1000de50:	4b0e      	ldr	r3, [pc, #56]	; (1000de8c <gapm_set_dev_config_cmd_handler+0x104>)
1000de52:	4798      	blx	r3
1000de54:	7833      	ldrb	r3, [r6, #0]
1000de56:	20e2      	movs	r0, #226	; 0xe2
1000de58:	2b00      	cmp	r3, #0
1000de5a:	d106      	bne.n	1000de6a <gapm_set_dev_config_cmd_handler+0xe2>
1000de5c:	68ab      	ldr	r3, [r5, #8]
1000de5e:	20e2      	movs	r0, #226	; 0xe2
1000de60:	781a      	ldrb	r2, [r3, #0]
1000de62:	785b      	ldrb	r3, [r3, #1]
1000de64:	2a03      	cmp	r2, #3
1000de66:	d100      	bne.n	1000de6a <gapm_set_dev_config_cmd_handler+0xe2>
1000de68:	1c18      	adds	r0, r3, #0
1000de6a:	b009      	add	sp, #36	; 0x24
1000de6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000de6e:	46c0      	nop			; (mov r8, r8)
1000de70:	10014e74 	.word	0x10014e74
1000de74:	10014b04 	.word	0x10014b04
1000de78:	10010357 	.word	0x10010357
1000de7c:	10014e80 	.word	0x10014e80
1000de80:	10014e86 	.word	0x10014e86
1000de84:	10014af8 	.word	0x10014af8
1000de88:	1000d141 	.word	0x1000d141
1000de8c:	1000d1a5 	.word	0x1000d1a5

1000de90 <gapm_get_dev_config_cmd_handler>:
1000de90:	4684      	mov	ip, r0
1000de92:	4663      	mov	r3, ip
1000de94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de96:	b085      	sub	sp, #20
1000de98:	9100      	str	r1, [sp, #0]
1000de9a:	20cf      	movs	r0, #207	; 0xcf
1000de9c:	2b01      	cmp	r3, #1
1000de9e:	d854      	bhi.n	1000df4a <gapm_get_dev_config_cmd_handler+0xba>
1000dea0:	2900      	cmp	r1, #0
1000dea2:	d052      	beq.n	1000df4a <gapm_get_dev_config_cmd_handler+0xba>
1000dea4:	2200      	movs	r2, #0
1000dea6:	492a      	ldr	r1, [pc, #168]	; (1000df50 <gapm_get_dev_config_cmd_handler+0xc0>)
1000dea8:	ab02      	add	r3, sp, #8
1000deaa:	880c      	ldrh	r4, [r1, #0]
1000deac:	8809      	ldrh	r1, [r1, #0]
1000deae:	1d9f      	adds	r7, r3, #6
1000deb0:	719a      	strb	r2, [r3, #6]
1000deb2:	4b28      	ldr	r3, [pc, #160]	; (1000df54 <gapm_get_dev_config_cmd_handler+0xc4>)
1000deb4:	0a09      	lsrs	r1, r1, #8
1000deb6:	250d      	movs	r5, #13
1000deb8:	2606      	movs	r6, #6
1000deba:	7159      	strb	r1, [r3, #5]
1000debc:	4661      	mov	r1, ip
1000debe:	701e      	strb	r6, [r3, #0]
1000dec0:	705d      	strb	r5, [r3, #1]
1000dec2:	709d      	strb	r5, [r3, #2]
1000dec4:	70da      	strb	r2, [r3, #3]
1000dec6:	711c      	strb	r4, [r3, #4]
1000dec8:	2901      	cmp	r1, #1
1000deca:	d13e      	bne.n	1000df4a <gapm_get_dev_config_cmd_handler+0xba>
1000decc:	21d0      	movs	r1, #208	; 0xd0
1000dece:	4c22      	ldr	r4, [pc, #136]	; (1000df58 <gapm_get_dev_config_cmd_handler+0xc8>)
1000ded0:	0109      	lsls	r1, r1, #4
1000ded2:	8061      	strh	r1, [r4, #2]
1000ded4:	4921      	ldr	r1, [pc, #132]	; (1000df5c <gapm_get_dev_config_cmd_handler+0xcc>)
1000ded6:	71da      	strb	r2, [r3, #7]
1000ded8:	8021      	strh	r1, [r4, #0]
1000deda:	4661      	mov	r1, ip
1000dedc:	721e      	strb	r6, [r3, #8]
1000dede:	7199      	strb	r1, [r3, #6]
1000dee0:	1c18      	adds	r0, r3, #0
1000dee2:	2109      	movs	r1, #9
1000dee4:	4b1e      	ldr	r3, [pc, #120]	; (1000df60 <gapm_get_dev_config_cmd_handler+0xd0>)
1000dee6:	80a5      	strh	r5, [r4, #4]
1000dee8:	4798      	blx	r3
1000deea:	1c38      	adds	r0, r7, #0
1000deec:	4b1d      	ldr	r3, [pc, #116]	; (1000df64 <gapm_get_dev_config_cmd_handler+0xd4>)
1000deee:	4798      	blx	r3
1000def0:	783b      	ldrb	r3, [r7, #0]
1000def2:	20e2      	movs	r0, #226	; 0xe2
1000def4:	9301      	str	r3, [sp, #4]
1000def6:	2b00      	cmp	r3, #0
1000def8:	d127      	bne.n	1000df4a <gapm_get_dev_config_cmd_handler+0xba>
1000defa:	8821      	ldrh	r1, [r4, #0]
1000defc:	4a1a      	ldr	r2, [pc, #104]	; (1000df68 <gapm_get_dev_config_cmd_handler+0xd8>)
1000defe:	68a7      	ldr	r7, [r4, #8]
1000df00:	3b01      	subs	r3, #1
1000df02:	4291      	cmp	r1, r2
1000df04:	d001      	beq.n	1000df0a <gapm_get_dev_config_cmd_handler+0x7a>
1000df06:	8023      	strh	r3, [r4, #0]
1000df08:	e01a      	b.n	1000df40 <gapm_get_dev_config_cmd_handler+0xb0>
1000df0a:	8063      	strh	r3, [r4, #2]
1000df0c:	9b00      	ldr	r3, [sp, #0]
1000df0e:	1c39      	adds	r1, r7, #0
1000df10:	1c58      	adds	r0, r3, #1
1000df12:	1c32      	adds	r2, r6, #0
1000df14:	4b15      	ldr	r3, [pc, #84]	; (1000df6c <gapm_get_dev_config_cmd_handler+0xdc>)
1000df16:	4798      	blx	r3
1000df18:	79bb      	ldrb	r3, [r7, #6]
1000df1a:	9a00      	ldr	r2, [sp, #0]
1000df1c:	7013      	strb	r3, [r2, #0]
1000df1e:	23d0      	movs	r3, #208	; 0xd0
1000df20:	011b      	lsls	r3, r3, #4
1000df22:	8023      	strh	r3, [r4, #0]
1000df24:	ab02      	add	r3, sp, #8
1000df26:	80a5      	strh	r5, [r4, #4]
1000df28:	1ddd      	adds	r5, r3, #7
1000df2a:	466b      	mov	r3, sp
1000df2c:	791b      	ldrb	r3, [r3, #4]
1000df2e:	1c28      	adds	r0, r5, #0
1000df30:	702b      	strb	r3, [r5, #0]
1000df32:	4b0c      	ldr	r3, [pc, #48]	; (1000df64 <gapm_get_dev_config_cmd_handler+0xd4>)
1000df34:	4798      	blx	r3
1000df36:	782b      	ldrb	r3, [r5, #0]
1000df38:	20d0      	movs	r0, #208	; 0xd0
1000df3a:	2b00      	cmp	r3, #0
1000df3c:	d105      	bne.n	1000df4a <gapm_get_dev_config_cmd_handler+0xba>
1000df3e:	68a7      	ldr	r7, [r4, #8]
1000df40:	783b      	ldrb	r3, [r7, #0]
1000df42:	7878      	ldrb	r0, [r7, #1]
1000df44:	2b06      	cmp	r3, #6
1000df46:	d000      	beq.n	1000df4a <gapm_get_dev_config_cmd_handler+0xba>
1000df48:	20e2      	movs	r0, #226	; 0xe2
1000df4a:	b005      	add	sp, #20
1000df4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df4e:	46c0      	nop			; (mov r8, r8)
1000df50:	10014b04 	.word	0x10014b04
1000df54:	10014e74 	.word	0x10014e74
1000df58:	10014af8 	.word	0x10014af8
1000df5c:	00000d08 	.word	0x00000d08
1000df60:	1000d141 	.word	0x1000d141
1000df64:	1000d1a5 	.word	0x1000d1a5
1000df68:	0000ffff 	.word	0x0000ffff
1000df6c:	10010357 	.word	0x10010357

1000df70 <gapm_cancel_cmd_handler>:
1000df70:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000df72:	4916      	ldr	r1, [pc, #88]	; (1000dfcc <gapm_cancel_cmd_handler+0x5c>)
1000df74:	4816      	ldr	r0, [pc, #88]	; (1000dfd0 <gapm_cancel_cmd_handler+0x60>)
1000df76:	880c      	ldrh	r4, [r1, #0]
1000df78:	8809      	ldrh	r1, [r1, #0]
1000df7a:	466b      	mov	r3, sp
1000df7c:	0a09      	lsrs	r1, r1, #8
1000df7e:	7141      	strb	r1, [r0, #5]
1000df80:	2102      	movs	r1, #2
1000df82:	2203      	movs	r2, #3
1000df84:	7201      	strb	r1, [r0, #8]
1000df86:	21d0      	movs	r1, #208	; 0xd0
1000df88:	1ddd      	adds	r5, r3, #7
1000df8a:	2300      	movs	r3, #0
1000df8c:	7104      	strb	r4, [r0, #4]
1000df8e:	4c11      	ldr	r4, [pc, #68]	; (1000dfd4 <gapm_cancel_cmd_handler+0x64>)
1000df90:	7002      	strb	r2, [r0, #0]
1000df92:	0109      	lsls	r1, r1, #4
1000df94:	320a      	adds	r2, #10
1000df96:	702b      	strb	r3, [r5, #0]
1000df98:	7042      	strb	r2, [r0, #1]
1000df9a:	7082      	strb	r2, [r0, #2]
1000df9c:	70c3      	strb	r3, [r0, #3]
1000df9e:	8021      	strh	r1, [r4, #0]
1000dfa0:	80a2      	strh	r2, [r4, #4]
1000dfa2:	71c3      	strb	r3, [r0, #7]
1000dfa4:	3a0c      	subs	r2, #12
1000dfa6:	2109      	movs	r1, #9
1000dfa8:	4b0b      	ldr	r3, [pc, #44]	; (1000dfd8 <gapm_cancel_cmd_handler+0x68>)
1000dfaa:	7182      	strb	r2, [r0, #6]
1000dfac:	4798      	blx	r3
1000dfae:	1c28      	adds	r0, r5, #0
1000dfb0:	4b0a      	ldr	r3, [pc, #40]	; (1000dfdc <gapm_cancel_cmd_handler+0x6c>)
1000dfb2:	4798      	blx	r3
1000dfb4:	7828      	ldrb	r0, [r5, #0]
1000dfb6:	2800      	cmp	r0, #0
1000dfb8:	d001      	beq.n	1000dfbe <gapm_cancel_cmd_handler+0x4e>
1000dfba:	20e2      	movs	r0, #226	; 0xe2
1000dfbc:	e004      	b.n	1000dfc8 <gapm_cancel_cmd_handler+0x58>
1000dfbe:	68a3      	ldr	r3, [r4, #8]
1000dfc0:	785b      	ldrb	r3, [r3, #1]
1000dfc2:	2b44      	cmp	r3, #68	; 0x44
1000dfc4:	d000      	beq.n	1000dfc8 <gapm_cancel_cmd_handler+0x58>
1000dfc6:	1c18      	adds	r0, r3, #0
1000dfc8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000dfca:	46c0      	nop			; (mov r8, r8)
1000dfcc:	10014b04 	.word	0x10014b04
1000dfd0:	10014e74 	.word	0x10014e74
1000dfd4:	10014af8 	.word	0x10014af8
1000dfd8:	1000d141 	.word	0x1000d141
1000dfdc:	1000d1a5 	.word	0x1000d1a5

1000dfe0 <gapm_dev_bdaddr_ind_handler>:
1000dfe0:	b538      	push	{r3, r4, r5, lr}
1000dfe2:	1c05      	adds	r5, r0, #0
1000dfe4:	1c0c      	adds	r4, r1, #0
1000dfe6:	1c48      	adds	r0, r1, #1
1000dfe8:	2206      	movs	r2, #6
1000dfea:	1c29      	adds	r1, r5, #0
1000dfec:	4b02      	ldr	r3, [pc, #8]	; (1000dff8 <gapm_dev_bdaddr_ind_handler+0x18>)
1000dfee:	4798      	blx	r3
1000dff0:	79ab      	ldrb	r3, [r5, #6]
1000dff2:	2000      	movs	r0, #0
1000dff4:	7023      	strb	r3, [r4, #0]
1000dff6:	bd38      	pop	{r3, r4, r5, pc}
1000dff8:	10010357 	.word	0x10010357

1000dffc <gapm_cmp_evt>:
1000dffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dffe:	7803      	ldrb	r3, [r0, #0]
1000e000:	7845      	ldrb	r5, [r0, #1]
1000e002:	3b0c      	subs	r3, #12
1000e004:	1e18      	subs	r0, r3, #0
1000e006:	280b      	cmp	r0, #11
1000e008:	d900      	bls.n	1000e00c <gapm_cmp_evt+0x10>
1000e00a:	e08d      	b.n	1000e128 <gapm_cmp_evt+0x12c>
1000e00c:	1c0c      	adds	r4, r1, #0
1000e00e:	f000 fd55 	bl	1000eabc <__gnu_thumb1_case_uqi>
1000e012:	1952      	.short	0x1952
1000e014:	068b1919 	.word	0x068b1919
1000e018:	8b595906 	.word	0x8b595906
1000e01c:	0d8b      	.short	0x0d8b
1000e01e:	2300      	movs	r3, #0
1000e020:	2d45      	cmp	r5, #69	; 0x45
1000e022:	d000      	beq.n	1000e026 <gapm_cmp_evt+0x2a>
1000e024:	1c2b      	adds	r3, r5, #0
1000e026:	7023      	strb	r3, [r4, #0]
1000e028:	2002      	movs	r0, #2
1000e02a:	e07e      	b.n	1000e12a <gapm_cmp_evt+0x12e>
1000e02c:	203b      	movs	r0, #59	; 0x3b
1000e02e:	2d00      	cmp	r5, #0
1000e030:	d100      	bne.n	1000e034 <gapm_cmp_evt+0x38>
1000e032:	e07a      	b.n	1000e12a <gapm_cmp_evt+0x12e>
1000e034:	700d      	strb	r5, [r1, #0]
1000e036:	1c48      	adds	r0, r1, #1
1000e038:	2210      	movs	r2, #16
1000e03a:	2100      	movs	r1, #0
1000e03c:	4b3b      	ldr	r3, [pc, #236]	; (1000e12c <gapm_cmp_evt+0x130>)
1000e03e:	4798      	blx	r3
1000e040:	200f      	movs	r0, #15
1000e042:	e072      	b.n	1000e12a <gapm_cmp_evt+0x12e>
1000e044:	2d00      	cmp	r5, #0
1000e046:	d134      	bne.n	1000e0b2 <gapm_cmp_evt+0xb6>
1000e048:	4b39      	ldr	r3, [pc, #228]	; (1000e130 <gapm_cmp_evt+0x134>)
1000e04a:	4798      	blx	r3
1000e04c:	1e43      	subs	r3, r0, #1
1000e04e:	b2db      	uxtb	r3, r3
1000e050:	1c28      	adds	r0, r5, #0
1000e052:	2b06      	cmp	r3, #6
1000e054:	d869      	bhi.n	1000e12a <gapm_cmp_evt+0x12e>
1000e056:	466b      	mov	r3, sp
1000e058:	4e36      	ldr	r6, [pc, #216]	; (1000e134 <gapm_cmp_evt+0x138>)
1000e05a:	1dd9      	adds	r1, r3, #7
1000e05c:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e05e:	4b36      	ldr	r3, [pc, #216]	; (1000e138 <gapm_cmp_evt+0x13c>)
1000e060:	4798      	blx	r3
1000e062:	2312      	movs	r3, #18
1000e064:	4358      	muls	r0, r3
1000e066:	4935      	ldr	r1, [pc, #212]	; (1000e13c <gapm_cmp_evt+0x140>)
1000e068:	1809      	adds	r1, r1, r0
1000e06a:	1c0b      	adds	r3, r1, #0
1000e06c:	894a      	ldrh	r2, [r1, #10]
1000e06e:	3308      	adds	r3, #8
1000e070:	8122      	strh	r2, [r4, #8]
1000e072:	784f      	ldrb	r7, [r1, #1]
1000e074:	72a5      	strb	r5, [r4, #10]
1000e076:	7027      	strb	r7, [r4, #0]
1000e078:	898a      	ldrh	r2, [r1, #12]
1000e07a:	1c60      	adds	r0, r4, #1
1000e07c:	81a2      	strh	r2, [r4, #12]
1000e07e:	88db      	ldrh	r3, [r3, #6]
1000e080:	3102      	adds	r1, #2
1000e082:	81e3      	strh	r3, [r4, #14]
1000e084:	89cb      	ldrh	r3, [r1, #14]
1000e086:	2206      	movs	r2, #6
1000e088:	8223      	strh	r3, [r4, #16]
1000e08a:	4b2d      	ldr	r3, [pc, #180]	; (1000e140 <gapm_cmp_evt+0x144>)
1000e08c:	4798      	blx	r3
1000e08e:	2f00      	cmp	r7, #0
1000e090:	d00a      	beq.n	1000e0a8 <gapm_cmp_evt+0xac>
1000e092:	79a3      	ldrb	r3, [r4, #6]
1000e094:	223f      	movs	r2, #63	; 0x3f
1000e096:	1c19      	adds	r1, r3, #0
1000e098:	3501      	adds	r5, #1
1000e09a:	4391      	bics	r1, r2
1000e09c:	29c0      	cmp	r1, #192	; 0xc0
1000e09e:	d003      	beq.n	1000e0a8 <gapm_cmp_evt+0xac>
1000e0a0:	065b      	lsls	r3, r3, #25
1000e0a2:	0fdb      	lsrs	r3, r3, #31
1000e0a4:	3502      	adds	r5, #2
1000e0a6:	1aed      	subs	r5, r5, r3
1000e0a8:	2301      	movs	r3, #1
1000e0aa:	425b      	negs	r3, r3
1000e0ac:	7025      	strb	r5, [r4, #0]
1000e0ae:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e0b0:	e038      	b.n	1000e124 <gapm_cmp_evt+0x128>
1000e0b2:	700d      	strb	r5, [r1, #0]
1000e0b4:	e004      	b.n	1000e0c0 <gapm_cmp_evt+0xc4>
1000e0b6:	2300      	movs	r3, #0
1000e0b8:	2d45      	cmp	r5, #69	; 0x45
1000e0ba:	d000      	beq.n	1000e0be <gapm_cmp_evt+0xc2>
1000e0bc:	1c2b      	adds	r3, r5, #0
1000e0be:	7023      	strb	r3, [r4, #0]
1000e0c0:	2003      	movs	r0, #3
1000e0c2:	e032      	b.n	1000e12a <gapm_cmp_evt+0x12e>
1000e0c4:	4e1b      	ldr	r6, [pc, #108]	; (1000e134 <gapm_cmp_evt+0x138>)
1000e0c6:	2100      	movs	r1, #0
1000e0c8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000e0ca:	4b1b      	ldr	r3, [pc, #108]	; (1000e138 <gapm_cmp_evt+0x13c>)
1000e0cc:	4798      	blx	r3
1000e0ce:	2807      	cmp	r0, #7
1000e0d0:	d818      	bhi.n	1000e104 <gapm_cmp_evt+0x108>
1000e0d2:	2301      	movs	r3, #1
1000e0d4:	425b      	negs	r3, r3
1000e0d6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000e0d8:	3313      	adds	r3, #19
1000e0da:	4358      	muls	r0, r3
1000e0dc:	4917      	ldr	r1, [pc, #92]	; (1000e13c <gapm_cmp_evt+0x140>)
1000e0de:	1809      	adds	r1, r1, r0
1000e0e0:	1c0b      	adds	r3, r1, #0
1000e0e2:	894a      	ldrh	r2, [r1, #10]
1000e0e4:	3308      	adds	r3, #8
1000e0e6:	8122      	strh	r2, [r4, #8]
1000e0e8:	784a      	ldrb	r2, [r1, #1]
1000e0ea:	72a5      	strb	r5, [r4, #10]
1000e0ec:	7022      	strb	r2, [r4, #0]
1000e0ee:	898a      	ldrh	r2, [r1, #12]
1000e0f0:	1c60      	adds	r0, r4, #1
1000e0f2:	81a2      	strh	r2, [r4, #12]
1000e0f4:	88db      	ldrh	r3, [r3, #6]
1000e0f6:	3102      	adds	r1, #2
1000e0f8:	81e3      	strh	r3, [r4, #14]
1000e0fa:	89cb      	ldrh	r3, [r1, #14]
1000e0fc:	2206      	movs	r2, #6
1000e0fe:	8223      	strh	r3, [r4, #16]
1000e100:	4b0f      	ldr	r3, [pc, #60]	; (1000e140 <gapm_cmp_evt+0x144>)
1000e102:	4798      	blx	r3
1000e104:	2200      	movs	r2, #0
1000e106:	7823      	ldrb	r3, [r4, #0]
1000e108:	4293      	cmp	r3, r2
1000e10a:	d00a      	beq.n	1000e122 <gapm_cmp_evt+0x126>
1000e10c:	79a3      	ldrb	r3, [r4, #6]
1000e10e:	323f      	adds	r2, #63	; 0x3f
1000e110:	1c19      	adds	r1, r3, #0
1000e112:	4391      	bics	r1, r2
1000e114:	3a3e      	subs	r2, #62	; 0x3e
1000e116:	29c0      	cmp	r1, #192	; 0xc0
1000e118:	d003      	beq.n	1000e122 <gapm_cmp_evt+0x126>
1000e11a:	065b      	lsls	r3, r3, #25
1000e11c:	0fdb      	lsrs	r3, r3, #31
1000e11e:	3202      	adds	r2, #2
1000e120:	1ad2      	subs	r2, r2, r3
1000e122:	7022      	strb	r2, [r4, #0]
1000e124:	2005      	movs	r0, #5
1000e126:	e000      	b.n	1000e12a <gapm_cmp_evt+0x12e>
1000e128:	2000      	movs	r0, #0
1000e12a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e12c:	10010369 	.word	0x10010369
1000e130:	1000d34d 	.word	0x1000d34d
1000e134:	10014b96 	.word	0x10014b96
1000e138:	1000d311 	.word	0x1000d311
1000e13c:	10014b06 	.word	0x10014b06
1000e140:	10010357 	.word	0x10010357

1000e144 <gapm_start_adv_cmd_handler>:
1000e144:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e146:	b089      	sub	sp, #36	; 0x24
1000e148:	9303      	str	r3, [sp, #12]
1000e14a:	ab0e      	add	r3, sp, #56	; 0x38
1000e14c:	9102      	str	r1, [sp, #8]
1000e14e:	cb02      	ldmia	r3!, {r1}
1000e150:	aa08      	add	r2, sp, #32
1000e152:	881b      	ldrh	r3, [r3, #0]
1000e154:	4e3c      	ldr	r6, [pc, #240]	; (1000e248 <gapm_start_adv_cmd_handler+0x104>)
1000e156:	9300      	str	r3, [sp, #0]
1000e158:	ab10      	add	r3, sp, #64	; 0x40
1000e15a:	881b      	ldrh	r3, [r3, #0]
1000e15c:	240d      	movs	r4, #13
1000e15e:	469c      	mov	ip, r3
1000e160:	ab11      	add	r3, sp, #68	; 0x44
1000e162:	781b      	ldrb	r3, [r3, #0]
1000e164:	9304      	str	r3, [sp, #16]
1000e166:	ab12      	add	r3, sp, #72	; 0x48
1000e168:	781b      	ldrb	r3, [r3, #0]
1000e16a:	9305      	str	r3, [sp, #20]
1000e16c:	ab13      	add	r3, sp, #76	; 0x4c
1000e16e:	781b      	ldrb	r3, [r3, #0]
1000e170:	9306      	str	r3, [sp, #24]
1000e172:	ab14      	add	r3, sp, #80	; 0x50
1000e174:	781b      	ldrb	r3, [r3, #0]
1000e176:	9301      	str	r3, [sp, #4]
1000e178:	2319      	movs	r3, #25
1000e17a:	189b      	adds	r3, r3, r2
1000e17c:	7fdd      	ldrb	r5, [r3, #31]
1000e17e:	ab18      	add	r3, sp, #96	; 0x60
1000e180:	881f      	ldrh	r7, [r3, #0]
1000e182:	ab19      	add	r3, sp, #100	; 0x64
1000e184:	781b      	ldrb	r3, [r3, #0]
1000e186:	8832      	ldrh	r2, [r6, #0]
1000e188:	9307      	str	r3, [sp, #28]
1000e18a:	4b30      	ldr	r3, [pc, #192]	; (1000e24c <gapm_start_adv_cmd_handler+0x108>)
1000e18c:	8836      	ldrh	r6, [r6, #0]
1000e18e:	711a      	strb	r2, [r3, #4]
1000e190:	466a      	mov	r2, sp
1000e192:	7a12      	ldrb	r2, [r2, #8]
1000e194:	701c      	strb	r4, [r3, #0]
1000e196:	705c      	strb	r4, [r3, #1]
1000e198:	709c      	strb	r4, [r3, #2]
1000e19a:	725a      	strb	r2, [r3, #9]
1000e19c:	2400      	movs	r4, #0
1000e19e:	466a      	mov	r2, sp
1000e1a0:	0a36      	lsrs	r6, r6, #8
1000e1a2:	70dc      	strb	r4, [r3, #3]
1000e1a4:	7218      	strb	r0, [r3, #8]
1000e1a6:	729c      	strb	r4, [r3, #10]
1000e1a8:	715e      	strb	r6, [r3, #5]
1000e1aa:	72dc      	strb	r4, [r3, #11]
1000e1ac:	7812      	ldrb	r2, [r2, #0]
1000e1ae:	380e      	subs	r0, #14
1000e1b0:	731a      	strb	r2, [r3, #12]
1000e1b2:	9a00      	ldr	r2, [sp, #0]
1000e1b4:	0a14      	lsrs	r4, r2, #8
1000e1b6:	4662      	mov	r2, ip
1000e1b8:	739a      	strb	r2, [r3, #14]
1000e1ba:	4662      	mov	r2, ip
1000e1bc:	735c      	strb	r4, [r3, #13]
1000e1be:	0a14      	lsrs	r4, r2, #8
1000e1c0:	466a      	mov	r2, sp
1000e1c2:	7c12      	ldrb	r2, [r2, #16]
1000e1c4:	73dc      	strb	r4, [r3, #15]
1000e1c6:	741a      	strb	r2, [r3, #16]
1000e1c8:	1c1c      	adds	r4, r3, #0
1000e1ca:	2801      	cmp	r0, #1
1000e1cc:	d809      	bhi.n	1000e1e2 <gapm_start_adv_cmd_handler+0x9e>
1000e1ce:	2900      	cmp	r1, #0
1000e1d0:	d003      	beq.n	1000e1da <gapm_start_adv_cmd_handler+0x96>
1000e1d2:	481f      	ldr	r0, [pc, #124]	; (1000e250 <gapm_start_adv_cmd_handler+0x10c>)
1000e1d4:	2206      	movs	r2, #6
1000e1d6:	4b1f      	ldr	r3, [pc, #124]	; (1000e254 <gapm_start_adv_cmd_handler+0x110>)
1000e1d8:	4798      	blx	r3
1000e1da:	466b      	mov	r3, sp
1000e1dc:	7b1b      	ldrb	r3, [r3, #12]
1000e1de:	75e3      	strb	r3, [r4, #23]
1000e1e0:	e014      	b.n	1000e20c <gapm_start_adv_cmd_handler+0xc8>
1000e1e2:	466b      	mov	r3, sp
1000e1e4:	7d1b      	ldrb	r3, [r3, #20]
1000e1e6:	9915      	ldr	r1, [sp, #84]	; 0x54
1000e1e8:	7463      	strb	r3, [r4, #17]
1000e1ea:	466b      	mov	r3, sp
1000e1ec:	7e1b      	ldrb	r3, [r3, #24]
1000e1ee:	9a01      	ldr	r2, [sp, #4]
1000e1f0:	74a3      	strb	r3, [r4, #18]
1000e1f2:	466b      	mov	r3, sp
1000e1f4:	791b      	ldrb	r3, [r3, #4]
1000e1f6:	4818      	ldr	r0, [pc, #96]	; (1000e258 <gapm_start_adv_cmd_handler+0x114>)
1000e1f8:	4e16      	ldr	r6, [pc, #88]	; (1000e254 <gapm_start_adv_cmd_handler+0x110>)
1000e1fa:	74e3      	strb	r3, [r4, #19]
1000e1fc:	47b0      	blx	r6
1000e1fe:	1c23      	adds	r3, r4, #0
1000e200:	4816      	ldr	r0, [pc, #88]	; (1000e25c <gapm_start_adv_cmd_handler+0x118>)
1000e202:	3330      	adds	r3, #48	; 0x30
1000e204:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000e206:	1c2a      	adds	r2, r5, #0
1000e208:	701d      	strb	r5, [r3, #0]
1000e20a:	47b0      	blx	r6
1000e20c:	1c22      	adds	r2, r4, #0
1000e20e:	23a5      	movs	r3, #165	; 0xa5
1000e210:	3250      	adds	r2, #80	; 0x50
1000e212:	7013      	strb	r3, [r2, #0]
1000e214:	1c22      	adds	r2, r4, #0
1000e216:	3251      	adds	r2, #81	; 0x51
1000e218:	7013      	strb	r3, [r2, #0]
1000e21a:	1c23      	adds	r3, r4, #0
1000e21c:	1c22      	adds	r2, r4, #0
1000e21e:	3352      	adds	r3, #82	; 0x52
1000e220:	701f      	strb	r7, [r3, #0]
1000e222:	3253      	adds	r2, #83	; 0x53
1000e224:	0a3b      	lsrs	r3, r7, #8
1000e226:	7013      	strb	r3, [r2, #0]
1000e228:	466a      	mov	r2, sp
1000e22a:	1c23      	adds	r3, r4, #0
1000e22c:	7f12      	ldrb	r2, [r2, #28]
1000e22e:	3354      	adds	r3, #84	; 0x54
1000e230:	701a      	strb	r2, [r3, #0]
1000e232:	234d      	movs	r3, #77	; 0x4d
1000e234:	2500      	movs	r5, #0
1000e236:	71a3      	strb	r3, [r4, #6]
1000e238:	1c20      	adds	r0, r4, #0
1000e23a:	2155      	movs	r1, #85	; 0x55
1000e23c:	4b08      	ldr	r3, [pc, #32]	; (1000e260 <gapm_start_adv_cmd_handler+0x11c>)
1000e23e:	71e5      	strb	r5, [r4, #7]
1000e240:	4798      	blx	r3
1000e242:	1c28      	adds	r0, r5, #0
1000e244:	b009      	add	sp, #36	; 0x24
1000e246:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e248:	10014b04 	.word	0x10014b04
1000e24c:	10014e74 	.word	0x10014e74
1000e250:	10014e85 	.word	0x10014e85
1000e254:	10010357 	.word	0x10010357
1000e258:	10014e88 	.word	0x10014e88
1000e25c:	10014ea5 	.word	0x10014ea5
1000e260:	1000d141 	.word	0x1000d141

1000e264 <get_gap_local_addr_type>:
1000e264:	4b04      	ldr	r3, [pc, #16]	; (1000e278 <get_gap_local_addr_type+0x14>)
1000e266:	2001      	movs	r0, #1
1000e268:	791b      	ldrb	r3, [r3, #4]
1000e26a:	2b02      	cmp	r3, #2
1000e26c:	d003      	beq.n	1000e276 <get_gap_local_addr_type+0x12>
1000e26e:	3b03      	subs	r3, #3
1000e270:	4258      	negs	r0, r3
1000e272:	4158      	adcs	r0, r3
1000e274:	0040      	lsls	r0, r0, #1
1000e276:	4770      	bx	lr
1000e278:	10014b96 	.word	0x10014b96

1000e27c <gapm_adv_report_evt_handler>:
1000e27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e27e:	7843      	ldrb	r3, [r0, #1]
1000e280:	1c05      	adds	r5, r0, #0
1000e282:	9301      	str	r3, [sp, #4]
1000e284:	466b      	mov	r3, sp
1000e286:	1c0c      	adds	r4, r1, #0
1000e288:	791b      	ldrb	r3, [r3, #4]
1000e28a:	7806      	ldrb	r6, [r0, #0]
1000e28c:	2206      	movs	r2, #6
1000e28e:	704b      	strb	r3, [r1, #1]
1000e290:	1c88      	adds	r0, r1, #2
1000e292:	4f1b      	ldr	r7, [pc, #108]	; (1000e300 <gapm_adv_report_evt_handler+0x84>)
1000e294:	1ca9      	adds	r1, r5, #2
1000e296:	47b8      	blx	r7
1000e298:	1c20      	adds	r0, r4, #0
1000e29a:	1c29      	adds	r1, r5, #0
1000e29c:	7a2a      	ldrb	r2, [r5, #8]
1000e29e:	3008      	adds	r0, #8
1000e2a0:	77c2      	strb	r2, [r0, #31]
1000e2a2:	3109      	adds	r1, #9
1000e2a4:	3528      	adds	r5, #40	; 0x28
1000e2a6:	47b8      	blx	r7
1000e2a8:	782b      	ldrb	r3, [r5, #0]
1000e2aa:	b25a      	sxtb	r2, r3
1000e2ac:	2a00      	cmp	r2, #0
1000e2ae:	da01      	bge.n	1000e2b4 <gapm_adv_report_evt_handler+0x38>
1000e2b0:	3301      	adds	r3, #1
1000e2b2:	b2db      	uxtb	r3, r3
1000e2b4:	1c22      	adds	r2, r4, #0
1000e2b6:	3228      	adds	r2, #40	; 0x28
1000e2b8:	7013      	strb	r3, [r2, #0]
1000e2ba:	2200      	movs	r2, #0
1000e2bc:	9b01      	ldr	r3, [sp, #4]
1000e2be:	4293      	cmp	r3, r2
1000e2c0:	d00a      	beq.n	1000e2d8 <gapm_adv_report_evt_handler+0x5c>
1000e2c2:	79e3      	ldrb	r3, [r4, #7]
1000e2c4:	323f      	adds	r2, #63	; 0x3f
1000e2c6:	1c19      	adds	r1, r3, #0
1000e2c8:	4391      	bics	r1, r2
1000e2ca:	3a3e      	subs	r2, #62	; 0x3e
1000e2cc:	29c0      	cmp	r1, #192	; 0xc0
1000e2ce:	d003      	beq.n	1000e2d8 <gapm_adv_report_evt_handler+0x5c>
1000e2d0:	065b      	lsls	r3, r3, #25
1000e2d2:	0fdb      	lsrs	r3, r3, #31
1000e2d4:	3202      	adds	r2, #2
1000e2d6:	1ad2      	subs	r2, r2, r3
1000e2d8:	7062      	strb	r2, [r4, #1]
1000e2da:	2e04      	cmp	r6, #4
1000e2dc:	d80f      	bhi.n	1000e2fe <gapm_adv_report_evt_handler+0x82>
1000e2de:	1c30      	adds	r0, r6, #0
1000e2e0:	f000 fbec 	bl	1000eabc <__gnu_thumb1_case_uqi>
1000e2e4:	09070503 	.word	0x09070503
1000e2e8:	0b          	.byte	0x0b
1000e2e9:	00          	.byte	0x00
1000e2ea:	2300      	movs	r3, #0
1000e2ec:	e006      	b.n	1000e2fc <gapm_adv_report_evt_handler+0x80>
1000e2ee:	2301      	movs	r3, #1
1000e2f0:	e004      	b.n	1000e2fc <gapm_adv_report_evt_handler+0x80>
1000e2f2:	2302      	movs	r3, #2
1000e2f4:	e002      	b.n	1000e2fc <gapm_adv_report_evt_handler+0x80>
1000e2f6:	2303      	movs	r3, #3
1000e2f8:	e000      	b.n	1000e2fc <gapm_adv_report_evt_handler+0x80>
1000e2fa:	2305      	movs	r3, #5
1000e2fc:	7023      	strb	r3, [r4, #0]
1000e2fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e300:	10010357 	.word	0x10010357

1000e304 <gapm_resolv_addr_cmd_handler>:
1000e304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e306:	2314      	movs	r3, #20
1000e308:	4c12      	ldr	r4, [pc, #72]	; (1000e354 <gapm_resolv_addr_cmd_handler+0x50>)
1000e30a:	1c17      	adds	r7, r2, #0
1000e30c:	7023      	strb	r3, [r4, #0]
1000e30e:	3b07      	subs	r3, #7
1000e310:	7063      	strb	r3, [r4, #1]
1000e312:	70a3      	strb	r3, [r4, #2]
1000e314:	2300      	movs	r3, #0
1000e316:	70e3      	strb	r3, [r4, #3]
1000e318:	4b0f      	ldr	r3, [pc, #60]	; (1000e358 <gapm_resolv_addr_cmd_handler+0x54>)
1000e31a:	1c05      	adds	r5, r0, #0
1000e31c:	881a      	ldrh	r2, [r3, #0]
1000e31e:	881b      	ldrh	r3, [r3, #0]
1000e320:	4e0e      	ldr	r6, [pc, #56]	; (1000e35c <gapm_resolv_addr_cmd_handler+0x58>)
1000e322:	0a1b      	lsrs	r3, r3, #8
1000e324:	7163      	strb	r3, [r4, #5]
1000e326:	2317      	movs	r3, #23
1000e328:	012d      	lsls	r5, r5, #4
1000e32a:	7122      	strb	r2, [r4, #4]
1000e32c:	7260      	strb	r0, [r4, #9]
1000e32e:	2206      	movs	r2, #6
1000e330:	480b      	ldr	r0, [pc, #44]	; (1000e360 <gapm_resolv_addr_cmd_handler+0x5c>)
1000e332:	7223      	strb	r3, [r4, #8]
1000e334:	47b0      	blx	r6
1000e336:	1c39      	adds	r1, r7, #0
1000e338:	1c2a      	adds	r2, r5, #0
1000e33a:	480a      	ldr	r0, [pc, #40]	; (1000e364 <gapm_resolv_addr_cmd_handler+0x60>)
1000e33c:	47b0      	blx	r6
1000e33e:	1c29      	adds	r1, r5, #0
1000e340:	3110      	adds	r1, #16
1000e342:	1c0b      	adds	r3, r1, #0
1000e344:	3b08      	subs	r3, #8
1000e346:	71a3      	strb	r3, [r4, #6]
1000e348:	121b      	asrs	r3, r3, #8
1000e34a:	71e3      	strb	r3, [r4, #7]
1000e34c:	1c20      	adds	r0, r4, #0
1000e34e:	4b06      	ldr	r3, [pc, #24]	; (1000e368 <gapm_resolv_addr_cmd_handler+0x64>)
1000e350:	4798      	blx	r3
1000e352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e354:	10014e74 	.word	0x10014e74
1000e358:	10014b04 	.word	0x10014b04
1000e35c:	10010357 	.word	0x10010357
1000e360:	10014e7e 	.word	0x10014e7e
1000e364:	10014e84 	.word	0x10014e84
1000e368:	1000d141 	.word	0x1000d141

1000e36c <gapm_addr_solved_ind_handler>:
1000e36c:	b570      	push	{r4, r5, r6, lr}
1000e36e:	1c04      	adds	r4, r0, #0
1000e370:	1c08      	adds	r0, r1, #0
1000e372:	1c0d      	adds	r5, r1, #0
1000e374:	4e05      	ldr	r6, [pc, #20]	; (1000e38c <gapm_addr_solved_ind_handler+0x20>)
1000e376:	1c21      	adds	r1, r4, #0
1000e378:	2206      	movs	r2, #6
1000e37a:	3011      	adds	r0, #17
1000e37c:	47b0      	blx	r6
1000e37e:	1c68      	adds	r0, r5, #1
1000e380:	1da1      	adds	r1, r4, #6
1000e382:	2210      	movs	r2, #16
1000e384:	47b0      	blx	r6
1000e386:	2300      	movs	r3, #0
1000e388:	702b      	strb	r3, [r5, #0]
1000e38a:	bd70      	pop	{r4, r5, r6, pc}
1000e38c:	10010357 	.word	0x10010357

1000e390 <gapm_profile_task_add_cmd_handler>:
1000e390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e392:	4684      	mov	ip, r0
1000e394:	a808      	add	r0, sp, #32
1000e396:	c810      	ldmia	r0!, {r4}
1000e398:	2500      	movs	r5, #0
1000e39a:	8807      	ldrh	r7, [r0, #0]
1000e39c:	4668      	mov	r0, sp
1000e39e:	1d86      	adds	r6, r0, #6
1000e3a0:	7185      	strb	r5, [r0, #6]
1000e3a2:	201b      	movs	r0, #27
1000e3a4:	4c2b      	ldr	r4, [pc, #172]	; (1000e454 <gapm_profile_task_add_cmd_handler+0xc4>)
1000e3a6:	7020      	strb	r0, [r4, #0]
1000e3a8:	200d      	movs	r0, #13
1000e3aa:	7060      	strb	r0, [r4, #1]
1000e3ac:	200d      	movs	r0, #13
1000e3ae:	70e5      	strb	r5, [r4, #3]
1000e3b0:	4d29      	ldr	r5, [pc, #164]	; (1000e458 <gapm_profile_task_add_cmd_handler+0xc8>)
1000e3b2:	70a0      	strb	r0, [r4, #2]
1000e3b4:	8828      	ldrh	r0, [r5, #0]
1000e3b6:	882d      	ldrh	r5, [r5, #0]
1000e3b8:	7120      	strb	r0, [r4, #4]
1000e3ba:	201b      	movs	r0, #27
1000e3bc:	7220      	strb	r0, [r4, #8]
1000e3be:	4660      	mov	r0, ip
1000e3c0:	72a1      	strb	r1, [r4, #10]
1000e3c2:	7322      	strb	r2, [r4, #12]
1000e3c4:	73a3      	strb	r3, [r4, #14]
1000e3c6:	0a09      	lsrs	r1, r1, #8
1000e3c8:	0a12      	lsrs	r2, r2, #8
1000e3ca:	0a1b      	lsrs	r3, r3, #8
1000e3cc:	7260      	strb	r0, [r4, #9]
1000e3ce:	72e1      	strb	r1, [r4, #11]
1000e3d0:	7362      	strb	r2, [r4, #13]
1000e3d2:	73e3      	strb	r3, [r4, #15]
1000e3d4:	1c3a      	adds	r2, r7, #0
1000e3d6:	0a2d      	lsrs	r5, r5, #8
1000e3d8:	9908      	ldr	r1, [sp, #32]
1000e3da:	4b20      	ldr	r3, [pc, #128]	; (1000e45c <gapm_profile_task_add_cmd_handler+0xcc>)
1000e3dc:	4820      	ldr	r0, [pc, #128]	; (1000e460 <gapm_profile_task_add_cmd_handler+0xd0>)
1000e3de:	7165      	strb	r5, [r4, #5]
1000e3e0:	4798      	blx	r3
1000e3e2:	4d20      	ldr	r5, [pc, #128]	; (1000e464 <gapm_profile_task_add_cmd_handler+0xd4>)
1000e3e4:	1c39      	adds	r1, r7, #0
1000e3e6:	4b20      	ldr	r3, [pc, #128]	; (1000e468 <gapm_profile_task_add_cmd_handler+0xd8>)
1000e3e8:	3110      	adds	r1, #16
1000e3ea:	802b      	strh	r3, [r5, #0]
1000e3ec:	230d      	movs	r3, #13
1000e3ee:	b289      	uxth	r1, r1
1000e3f0:	80ab      	strh	r3, [r5, #4]
1000e3f2:	1c0b      	adds	r3, r1, #0
1000e3f4:	27d0      	movs	r7, #208	; 0xd0
1000e3f6:	3b08      	subs	r3, #8
1000e3f8:	71a3      	strb	r3, [r4, #6]
1000e3fa:	121b      	asrs	r3, r3, #8
1000e3fc:	71e3      	strb	r3, [r4, #7]
1000e3fe:	1c20      	adds	r0, r4, #0
1000e400:	4b1a      	ldr	r3, [pc, #104]	; (1000e46c <gapm_profile_task_add_cmd_handler+0xdc>)
1000e402:	013f      	lsls	r7, r7, #4
1000e404:	806f      	strh	r7, [r5, #2]
1000e406:	4798      	blx	r3
1000e408:	1c30      	adds	r0, r6, #0
1000e40a:	4c19      	ldr	r4, [pc, #100]	; (1000e470 <gapm_profile_task_add_cmd_handler+0xe0>)
1000e40c:	47a0      	blx	r4
1000e40e:	7831      	ldrb	r1, [r6, #0]
1000e410:	20e2      	movs	r0, #226	; 0xe2
1000e412:	2900      	cmp	r1, #0
1000e414:	d11d      	bne.n	1000e452 <gapm_profile_task_add_cmd_handler+0xc2>
1000e416:	2301      	movs	r3, #1
1000e418:	882e      	ldrh	r6, [r5, #0]
1000e41a:	4816      	ldr	r0, [pc, #88]	; (1000e474 <gapm_profile_task_add_cmd_handler+0xe4>)
1000e41c:	68aa      	ldr	r2, [r5, #8]
1000e41e:	425b      	negs	r3, r3
1000e420:	4286      	cmp	r6, r0
1000e422:	d001      	beq.n	1000e428 <gapm_profile_task_add_cmd_handler+0x98>
1000e424:	802b      	strh	r3, [r5, #0]
1000e426:	e013      	b.n	1000e450 <gapm_profile_task_add_cmd_handler+0xc0>
1000e428:	806b      	strh	r3, [r5, #2]
1000e42a:	7953      	ldrb	r3, [r2, #5]
1000e42c:	7912      	ldrb	r2, [r2, #4]
1000e42e:	021b      	lsls	r3, r3, #8
1000e430:	4313      	orrs	r3, r2
1000e432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000e434:	8013      	strh	r3, [r2, #0]
1000e436:	230d      	movs	r3, #13
1000e438:	80ab      	strh	r3, [r5, #4]
1000e43a:	466b      	mov	r3, sp
1000e43c:	1dde      	adds	r6, r3, #7
1000e43e:	1c30      	adds	r0, r6, #0
1000e440:	71d9      	strb	r1, [r3, #7]
1000e442:	802f      	strh	r7, [r5, #0]
1000e444:	47a0      	blx	r4
1000e446:	7833      	ldrb	r3, [r6, #0]
1000e448:	20d0      	movs	r0, #208	; 0xd0
1000e44a:	2b00      	cmp	r3, #0
1000e44c:	d101      	bne.n	1000e452 <gapm_profile_task_add_cmd_handler+0xc2>
1000e44e:	68aa      	ldr	r2, [r5, #8]
1000e450:	7850      	ldrb	r0, [r2, #1]
1000e452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e454:	10014e74 	.word	0x10014e74
1000e458:	10014b04 	.word	0x10014b04
1000e45c:	10010357 	.word	0x10010357
1000e460:	10014e84 	.word	0x10014e84
1000e464:	10014af8 	.word	0x10014af8
1000e468:	00000d1c 	.word	0x00000d1c
1000e46c:	1000d141 	.word	0x1000d141
1000e470:	1000d1a5 	.word	0x1000d1a5
1000e474:	0000ffff 	.word	0x0000ffff

1000e478 <gapm_profile_added_ind_handler>:
1000e478:	b510      	push	{r4, lr}
1000e47a:	7843      	ldrb	r3, [r0, #1]
1000e47c:	7902      	ldrb	r2, [r0, #4]
1000e47e:	7944      	ldrb	r4, [r0, #5]
1000e480:	7800      	ldrb	r0, [r0, #0]
1000e482:	021b      	lsls	r3, r3, #8
1000e484:	4303      	orrs	r3, r0
1000e486:	2b1b      	cmp	r3, #27
1000e488:	d104      	bne.n	1000e494 <gapm_profile_added_ind_handler+0x1c>
1000e48a:	2300      	movs	r3, #0
1000e48c:	700b      	strb	r3, [r1, #0]
1000e48e:	0223      	lsls	r3, r4, #8
1000e490:	4313      	orrs	r3, r2
1000e492:	804b      	strh	r3, [r1, #2]
1000e494:	203b      	movs	r0, #59	; 0x3b
1000e496:	bd10      	pop	{r4, pc}

1000e498 <gattc_read_req_ind_parser>:
1000e498:	7843      	ldrb	r3, [r0, #1]
1000e49a:	7802      	ldrb	r2, [r0, #0]
1000e49c:	021b      	lsls	r3, r3, #8
1000e49e:	4313      	orrs	r3, r2
1000e4a0:	804b      	strh	r3, [r1, #2]
1000e4a2:	4770      	bx	lr

1000e4a4 <gattc_write_req_ind_parser>:
1000e4a4:	b508      	push	{r3, lr}
1000e4a6:	1c13      	adds	r3, r2, #0
1000e4a8:	0a00      	lsrs	r0, r0, #8
1000e4aa:	8010      	strh	r0, [r2, #0]
1000e4ac:	784a      	ldrb	r2, [r1, #1]
1000e4ae:	7808      	ldrb	r0, [r1, #0]
1000e4b0:	0212      	lsls	r2, r2, #8
1000e4b2:	4302      	orrs	r2, r0
1000e4b4:	805a      	strh	r2, [r3, #2]
1000e4b6:	78ca      	ldrb	r2, [r1, #3]
1000e4b8:	7888      	ldrb	r0, [r1, #2]
1000e4ba:	0212      	lsls	r2, r2, #8
1000e4bc:	4302      	orrs	r2, r0
1000e4be:	809a      	strh	r2, [r3, #4]
1000e4c0:	794a      	ldrb	r2, [r1, #5]
1000e4c2:	7908      	ldrb	r0, [r1, #4]
1000e4c4:	0212      	lsls	r2, r2, #8
1000e4c6:	4302      	orrs	r2, r0
1000e4c8:	80da      	strh	r2, [r3, #6]
1000e4ca:	3308      	adds	r3, #8
1000e4cc:	1c18      	adds	r0, r3, #0
1000e4ce:	3106      	adds	r1, #6
1000e4d0:	4b01      	ldr	r3, [pc, #4]	; (1000e4d8 <gattc_write_req_ind_parser+0x34>)
1000e4d2:	4798      	blx	r3
1000e4d4:	bd08      	pop	{r3, pc}
1000e4d6:	46c0      	nop			; (mov r8, r8)
1000e4d8:	10010357 	.word	0x10010357

1000e4dc <gattc_att_info_req_parser>:
1000e4dc:	7843      	ldrb	r3, [r0, #1]
1000e4de:	7802      	ldrb	r2, [r0, #0]
1000e4e0:	021b      	lsls	r3, r3, #8
1000e4e2:	4313      	orrs	r3, r2
1000e4e4:	800b      	strh	r3, [r1, #0]
1000e4e6:	4770      	bx	lr

1000e4e8 <gattc_read_cfm>:
1000e4e8:	b538      	push	{r3, r4, r5, lr}
1000e4ea:	2514      	movs	r5, #20
1000e4ec:	1c1c      	adds	r4, r3, #0
1000e4ee:	4b14      	ldr	r3, [pc, #80]	; (1000e540 <gattc_read_cfm+0x58>)
1000e4f0:	70d9      	strb	r1, [r3, #3]
1000e4f2:	4914      	ldr	r1, [pc, #80]	; (1000e544 <gattc_read_cfm+0x5c>)
1000e4f4:	701d      	strb	r5, [r3, #0]
1000e4f6:	3d08      	subs	r5, #8
1000e4f8:	705d      	strb	r5, [r3, #1]
1000e4fa:	709d      	strb	r5, [r3, #2]
1000e4fc:	880d      	ldrh	r5, [r1, #0]
1000e4fe:	8809      	ldrh	r1, [r1, #0]
1000e500:	7218      	strb	r0, [r3, #8]
1000e502:	0a09      	lsrs	r1, r1, #8
1000e504:	7159      	strb	r1, [r3, #5]
1000e506:	0a00      	lsrs	r0, r0, #8
1000e508:	0a21      	lsrs	r1, r4, #8
1000e50a:	711d      	strb	r5, [r3, #4]
1000e50c:	7258      	strb	r0, [r3, #9]
1000e50e:	729c      	strb	r4, [r3, #10]
1000e510:	72d9      	strb	r1, [r3, #11]
1000e512:	731a      	strb	r2, [r3, #12]
1000e514:	1c1d      	adds	r5, r3, #0
1000e516:	2c00      	cmp	r4, #0
1000e518:	d007      	beq.n	1000e52a <gattc_read_cfm+0x42>
1000e51a:	9904      	ldr	r1, [sp, #16]
1000e51c:	1c22      	adds	r2, r4, #0
1000e51e:	480a      	ldr	r0, [pc, #40]	; (1000e548 <gattc_read_cfm+0x60>)
1000e520:	4b0a      	ldr	r3, [pc, #40]	; (1000e54c <gattc_read_cfm+0x64>)
1000e522:	340d      	adds	r4, #13
1000e524:	4798      	blx	r3
1000e526:	b2a1      	uxth	r1, r4
1000e528:	e001      	b.n	1000e52e <gattc_read_cfm+0x46>
1000e52a:	210e      	movs	r1, #14
1000e52c:	735c      	strb	r4, [r3, #13]
1000e52e:	1c0b      	adds	r3, r1, #0
1000e530:	3b08      	subs	r3, #8
1000e532:	71ab      	strb	r3, [r5, #6]
1000e534:	121b      	asrs	r3, r3, #8
1000e536:	71eb      	strb	r3, [r5, #7]
1000e538:	1c28      	adds	r0, r5, #0
1000e53a:	4b05      	ldr	r3, [pc, #20]	; (1000e550 <gattc_read_cfm+0x68>)
1000e53c:	4798      	blx	r3
1000e53e:	bd38      	pop	{r3, r4, r5, pc}
1000e540:	10014e74 	.word	0x10014e74
1000e544:	10014b04 	.word	0x10014b04
1000e548:	10014e81 	.word	0x10014e81
1000e54c:	10010357 	.word	0x10010357
1000e550:	1000d141 	.word	0x1000d141

1000e554 <gattc_write_cfm>:
1000e554:	4b0d      	ldr	r3, [pc, #52]	; (1000e58c <gattc_write_cfm+0x38>)
1000e556:	b510      	push	{r4, lr}
1000e558:	729a      	strb	r2, [r3, #10]
1000e55a:	2203      	movs	r2, #3
1000e55c:	2416      	movs	r4, #22
1000e55e:	719a      	strb	r2, [r3, #6]
1000e560:	2200      	movs	r2, #0
1000e562:	70d9      	strb	r1, [r3, #3]
1000e564:	490a      	ldr	r1, [pc, #40]	; (1000e590 <gattc_write_cfm+0x3c>)
1000e566:	701c      	strb	r4, [r3, #0]
1000e568:	3c0a      	subs	r4, #10
1000e56a:	705c      	strb	r4, [r3, #1]
1000e56c:	709c      	strb	r4, [r3, #2]
1000e56e:	880c      	ldrh	r4, [r1, #0]
1000e570:	8809      	ldrh	r1, [r1, #0]
1000e572:	7218      	strb	r0, [r3, #8]
1000e574:	0a09      	lsrs	r1, r1, #8
1000e576:	0a00      	lsrs	r0, r0, #8
1000e578:	711c      	strb	r4, [r3, #4]
1000e57a:	7159      	strb	r1, [r3, #5]
1000e57c:	7258      	strb	r0, [r3, #9]
1000e57e:	71da      	strb	r2, [r3, #7]
1000e580:	1c18      	adds	r0, r3, #0
1000e582:	210b      	movs	r1, #11
1000e584:	4b03      	ldr	r3, [pc, #12]	; (1000e594 <gattc_write_cfm+0x40>)
1000e586:	4798      	blx	r3
1000e588:	bd10      	pop	{r4, pc}
1000e58a:	46c0      	nop			; (mov r8, r8)
1000e58c:	10014e74 	.word	0x10014e74
1000e590:	10014b04 	.word	0x10014b04
1000e594:	1000d141 	.word	0x1000d141

1000e598 <gattc_att_info_cfm>:
1000e598:	b538      	push	{r3, r4, r5, lr}
1000e59a:	4c0e      	ldr	r4, [pc, #56]	; (1000e5d4 <gattc_att_info_cfm+0x3c>)
1000e59c:	2518      	movs	r5, #24
1000e59e:	7323      	strb	r3, [r4, #12]
1000e5a0:	2305      	movs	r3, #5
1000e5a2:	71a3      	strb	r3, [r4, #6]
1000e5a4:	2300      	movs	r3, #0
1000e5a6:	70e1      	strb	r1, [r4, #3]
1000e5a8:	490b      	ldr	r1, [pc, #44]	; (1000e5d8 <gattc_att_info_cfm+0x40>)
1000e5aa:	7025      	strb	r5, [r4, #0]
1000e5ac:	3d0c      	subs	r5, #12
1000e5ae:	7065      	strb	r5, [r4, #1]
1000e5b0:	70a5      	strb	r5, [r4, #2]
1000e5b2:	880d      	ldrh	r5, [r1, #0]
1000e5b4:	8809      	ldrh	r1, [r1, #0]
1000e5b6:	7220      	strb	r0, [r4, #8]
1000e5b8:	0a09      	lsrs	r1, r1, #8
1000e5ba:	0a00      	lsrs	r0, r0, #8
1000e5bc:	7161      	strb	r1, [r4, #5]
1000e5be:	7260      	strb	r0, [r4, #9]
1000e5c0:	72a2      	strb	r2, [r4, #10]
1000e5c2:	71e3      	strb	r3, [r4, #7]
1000e5c4:	0a12      	lsrs	r2, r2, #8
1000e5c6:	1c20      	adds	r0, r4, #0
1000e5c8:	210d      	movs	r1, #13
1000e5ca:	4b04      	ldr	r3, [pc, #16]	; (1000e5dc <gattc_att_info_cfm+0x44>)
1000e5cc:	7125      	strb	r5, [r4, #4]
1000e5ce:	72e2      	strb	r2, [r4, #11]
1000e5d0:	4798      	blx	r3
1000e5d2:	bd38      	pop	{r3, r4, r5, pc}
1000e5d4:	10014e74 	.word	0x10014e74
1000e5d8:	10014b04 	.word	0x10014b04
1000e5dc:	1000d141 	.word	0x1000d141

1000e5e0 <gattc_event_cfm_handler>:
1000e5e0:	220e      	movs	r2, #14
1000e5e2:	b508      	push	{r3, lr}
1000e5e4:	4b0b      	ldr	r3, [pc, #44]	; (1000e614 <gattc_event_cfm_handler+0x34>)
1000e5e6:	701a      	strb	r2, [r3, #0]
1000e5e8:	3a02      	subs	r2, #2
1000e5ea:	705a      	strb	r2, [r3, #1]
1000e5ec:	709a      	strb	r2, [r3, #2]
1000e5ee:	4a0a      	ldr	r2, [pc, #40]	; (1000e618 <gattc_event_cfm_handler+0x38>)
1000e5f0:	70d8      	strb	r0, [r3, #3]
1000e5f2:	8810      	ldrh	r0, [r2, #0]
1000e5f4:	8812      	ldrh	r2, [r2, #0]
1000e5f6:	7219      	strb	r1, [r3, #8]
1000e5f8:	0a12      	lsrs	r2, r2, #8
1000e5fa:	715a      	strb	r2, [r3, #5]
1000e5fc:	2202      	movs	r2, #2
1000e5fe:	719a      	strb	r2, [r3, #6]
1000e600:	2200      	movs	r2, #0
1000e602:	0a09      	lsrs	r1, r1, #8
1000e604:	7118      	strb	r0, [r3, #4]
1000e606:	7259      	strb	r1, [r3, #9]
1000e608:	71da      	strb	r2, [r3, #7]
1000e60a:	1c18      	adds	r0, r3, #0
1000e60c:	210a      	movs	r1, #10
1000e60e:	4b03      	ldr	r3, [pc, #12]	; (1000e61c <gattc_event_cfm_handler+0x3c>)
1000e610:	4798      	blx	r3
1000e612:	bd08      	pop	{r3, pc}
1000e614:	10014e74 	.word	0x10014e74
1000e618:	10014b04 	.word	0x10014b04
1000e61c:	1000d141 	.word	0x1000d141

1000e620 <gattc_disc_svc_ind_parser>:
1000e620:	b570      	push	{r4, r5, r6, lr}
1000e622:	1c15      	adds	r5, r2, #0
1000e624:	0a00      	lsrs	r0, r0, #8
1000e626:	8010      	strh	r0, [r2, #0]
1000e628:	784b      	ldrb	r3, [r1, #1]
1000e62a:	780a      	ldrb	r2, [r1, #0]
1000e62c:	021b      	lsls	r3, r3, #8
1000e62e:	4313      	orrs	r3, r2
1000e630:	806b      	strh	r3, [r5, #2]
1000e632:	78cb      	ldrb	r3, [r1, #3]
1000e634:	788a      	ldrb	r2, [r1, #2]
1000e636:	021b      	lsls	r3, r3, #8
1000e638:	4313      	orrs	r3, r2
1000e63a:	80ab      	strh	r3, [r5, #4]
1000e63c:	790e      	ldrb	r6, [r1, #4]
1000e63e:	4b05      	ldr	r3, [pc, #20]	; (1000e654 <gattc_disc_svc_ind_parser+0x34>)
1000e640:	1c30      	adds	r0, r6, #0
1000e642:	1c0c      	adds	r4, r1, #0
1000e644:	4798      	blx	r3
1000e646:	1c32      	adds	r2, r6, #0
1000e648:	71a8      	strb	r0, [r5, #6]
1000e64a:	1d61      	adds	r1, r4, #5
1000e64c:	1de8      	adds	r0, r5, #7
1000e64e:	4b02      	ldr	r3, [pc, #8]	; (1000e658 <gattc_disc_svc_ind_parser+0x38>)
1000e650:	4798      	blx	r3
1000e652:	bd70      	pop	{r4, r5, r6, pc}
1000e654:	1000cab1 	.word	0x1000cab1
1000e658:	10010357 	.word	0x10010357

1000e65c <gattc_disc_svc_incl_ind_parser>:
1000e65c:	b570      	push	{r4, r5, r6, lr}
1000e65e:	1c15      	adds	r5, r2, #0
1000e660:	0a00      	lsrs	r0, r0, #8
1000e662:	8010      	strh	r0, [r2, #0]
1000e664:	784b      	ldrb	r3, [r1, #1]
1000e666:	780a      	ldrb	r2, [r1, #0]
1000e668:	021b      	lsls	r3, r3, #8
1000e66a:	4313      	orrs	r3, r2
1000e66c:	806b      	strh	r3, [r5, #2]
1000e66e:	78cb      	ldrb	r3, [r1, #3]
1000e670:	788a      	ldrb	r2, [r1, #2]
1000e672:	021b      	lsls	r3, r3, #8
1000e674:	4313      	orrs	r3, r2
1000e676:	80ab      	strh	r3, [r5, #4]
1000e678:	794b      	ldrb	r3, [r1, #5]
1000e67a:	790a      	ldrb	r2, [r1, #4]
1000e67c:	021b      	lsls	r3, r3, #8
1000e67e:	4313      	orrs	r3, r2
1000e680:	80eb      	strh	r3, [r5, #6]
1000e682:	798e      	ldrb	r6, [r1, #6]
1000e684:	4b05      	ldr	r3, [pc, #20]	; (1000e69c <gattc_disc_svc_incl_ind_parser+0x40>)
1000e686:	1c30      	adds	r0, r6, #0
1000e688:	1c0c      	adds	r4, r1, #0
1000e68a:	4798      	blx	r3
1000e68c:	7228      	strb	r0, [r5, #8]
1000e68e:	1c28      	adds	r0, r5, #0
1000e690:	1c32      	adds	r2, r6, #0
1000e692:	1de1      	adds	r1, r4, #7
1000e694:	4b02      	ldr	r3, [pc, #8]	; (1000e6a0 <gattc_disc_svc_incl_ind_parser+0x44>)
1000e696:	3009      	adds	r0, #9
1000e698:	4798      	blx	r3
1000e69a:	bd70      	pop	{r4, r5, r6, pc}
1000e69c:	1000cab1 	.word	0x1000cab1
1000e6a0:	10010357 	.word	0x10010357

1000e6a4 <gattc_disc_char_ind_parser>:
1000e6a4:	b570      	push	{r4, r5, r6, lr}
1000e6a6:	1c15      	adds	r5, r2, #0
1000e6a8:	0a00      	lsrs	r0, r0, #8
1000e6aa:	8010      	strh	r0, [r2, #0]
1000e6ac:	784b      	ldrb	r3, [r1, #1]
1000e6ae:	780a      	ldrb	r2, [r1, #0]
1000e6b0:	021b      	lsls	r3, r3, #8
1000e6b2:	4313      	orrs	r3, r2
1000e6b4:	806b      	strh	r3, [r5, #2]
1000e6b6:	78cb      	ldrb	r3, [r1, #3]
1000e6b8:	788a      	ldrb	r2, [r1, #2]
1000e6ba:	021b      	lsls	r3, r3, #8
1000e6bc:	4313      	orrs	r3, r2
1000e6be:	80ab      	strh	r3, [r5, #4]
1000e6c0:	790b      	ldrb	r3, [r1, #4]
1000e6c2:	1c0c      	adds	r4, r1, #0
1000e6c4:	71ab      	strb	r3, [r5, #6]
1000e6c6:	794e      	ldrb	r6, [r1, #5]
1000e6c8:	4b05      	ldr	r3, [pc, #20]	; (1000e6e0 <gattc_disc_char_ind_parser+0x3c>)
1000e6ca:	1c30      	adds	r0, r6, #0
1000e6cc:	4798      	blx	r3
1000e6ce:	71e8      	strb	r0, [r5, #7]
1000e6d0:	1c28      	adds	r0, r5, #0
1000e6d2:	1c32      	adds	r2, r6, #0
1000e6d4:	1da1      	adds	r1, r4, #6
1000e6d6:	4b03      	ldr	r3, [pc, #12]	; (1000e6e4 <gattc_disc_char_ind_parser+0x40>)
1000e6d8:	3008      	adds	r0, #8
1000e6da:	4798      	blx	r3
1000e6dc:	bd70      	pop	{r4, r5, r6, pc}
1000e6de:	46c0      	nop			; (mov r8, r8)
1000e6e0:	1000cab1 	.word	0x1000cab1
1000e6e4:	10010357 	.word	0x10010357

1000e6e8 <gattc_disc_char_desc_ind_parser>:
1000e6e8:	b570      	push	{r4, r5, r6, lr}
1000e6ea:	1c15      	adds	r5, r2, #0
1000e6ec:	0a00      	lsrs	r0, r0, #8
1000e6ee:	8010      	strh	r0, [r2, #0]
1000e6f0:	784b      	ldrb	r3, [r1, #1]
1000e6f2:	780a      	ldrb	r2, [r1, #0]
1000e6f4:	021b      	lsls	r3, r3, #8
1000e6f6:	4313      	orrs	r3, r2
1000e6f8:	806b      	strh	r3, [r5, #2]
1000e6fa:	788e      	ldrb	r6, [r1, #2]
1000e6fc:	4b05      	ldr	r3, [pc, #20]	; (1000e714 <gattc_disc_char_desc_ind_parser+0x2c>)
1000e6fe:	1c30      	adds	r0, r6, #0
1000e700:	1c0c      	adds	r4, r1, #0
1000e702:	4798      	blx	r3
1000e704:	1c32      	adds	r2, r6, #0
1000e706:	7128      	strb	r0, [r5, #4]
1000e708:	1ce1      	adds	r1, r4, #3
1000e70a:	1d68      	adds	r0, r5, #5
1000e70c:	4b02      	ldr	r3, [pc, #8]	; (1000e718 <gattc_disc_char_desc_ind_parser+0x30>)
1000e70e:	4798      	blx	r3
1000e710:	bd70      	pop	{r4, r5, r6, pc}
1000e712:	46c0      	nop			; (mov r8, r8)
1000e714:	1000cab1 	.word	0x1000cab1
1000e718:	10010357 	.word	0x10010357

1000e71c <gattc_event_ind_and_notification_parser>:
1000e71c:	b510      	push	{r4, lr}
1000e71e:	780c      	ldrb	r4, [r1, #0]
1000e720:	1c13      	adds	r3, r2, #0
1000e722:	2c12      	cmp	r4, #18
1000e724:	d10e      	bne.n	1000e744 <gattc_event_ind_and_notification_parser+0x28>
1000e726:	0a00      	lsrs	r0, r0, #8
1000e728:	8010      	strh	r0, [r2, #0]
1000e72a:	788a      	ldrb	r2, [r1, #2]
1000e72c:	709a      	strb	r2, [r3, #2]
1000e72e:	7948      	ldrb	r0, [r1, #5]
1000e730:	790c      	ldrb	r4, [r1, #4]
1000e732:	0200      	lsls	r0, r0, #8
1000e734:	4320      	orrs	r0, r4
1000e736:	8098      	strh	r0, [r3, #4]
1000e738:	3106      	adds	r1, #6
1000e73a:	1d98      	adds	r0, r3, #6
1000e73c:	4b0b      	ldr	r3, [pc, #44]	; (1000e76c <gattc_event_ind_and_notification_parser+0x50>)
1000e73e:	4798      	blx	r3
1000e740:	221b      	movs	r2, #27
1000e742:	e010      	b.n	1000e766 <gattc_event_ind_and_notification_parser+0x4a>
1000e744:	2200      	movs	r2, #0
1000e746:	2c13      	cmp	r4, #19
1000e748:	d10d      	bne.n	1000e766 <gattc_event_ind_and_notification_parser+0x4a>
1000e74a:	0a00      	lsrs	r0, r0, #8
1000e74c:	8018      	strh	r0, [r3, #0]
1000e74e:	788a      	ldrb	r2, [r1, #2]
1000e750:	709a      	strb	r2, [r3, #2]
1000e752:	7908      	ldrb	r0, [r1, #4]
1000e754:	78cc      	ldrb	r4, [r1, #3]
1000e756:	0200      	lsls	r0, r0, #8
1000e758:	4320      	orrs	r0, r4
1000e75a:	8098      	strh	r0, [r3, #4]
1000e75c:	3106      	adds	r1, #6
1000e75e:	1d98      	adds	r0, r3, #6
1000e760:	4b02      	ldr	r3, [pc, #8]	; (1000e76c <gattc_event_ind_and_notification_parser+0x50>)
1000e762:	4798      	blx	r3
1000e764:	221c      	movs	r2, #28
1000e766:	1c10      	adds	r0, r2, #0
1000e768:	bd10      	pop	{r4, pc}
1000e76a:	46c0      	nop			; (mov r8, r8)
1000e76c:	10010357 	.word	0x10010357

1000e770 <gattc_complete_evt_handler>:
1000e770:	b500      	push	{lr}
1000e772:	0a00      	lsrs	r0, r0, #8
1000e774:	8010      	strh	r0, [r2, #0]
1000e776:	7808      	ldrb	r0, [r1, #0]
1000e778:	7090      	strb	r0, [r2, #2]
1000e77a:	784b      	ldrb	r3, [r1, #1]
1000e77c:	3801      	subs	r0, #1
1000e77e:	70d3      	strb	r3, [r2, #3]
1000e780:	2813      	cmp	r0, #19
1000e782:	d82c      	bhi.n	1000e7de <gattc_complete_evt_handler+0x6e>
1000e784:	f000 f99a 	bl	1000eabc <__gnu_thumb1_case_uqi>
1000e788:	0a0a0a0c 	.word	0x0a0a0a0c
1000e78c:	210a0a0a 	.word	0x210a0a0a
1000e790:	111f2121 	.word	0x111f2121
1000e794:	2b111111 	.word	0x2b111111
1000e798:	2919132b 	.word	0x2919132b
1000e79c:	2017      	movs	r0, #23
1000e79e:	e01f      	b.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7a0:	2024      	movs	r0, #36	; 0x24
1000e7a2:	2b00      	cmp	r3, #0
1000e7a4:	d11c      	bne.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7a6:	3017      	adds	r0, #23
1000e7a8:	e01a      	b.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7aa:	2025      	movs	r0, #37	; 0x25
1000e7ac:	e018      	b.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7ae:	4a0d      	ldr	r2, [pc, #52]	; (1000e7e4 <gattc_complete_evt_handler+0x74>)
1000e7b0:	201d      	movs	r0, #29
1000e7b2:	6813      	ldr	r3, [r2, #0]
1000e7b4:	3b01      	subs	r3, #1
1000e7b6:	6013      	str	r3, [r2, #0]
1000e7b8:	e012      	b.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7ba:	4a0a      	ldr	r2, [pc, #40]	; (1000e7e4 <gattc_complete_evt_handler+0x74>)
1000e7bc:	201e      	movs	r0, #30
1000e7be:	6813      	ldr	r3, [r2, #0]
1000e7c0:	3b01      	subs	r3, #1
1000e7c2:	6013      	str	r3, [r2, #0]
1000e7c4:	e00c      	b.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7c6:	2019      	movs	r0, #25
1000e7c8:	e00a      	b.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7ca:	203b      	movs	r0, #59	; 0x3b
1000e7cc:	2b00      	cmp	r3, #0
1000e7ce:	d007      	beq.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7d0:	2182      	movs	r1, #130	; 0x82
1000e7d2:	0089      	lsls	r1, r1, #2
1000e7d4:	5453      	strb	r3, [r2, r1]
1000e7d6:	3823      	subs	r0, #35	; 0x23
1000e7d8:	e002      	b.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7da:	2021      	movs	r0, #33	; 0x21
1000e7dc:	e000      	b.n	1000e7e0 <gattc_complete_evt_handler+0x70>
1000e7de:	2000      	movs	r0, #0
1000e7e0:	bd00      	pop	{pc}
1000e7e2:	46c0      	nop			; (mov r8, r8)
1000e7e4:	10013ea4 	.word	0x10013ea4

1000e7e8 <gattc_event_mtu_changed_ind_parser>:
1000e7e8:	0a00      	lsrs	r0, r0, #8
1000e7ea:	8010      	strh	r0, [r2, #0]
1000e7ec:	784b      	ldrb	r3, [r1, #1]
1000e7ee:	7809      	ldrb	r1, [r1, #0]
1000e7f0:	021b      	lsls	r3, r3, #8
1000e7f2:	430b      	orrs	r3, r1
1000e7f4:	8053      	strh	r3, [r2, #2]
1000e7f6:	4770      	bx	lr

1000e7f8 <gattc_read_ind_parser>:
1000e7f8:	0a00      	lsrs	r0, r0, #8
1000e7fa:	b508      	push	{r3, lr}
1000e7fc:	8010      	strh	r0, [r2, #0]
1000e7fe:	1c13      	adds	r3, r2, #0
1000e800:	2282      	movs	r2, #130	; 0x82
1000e802:	2000      	movs	r0, #0
1000e804:	0092      	lsls	r2, r2, #2
1000e806:	5498      	strb	r0, [r3, r2]
1000e808:	784a      	ldrb	r2, [r1, #1]
1000e80a:	7808      	ldrb	r0, [r1, #0]
1000e80c:	0212      	lsls	r2, r2, #8
1000e80e:	4302      	orrs	r2, r0
1000e810:	805a      	strh	r2, [r3, #2]
1000e812:	78ca      	ldrb	r2, [r1, #3]
1000e814:	7888      	ldrb	r0, [r1, #2]
1000e816:	0212      	lsls	r2, r2, #8
1000e818:	4302      	orrs	r2, r0
1000e81a:	80da      	strh	r2, [r3, #6]
1000e81c:	794a      	ldrb	r2, [r1, #5]
1000e81e:	7908      	ldrb	r0, [r1, #4]
1000e820:	0212      	lsls	r2, r2, #8
1000e822:	4302      	orrs	r2, r0
1000e824:	809a      	strh	r2, [r3, #4]
1000e826:	3308      	adds	r3, #8
1000e828:	1c18      	adds	r0, r3, #0
1000e82a:	3106      	adds	r1, #6
1000e82c:	4b01      	ldr	r3, [pc, #4]	; (1000e834 <gattc_read_ind_parser+0x3c>)
1000e82e:	4798      	blx	r3
1000e830:	bd08      	pop	{r3, pc}
1000e832:	46c0      	nop			; (mov r8, r8)
1000e834:	10010357 	.word	0x10010357

1000e838 <gattc_svc_changed_cfg_ind_parser>:
1000e838:	0a00      	lsrs	r0, r0, #8
1000e83a:	8010      	strh	r0, [r2, #0]
1000e83c:	784b      	ldrb	r3, [r1, #1]
1000e83e:	7809      	ldrb	r1, [r1, #0]
1000e840:	021b      	lsls	r3, r3, #8
1000e842:	430b      	orrs	r3, r1
1000e844:	8053      	strh	r3, [r2, #2]
1000e846:	4770      	bx	lr

1000e848 <init_gattc_task_module>:
1000e848:	2300      	movs	r3, #0
1000e84a:	4a02      	ldr	r2, [pc, #8]	; (1000e854 <init_gattc_task_module+0xc>)
1000e84c:	8013      	strh	r3, [r2, #0]
1000e84e:	4a02      	ldr	r2, [pc, #8]	; (1000e858 <init_gattc_task_module+0x10>)
1000e850:	8013      	strh	r3, [r2, #0]
1000e852:	4770      	bx	lr
1000e854:	10013e9e 	.word	0x10013e9e
1000e858:	10013ea0 	.word	0x10013ea0

1000e85c <gattm_att_set_value_req_handler>:
1000e85c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e85e:	466b      	mov	r3, sp
1000e860:	1dde      	adds	r6, r3, #7
1000e862:	2300      	movs	r3, #0
1000e864:	1c0d      	adds	r5, r1, #0
1000e866:	210c      	movs	r1, #12
1000e868:	270b      	movs	r7, #11
1000e86a:	4c17      	ldr	r4, [pc, #92]	; (1000e8c8 <gattm_att_set_value_req_handler+0x6c>)
1000e86c:	7033      	strb	r3, [r6, #0]
1000e86e:	70e3      	strb	r3, [r4, #3]
1000e870:	4b16      	ldr	r3, [pc, #88]	; (1000e8cc <gattm_att_set_value_req_handler+0x70>)
1000e872:	7021      	strb	r1, [r4, #0]
1000e874:	8819      	ldrh	r1, [r3, #0]
1000e876:	881b      	ldrh	r3, [r3, #0]
1000e878:	7220      	strb	r0, [r4, #8]
1000e87a:	0a1b      	lsrs	r3, r3, #8
1000e87c:	7163      	strb	r3, [r4, #5]
1000e87e:	0a00      	lsrs	r0, r0, #8
1000e880:	0a2b      	lsrs	r3, r5, #8
1000e882:	7121      	strb	r1, [r4, #4]
1000e884:	7260      	strb	r0, [r4, #9]
1000e886:	1c11      	adds	r1, r2, #0
1000e888:	72a5      	strb	r5, [r4, #10]
1000e88a:	1c2a      	adds	r2, r5, #0
1000e88c:	72e3      	strb	r3, [r4, #11]
1000e88e:	350c      	adds	r5, #12
1000e890:	4b0f      	ldr	r3, [pc, #60]	; (1000e8d0 <gattm_att_set_value_req_handler+0x74>)
1000e892:	4810      	ldr	r0, [pc, #64]	; (1000e8d4 <gattm_att_set_value_req_handler+0x78>)
1000e894:	7067      	strb	r7, [r4, #1]
1000e896:	70a7      	strb	r7, [r4, #2]
1000e898:	4798      	blx	r3
1000e89a:	b2a9      	uxth	r1, r5
1000e89c:	4b0e      	ldr	r3, [pc, #56]	; (1000e8d8 <gattm_att_set_value_req_handler+0x7c>)
1000e89e:	4d0f      	ldr	r5, [pc, #60]	; (1000e8dc <gattm_att_set_value_req_handler+0x80>)
1000e8a0:	1c20      	adds	r0, r4, #0
1000e8a2:	802b      	strh	r3, [r5, #0]
1000e8a4:	1c0b      	adds	r3, r1, #0
1000e8a6:	3b08      	subs	r3, #8
1000e8a8:	71a3      	strb	r3, [r4, #6]
1000e8aa:	121b      	asrs	r3, r3, #8
1000e8ac:	71e3      	strb	r3, [r4, #7]
1000e8ae:	4b0c      	ldr	r3, [pc, #48]	; (1000e8e0 <gattm_att_set_value_req_handler+0x84>)
1000e8b0:	80af      	strh	r7, [r5, #4]
1000e8b2:	4798      	blx	r3
1000e8b4:	1c30      	adds	r0, r6, #0
1000e8b6:	4b0b      	ldr	r3, [pc, #44]	; (1000e8e4 <gattm_att_set_value_req_handler+0x88>)
1000e8b8:	4798      	blx	r3
1000e8ba:	7833      	ldrb	r3, [r6, #0]
1000e8bc:	20e2      	movs	r0, #226	; 0xe2
1000e8be:	2b00      	cmp	r3, #0
1000e8c0:	d101      	bne.n	1000e8c6 <gattm_att_set_value_req_handler+0x6a>
1000e8c2:	68ab      	ldr	r3, [r5, #8]
1000e8c4:	7898      	ldrb	r0, [r3, #2]
1000e8c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e8c8:	10014e74 	.word	0x10014e74
1000e8cc:	10014b04 	.word	0x10014b04
1000e8d0:	10010357 	.word	0x10010357
1000e8d4:	10014e80 	.word	0x10014e80
1000e8d8:	00000b0d 	.word	0x00000b0d
1000e8dc:	10014af8 	.word	0x10014af8
1000e8e0:	1000d141 	.word	0x1000d141
1000e8e4:	1000d1a5 	.word	0x1000d1a5

1000e8e8 <gattm_att_get_value_req_handler>:
1000e8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e8ea:	b085      	sub	sp, #20
1000e8ec:	9201      	str	r2, [sp, #4]
1000e8ee:	220a      	movs	r2, #10
1000e8f0:	1c04      	adds	r4, r0, #0
1000e8f2:	481d      	ldr	r0, [pc, #116]	; (1000e968 <gattm_att_get_value_req_handler+0x80>)
1000e8f4:	ab02      	add	r3, sp, #8
1000e8f6:	1dde      	adds	r6, r3, #7
1000e8f8:	7002      	strb	r2, [r0, #0]
1000e8fa:	2300      	movs	r3, #0
1000e8fc:	220b      	movs	r2, #11
1000e8fe:	4d1b      	ldr	r5, [pc, #108]	; (1000e96c <gattm_att_get_value_req_handler+0x84>)
1000e900:	1c0f      	adds	r7, r1, #0
1000e902:	8829      	ldrh	r1, [r5, #0]
1000e904:	882d      	ldrh	r5, [r5, #0]
1000e906:	7101      	strb	r1, [r0, #4]
1000e908:	0a2d      	lsrs	r5, r5, #8
1000e90a:	7145      	strb	r5, [r0, #5]
1000e90c:	0a25      	lsrs	r5, r4, #8
1000e90e:	7245      	strb	r5, [r0, #9]
1000e910:	4917      	ldr	r1, [pc, #92]	; (1000e970 <gattm_att_get_value_req_handler+0x88>)
1000e912:	4d18      	ldr	r5, [pc, #96]	; (1000e974 <gattm_att_get_value_req_handler+0x8c>)
1000e914:	7033      	strb	r3, [r6, #0]
1000e916:	7042      	strb	r2, [r0, #1]
1000e918:	7082      	strb	r2, [r0, #2]
1000e91a:	70c3      	strb	r3, [r0, #3]
1000e91c:	8029      	strh	r1, [r5, #0]
1000e91e:	80aa      	strh	r2, [r5, #4]
1000e920:	71c3      	strb	r3, [r0, #7]
1000e922:	3a09      	subs	r2, #9
1000e924:	210a      	movs	r1, #10
1000e926:	4b14      	ldr	r3, [pc, #80]	; (1000e978 <gattm_att_get_value_req_handler+0x90>)
1000e928:	7182      	strb	r2, [r0, #6]
1000e92a:	7204      	strb	r4, [r0, #8]
1000e92c:	4798      	blx	r3
1000e92e:	1c30      	adds	r0, r6, #0
1000e930:	4b12      	ldr	r3, [pc, #72]	; (1000e97c <gattm_att_get_value_req_handler+0x94>)
1000e932:	4798      	blx	r3
1000e934:	7833      	ldrb	r3, [r6, #0]
1000e936:	20e2      	movs	r0, #226	; 0xe2
1000e938:	2b00      	cmp	r3, #0
1000e93a:	d112      	bne.n	1000e962 <gattm_att_get_value_req_handler+0x7a>
1000e93c:	68a9      	ldr	r1, [r5, #8]
1000e93e:	9801      	ldr	r0, [sp, #4]
1000e940:	784d      	ldrb	r5, [r1, #1]
1000e942:	780b      	ldrb	r3, [r1, #0]
1000e944:	78ca      	ldrb	r2, [r1, #3]
1000e946:	022d      	lsls	r5, r5, #8
1000e948:	431d      	orrs	r5, r3
1000e94a:	788b      	ldrb	r3, [r1, #2]
1000e94c:	0212      	lsls	r2, r2, #8
1000e94e:	431a      	orrs	r2, r3
1000e950:	803a      	strh	r2, [r7, #0]
1000e952:	790e      	ldrb	r6, [r1, #4]
1000e954:	4b0a      	ldr	r3, [pc, #40]	; (1000e980 <gattm_att_get_value_req_handler+0x98>)
1000e956:	3105      	adds	r1, #5
1000e958:	4798      	blx	r3
1000e95a:	20e2      	movs	r0, #226	; 0xe2
1000e95c:	42ac      	cmp	r4, r5
1000e95e:	d100      	bne.n	1000e962 <gattm_att_get_value_req_handler+0x7a>
1000e960:	1c30      	adds	r0, r6, #0
1000e962:	b005      	add	sp, #20
1000e964:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e966:	46c0      	nop			; (mov r8, r8)
1000e968:	10014e74 	.word	0x10014e74
1000e96c:	10014b04 	.word	0x10014b04
1000e970:	00000b0b 	.word	0x00000b0b
1000e974:	10014af8 	.word	0x10014af8
1000e978:	1000d141 	.word	0x1000d141
1000e97c:	1000d1a5 	.word	0x1000d1a5
1000e980:	10010357 	.word	0x10010357

1000e984 <htpt_create_db_req_handler>:
1000e984:	b570      	push	{r4, r5, r6, lr}
1000e986:	b086      	sub	sp, #24
1000e988:	ac04      	add	r4, sp, #16
1000e98a:	80a3      	strh	r3, [r4, #4]
1000e98c:	4b0b      	ldr	r3, [pc, #44]	; (1000e9bc <htpt_create_db_req_handler+0x38>)
1000e98e:	8062      	strh	r2, [r4, #2]
1000e990:	1c06      	adds	r6, r0, #0
1000e992:	881a      	ldrh	r2, [r3, #0]
1000e994:	2308      	movs	r3, #8
1000e996:	a80a      	add	r0, sp, #40	; 0x28
1000e998:	8805      	ldrh	r5, [r0, #0]
1000e99a:	a80b      	add	r0, sp, #44	; 0x2c
1000e99c:	7026      	strb	r6, [r4, #0]
1000e99e:	7061      	strb	r1, [r4, #1]
1000e9a0:	80e5      	strh	r5, [r4, #6]
1000e9a2:	7800      	ldrb	r0, [r0, #0]
1000e9a4:	9301      	str	r3, [sp, #4]
1000e9a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000e9a8:	9400      	str	r4, [sp, #0]
1000e9aa:	9302      	str	r3, [sp, #8]
1000e9ac:	b292      	uxth	r2, r2
1000e9ae:	211b      	movs	r1, #27
1000e9b0:	2300      	movs	r3, #0
1000e9b2:	4c03      	ldr	r4, [pc, #12]	; (1000e9c0 <htpt_create_db_req_handler+0x3c>)
1000e9b4:	47a0      	blx	r4
1000e9b6:	b006      	add	sp, #24
1000e9b8:	bd70      	pop	{r4, r5, r6, pc}
1000e9ba:	46c0      	nop			; (mov r8, r8)
1000e9bc:	10014b04 	.word	0x10014b04
1000e9c0:	1000e391 	.word	0x1000e391

1000e9c4 <htpt_enable_req_handler>:
1000e9c4:	221b      	movs	r2, #27
1000e9c6:	b538      	push	{r3, r4, r5, lr}
1000e9c8:	4b0b      	ldr	r3, [pc, #44]	; (1000e9f8 <htpt_enable_req_handler+0x34>)
1000e9ca:	2400      	movs	r4, #0
1000e9cc:	705a      	strb	r2, [r3, #1]
1000e9ce:	709a      	strb	r2, [r3, #2]
1000e9d0:	4a0a      	ldr	r2, [pc, #40]	; (1000e9fc <htpt_enable_req_handler+0x38>)
1000e9d2:	701c      	strb	r4, [r3, #0]
1000e9d4:	8815      	ldrh	r5, [r2, #0]
1000e9d6:	8812      	ldrh	r2, [r2, #0]
1000e9d8:	711d      	strb	r5, [r3, #4]
1000e9da:	0a12      	lsrs	r2, r2, #8
1000e9dc:	715a      	strb	r2, [r3, #5]
1000e9de:	2202      	movs	r2, #2
1000e9e0:	70dc      	strb	r4, [r3, #3]
1000e9e2:	7218      	strb	r0, [r3, #8]
1000e9e4:	7259      	strb	r1, [r3, #9]
1000e9e6:	719a      	strb	r2, [r3, #6]
1000e9e8:	71dc      	strb	r4, [r3, #7]
1000e9ea:	1c18      	adds	r0, r3, #0
1000e9ec:	210a      	movs	r1, #10
1000e9ee:	4b04      	ldr	r3, [pc, #16]	; (1000ea00 <htpt_enable_req_handler+0x3c>)
1000e9f0:	4798      	blx	r3
1000e9f2:	1c20      	adds	r0, r4, #0
1000e9f4:	bd38      	pop	{r3, r4, r5, pc}
1000e9f6:	46c0      	nop			; (mov r8, r8)
1000e9f8:	10014e74 	.word	0x10014e74
1000e9fc:	10014b04 	.word	0x10014b04
1000ea00:	1000d141 	.word	0x1000d141

1000ea04 <htpt_temp_send_req_handler>:
1000ea04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea06:	2502      	movs	r5, #2
1000ea08:	ac08      	add	r4, sp, #32
1000ea0a:	7826      	ldrb	r6, [r4, #0]
1000ea0c:	4c18      	ldr	r4, [pc, #96]	; (1000ea70 <htpt_temp_send_req_handler+0x6c>)
1000ea0e:	4f19      	ldr	r7, [pc, #100]	; (1000ea74 <htpt_temp_send_req_handler+0x70>)
1000ea10:	7025      	strb	r5, [r4, #0]
1000ea12:	3519      	adds	r5, #25
1000ea14:	7065      	strb	r5, [r4, #1]
1000ea16:	70a5      	strb	r5, [r4, #2]
1000ea18:	2500      	movs	r5, #0
1000ea1a:	9301      	str	r3, [sp, #4]
1000ea1c:	883b      	ldrh	r3, [r7, #0]
1000ea1e:	883f      	ldrh	r7, [r7, #0]
1000ea20:	7123      	strb	r3, [r4, #4]
1000ea22:	466b      	mov	r3, sp
1000ea24:	0a3f      	lsrs	r7, r7, #8
1000ea26:	7167      	strb	r7, [r4, #5]
1000ea28:	0a07      	lsrs	r7, r0, #8
1000ea2a:	7220      	strb	r0, [r4, #8]
1000ea2c:	7267      	strb	r7, [r4, #9]
1000ea2e:	0c07      	lsrs	r7, r0, #16
1000ea30:	0e00      	lsrs	r0, r0, #24
1000ea32:	70e5      	strb	r5, [r4, #3]
1000ea34:	72a7      	strb	r7, [r4, #10]
1000ea36:	72e0      	strb	r0, [r4, #11]
1000ea38:	8808      	ldrh	r0, [r1, #0]
1000ea3a:	791b      	ldrb	r3, [r3, #4]
1000ea3c:	7320      	strb	r0, [r4, #12]
1000ea3e:	8808      	ldrh	r0, [r1, #0]
1000ea40:	0a00      	lsrs	r0, r0, #8
1000ea42:	7360      	strb	r0, [r4, #13]
1000ea44:	7888      	ldrb	r0, [r1, #2]
1000ea46:	73a0      	strb	r0, [r4, #14]
1000ea48:	78c8      	ldrb	r0, [r1, #3]
1000ea4a:	73e0      	strb	r0, [r4, #15]
1000ea4c:	7908      	ldrb	r0, [r1, #4]
1000ea4e:	7420      	strb	r0, [r4, #16]
1000ea50:	7948      	ldrb	r0, [r1, #5]
1000ea52:	7460      	strb	r0, [r4, #17]
1000ea54:	7989      	ldrb	r1, [r1, #6]
1000ea56:	7522      	strb	r2, [r4, #20]
1000ea58:	74a1      	strb	r1, [r4, #18]
1000ea5a:	7563      	strb	r3, [r4, #21]
1000ea5c:	2314      	movs	r3, #20
1000ea5e:	1c20      	adds	r0, r4, #0
1000ea60:	71a3      	strb	r3, [r4, #6]
1000ea62:	211c      	movs	r1, #28
1000ea64:	4b04      	ldr	r3, [pc, #16]	; (1000ea78 <htpt_temp_send_req_handler+0x74>)
1000ea66:	7626      	strb	r6, [r4, #24]
1000ea68:	71e5      	strb	r5, [r4, #7]
1000ea6a:	4798      	blx	r3
1000ea6c:	1c28      	adds	r0, r5, #0
1000ea6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ea70:	10014e74 	.word	0x10014e74
1000ea74:	10014b04 	.word	0x10014b04
1000ea78:	1000d141 	.word	0x1000d141

1000ea7c <htpt_enable_rsp_handler>:
1000ea7c:	780b      	ldrb	r3, [r1, #0]
1000ea7e:	7013      	strb	r3, [r2, #0]
1000ea80:	784b      	ldrb	r3, [r1, #1]
1000ea82:	7053      	strb	r3, [r2, #1]
1000ea84:	4770      	bx	lr

1000ea86 <htpt_temp_send_rsp_handler>:
1000ea86:	780b      	ldrb	r3, [r1, #0]
1000ea88:	7013      	strb	r3, [r2, #0]
1000ea8a:	4770      	bx	lr

1000ea8c <htpt_meas_intv_upd_rsp_handler>:
1000ea8c:	780b      	ldrb	r3, [r1, #0]
1000ea8e:	7013      	strb	r3, [r2, #0]
1000ea90:	4770      	bx	lr

1000ea92 <htpt_meas_intv_chg_req_ind_handler>:
1000ea92:	78cb      	ldrb	r3, [r1, #3]
1000ea94:	7889      	ldrb	r1, [r1, #2]
1000ea96:	021b      	lsls	r3, r3, #8
1000ea98:	430b      	orrs	r3, r1
1000ea9a:	8013      	strh	r3, [r2, #0]
1000ea9c:	4770      	bx	lr

1000ea9e <htpt_cfg_indntf_ind_handler>:
1000ea9e:	780b      	ldrb	r3, [r1, #0]
1000eaa0:	7013      	strb	r3, [r2, #0]
1000eaa2:	784b      	ldrb	r3, [r1, #1]
1000eaa4:	7053      	strb	r3, [r2, #1]
1000eaa6:	4770      	bx	lr

1000eaa8 <__gnu_thumb1_case_sqi>:
1000eaa8:	b402      	push	{r1}
1000eaaa:	4671      	mov	r1, lr
1000eaac:	0849      	lsrs	r1, r1, #1
1000eaae:	0049      	lsls	r1, r1, #1
1000eab0:	5609      	ldrsb	r1, [r1, r0]
1000eab2:	0049      	lsls	r1, r1, #1
1000eab4:	448e      	add	lr, r1
1000eab6:	bc02      	pop	{r1}
1000eab8:	4770      	bx	lr
1000eaba:	46c0      	nop			; (mov r8, r8)

1000eabc <__gnu_thumb1_case_uqi>:
1000eabc:	b402      	push	{r1}
1000eabe:	4671      	mov	r1, lr
1000eac0:	0849      	lsrs	r1, r1, #1
1000eac2:	0049      	lsls	r1, r1, #1
1000eac4:	5c09      	ldrb	r1, [r1, r0]
1000eac6:	0049      	lsls	r1, r1, #1
1000eac8:	448e      	add	lr, r1
1000eaca:	bc02      	pop	{r1}
1000eacc:	4770      	bx	lr
1000eace:	46c0      	nop			; (mov r8, r8)

1000ead0 <__aeabi_uidiv>:
1000ead0:	2200      	movs	r2, #0
1000ead2:	0843      	lsrs	r3, r0, #1
1000ead4:	428b      	cmp	r3, r1
1000ead6:	d374      	bcc.n	1000ebc2 <__aeabi_uidiv+0xf2>
1000ead8:	0903      	lsrs	r3, r0, #4
1000eada:	428b      	cmp	r3, r1
1000eadc:	d35f      	bcc.n	1000eb9e <__aeabi_uidiv+0xce>
1000eade:	0a03      	lsrs	r3, r0, #8
1000eae0:	428b      	cmp	r3, r1
1000eae2:	d344      	bcc.n	1000eb6e <__aeabi_uidiv+0x9e>
1000eae4:	0b03      	lsrs	r3, r0, #12
1000eae6:	428b      	cmp	r3, r1
1000eae8:	d328      	bcc.n	1000eb3c <__aeabi_uidiv+0x6c>
1000eaea:	0c03      	lsrs	r3, r0, #16
1000eaec:	428b      	cmp	r3, r1
1000eaee:	d30d      	bcc.n	1000eb0c <__aeabi_uidiv+0x3c>
1000eaf0:	22ff      	movs	r2, #255	; 0xff
1000eaf2:	0209      	lsls	r1, r1, #8
1000eaf4:	ba12      	rev	r2, r2
1000eaf6:	0c03      	lsrs	r3, r0, #16
1000eaf8:	428b      	cmp	r3, r1
1000eafa:	d302      	bcc.n	1000eb02 <__aeabi_uidiv+0x32>
1000eafc:	1212      	asrs	r2, r2, #8
1000eafe:	0209      	lsls	r1, r1, #8
1000eb00:	d065      	beq.n	1000ebce <__aeabi_uidiv+0xfe>
1000eb02:	0b03      	lsrs	r3, r0, #12
1000eb04:	428b      	cmp	r3, r1
1000eb06:	d319      	bcc.n	1000eb3c <__aeabi_uidiv+0x6c>
1000eb08:	e000      	b.n	1000eb0c <__aeabi_uidiv+0x3c>
1000eb0a:	0a09      	lsrs	r1, r1, #8
1000eb0c:	0bc3      	lsrs	r3, r0, #15
1000eb0e:	428b      	cmp	r3, r1
1000eb10:	d301      	bcc.n	1000eb16 <__aeabi_uidiv+0x46>
1000eb12:	03cb      	lsls	r3, r1, #15
1000eb14:	1ac0      	subs	r0, r0, r3
1000eb16:	4152      	adcs	r2, r2
1000eb18:	0b83      	lsrs	r3, r0, #14
1000eb1a:	428b      	cmp	r3, r1
1000eb1c:	d301      	bcc.n	1000eb22 <__aeabi_uidiv+0x52>
1000eb1e:	038b      	lsls	r3, r1, #14
1000eb20:	1ac0      	subs	r0, r0, r3
1000eb22:	4152      	adcs	r2, r2
1000eb24:	0b43      	lsrs	r3, r0, #13
1000eb26:	428b      	cmp	r3, r1
1000eb28:	d301      	bcc.n	1000eb2e <__aeabi_uidiv+0x5e>
1000eb2a:	034b      	lsls	r3, r1, #13
1000eb2c:	1ac0      	subs	r0, r0, r3
1000eb2e:	4152      	adcs	r2, r2
1000eb30:	0b03      	lsrs	r3, r0, #12
1000eb32:	428b      	cmp	r3, r1
1000eb34:	d301      	bcc.n	1000eb3a <__aeabi_uidiv+0x6a>
1000eb36:	030b      	lsls	r3, r1, #12
1000eb38:	1ac0      	subs	r0, r0, r3
1000eb3a:	4152      	adcs	r2, r2
1000eb3c:	0ac3      	lsrs	r3, r0, #11
1000eb3e:	428b      	cmp	r3, r1
1000eb40:	d301      	bcc.n	1000eb46 <__aeabi_uidiv+0x76>
1000eb42:	02cb      	lsls	r3, r1, #11
1000eb44:	1ac0      	subs	r0, r0, r3
1000eb46:	4152      	adcs	r2, r2
1000eb48:	0a83      	lsrs	r3, r0, #10
1000eb4a:	428b      	cmp	r3, r1
1000eb4c:	d301      	bcc.n	1000eb52 <__aeabi_uidiv+0x82>
1000eb4e:	028b      	lsls	r3, r1, #10
1000eb50:	1ac0      	subs	r0, r0, r3
1000eb52:	4152      	adcs	r2, r2
1000eb54:	0a43      	lsrs	r3, r0, #9
1000eb56:	428b      	cmp	r3, r1
1000eb58:	d301      	bcc.n	1000eb5e <__aeabi_uidiv+0x8e>
1000eb5a:	024b      	lsls	r3, r1, #9
1000eb5c:	1ac0      	subs	r0, r0, r3
1000eb5e:	4152      	adcs	r2, r2
1000eb60:	0a03      	lsrs	r3, r0, #8
1000eb62:	428b      	cmp	r3, r1
1000eb64:	d301      	bcc.n	1000eb6a <__aeabi_uidiv+0x9a>
1000eb66:	020b      	lsls	r3, r1, #8
1000eb68:	1ac0      	subs	r0, r0, r3
1000eb6a:	4152      	adcs	r2, r2
1000eb6c:	d2cd      	bcs.n	1000eb0a <__aeabi_uidiv+0x3a>
1000eb6e:	09c3      	lsrs	r3, r0, #7
1000eb70:	428b      	cmp	r3, r1
1000eb72:	d301      	bcc.n	1000eb78 <__aeabi_uidiv+0xa8>
1000eb74:	01cb      	lsls	r3, r1, #7
1000eb76:	1ac0      	subs	r0, r0, r3
1000eb78:	4152      	adcs	r2, r2
1000eb7a:	0983      	lsrs	r3, r0, #6
1000eb7c:	428b      	cmp	r3, r1
1000eb7e:	d301      	bcc.n	1000eb84 <__aeabi_uidiv+0xb4>
1000eb80:	018b      	lsls	r3, r1, #6
1000eb82:	1ac0      	subs	r0, r0, r3
1000eb84:	4152      	adcs	r2, r2
1000eb86:	0943      	lsrs	r3, r0, #5
1000eb88:	428b      	cmp	r3, r1
1000eb8a:	d301      	bcc.n	1000eb90 <__aeabi_uidiv+0xc0>
1000eb8c:	014b      	lsls	r3, r1, #5
1000eb8e:	1ac0      	subs	r0, r0, r3
1000eb90:	4152      	adcs	r2, r2
1000eb92:	0903      	lsrs	r3, r0, #4
1000eb94:	428b      	cmp	r3, r1
1000eb96:	d301      	bcc.n	1000eb9c <__aeabi_uidiv+0xcc>
1000eb98:	010b      	lsls	r3, r1, #4
1000eb9a:	1ac0      	subs	r0, r0, r3
1000eb9c:	4152      	adcs	r2, r2
1000eb9e:	08c3      	lsrs	r3, r0, #3
1000eba0:	428b      	cmp	r3, r1
1000eba2:	d301      	bcc.n	1000eba8 <__aeabi_uidiv+0xd8>
1000eba4:	00cb      	lsls	r3, r1, #3
1000eba6:	1ac0      	subs	r0, r0, r3
1000eba8:	4152      	adcs	r2, r2
1000ebaa:	0883      	lsrs	r3, r0, #2
1000ebac:	428b      	cmp	r3, r1
1000ebae:	d301      	bcc.n	1000ebb4 <__aeabi_uidiv+0xe4>
1000ebb0:	008b      	lsls	r3, r1, #2
1000ebb2:	1ac0      	subs	r0, r0, r3
1000ebb4:	4152      	adcs	r2, r2
1000ebb6:	0843      	lsrs	r3, r0, #1
1000ebb8:	428b      	cmp	r3, r1
1000ebba:	d301      	bcc.n	1000ebc0 <__aeabi_uidiv+0xf0>
1000ebbc:	004b      	lsls	r3, r1, #1
1000ebbe:	1ac0      	subs	r0, r0, r3
1000ebc0:	4152      	adcs	r2, r2
1000ebc2:	1a41      	subs	r1, r0, r1
1000ebc4:	d200      	bcs.n	1000ebc8 <__aeabi_uidiv+0xf8>
1000ebc6:	4601      	mov	r1, r0
1000ebc8:	4152      	adcs	r2, r2
1000ebca:	4610      	mov	r0, r2
1000ebcc:	4770      	bx	lr
1000ebce:	e7ff      	b.n	1000ebd0 <__aeabi_uidiv+0x100>
1000ebd0:	b501      	push	{r0, lr}
1000ebd2:	2000      	movs	r0, #0
1000ebd4:	f000 f806 	bl	1000ebe4 <__aeabi_idiv0>
1000ebd8:	bd02      	pop	{r1, pc}
1000ebda:	46c0      	nop			; (mov r8, r8)

1000ebdc <__aeabi_uidivmod>:
1000ebdc:	2900      	cmp	r1, #0
1000ebde:	d0f7      	beq.n	1000ebd0 <__aeabi_uidiv+0x100>
1000ebe0:	e776      	b.n	1000ead0 <__aeabi_uidiv>
1000ebe2:	4770      	bx	lr

1000ebe4 <__aeabi_idiv0>:
1000ebe4:	4770      	bx	lr
1000ebe6:	46c0      	nop			; (mov r8, r8)

1000ebe8 <__aeabi_f2uiz>:
1000ebe8:	219e      	movs	r1, #158	; 0x9e
1000ebea:	b510      	push	{r4, lr}
1000ebec:	05c9      	lsls	r1, r1, #23
1000ebee:	1c04      	adds	r4, r0, #0
1000ebf0:	f001 f996 	bl	1000ff20 <__aeabi_fcmpge>
1000ebf4:	2800      	cmp	r0, #0
1000ebf6:	d103      	bne.n	1000ec00 <__aeabi_f2uiz+0x18>
1000ebf8:	1c20      	adds	r0, r4, #0
1000ebfa:	f000 fac5 	bl	1000f188 <__aeabi_f2iz>
1000ebfe:	bd10      	pop	{r4, pc}
1000ec00:	219e      	movs	r1, #158	; 0x9e
1000ec02:	1c20      	adds	r0, r4, #0
1000ec04:	05c9      	lsls	r1, r1, #23
1000ec06:	f000 f939 	bl	1000ee7c <__aeabi_fsub>
1000ec0a:	f000 fabd 	bl	1000f188 <__aeabi_f2iz>
1000ec0e:	2380      	movs	r3, #128	; 0x80
1000ec10:	061b      	lsls	r3, r3, #24
1000ec12:	469c      	mov	ip, r3
1000ec14:	4460      	add	r0, ip
1000ec16:	e7f2      	b.n	1000ebfe <__aeabi_f2uiz+0x16>

1000ec18 <__aeabi_d2uiz>:
1000ec18:	b570      	push	{r4, r5, r6, lr}
1000ec1a:	2200      	movs	r2, #0
1000ec1c:	4b0c      	ldr	r3, [pc, #48]	; (1000ec50 <__aeabi_d2uiz+0x38>)
1000ec1e:	0004      	movs	r4, r0
1000ec20:	000d      	movs	r5, r1
1000ec22:	f001 f943 	bl	1000feac <__aeabi_dcmpge>
1000ec26:	2800      	cmp	r0, #0
1000ec28:	d104      	bne.n	1000ec34 <__aeabi_d2uiz+0x1c>
1000ec2a:	0020      	movs	r0, r4
1000ec2c:	0029      	movs	r1, r5
1000ec2e:	f001 f89b 	bl	1000fd68 <__aeabi_d2iz>
1000ec32:	bd70      	pop	{r4, r5, r6, pc}
1000ec34:	4b06      	ldr	r3, [pc, #24]	; (1000ec50 <__aeabi_d2uiz+0x38>)
1000ec36:	2200      	movs	r2, #0
1000ec38:	0020      	movs	r0, r4
1000ec3a:	0029      	movs	r1, r5
1000ec3c:	f000 fd40 	bl	1000f6c0 <__aeabi_dsub>
1000ec40:	f001 f892 	bl	1000fd68 <__aeabi_d2iz>
1000ec44:	2380      	movs	r3, #128	; 0x80
1000ec46:	061b      	lsls	r3, r3, #24
1000ec48:	469c      	mov	ip, r3
1000ec4a:	4460      	add	r0, ip
1000ec4c:	e7f1      	b.n	1000ec32 <__aeabi_d2uiz+0x1a>
1000ec4e:	46c0      	nop			; (mov r8, r8)
1000ec50:	41e00000 	.word	0x41e00000

1000ec54 <__aeabi_fmul>:
1000ec54:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec56:	4657      	mov	r7, sl
1000ec58:	464e      	mov	r6, r9
1000ec5a:	4645      	mov	r5, r8
1000ec5c:	0043      	lsls	r3, r0, #1
1000ec5e:	b4e0      	push	{r5, r6, r7}
1000ec60:	0246      	lsls	r6, r0, #9
1000ec62:	4688      	mov	r8, r1
1000ec64:	0a76      	lsrs	r6, r6, #9
1000ec66:	0e1f      	lsrs	r7, r3, #24
1000ec68:	0fc4      	lsrs	r4, r0, #31
1000ec6a:	2f00      	cmp	r7, #0
1000ec6c:	d047      	beq.n	1000ecfe <__aeabi_fmul+0xaa>
1000ec6e:	2fff      	cmp	r7, #255	; 0xff
1000ec70:	d025      	beq.n	1000ecbe <__aeabi_fmul+0x6a>
1000ec72:	2300      	movs	r3, #0
1000ec74:	2580      	movs	r5, #128	; 0x80
1000ec76:	469a      	mov	sl, r3
1000ec78:	4699      	mov	r9, r3
1000ec7a:	00f6      	lsls	r6, r6, #3
1000ec7c:	04ed      	lsls	r5, r5, #19
1000ec7e:	432e      	orrs	r6, r5
1000ec80:	3f7f      	subs	r7, #127	; 0x7f
1000ec82:	4643      	mov	r3, r8
1000ec84:	4642      	mov	r2, r8
1000ec86:	025d      	lsls	r5, r3, #9
1000ec88:	0fd2      	lsrs	r2, r2, #31
1000ec8a:	005b      	lsls	r3, r3, #1
1000ec8c:	0a6d      	lsrs	r5, r5, #9
1000ec8e:	0e1b      	lsrs	r3, r3, #24
1000ec90:	4690      	mov	r8, r2
1000ec92:	d040      	beq.n	1000ed16 <__aeabi_fmul+0xc2>
1000ec94:	2bff      	cmp	r3, #255	; 0xff
1000ec96:	d039      	beq.n	1000ed0c <__aeabi_fmul+0xb8>
1000ec98:	2280      	movs	r2, #128	; 0x80
1000ec9a:	2000      	movs	r0, #0
1000ec9c:	00ed      	lsls	r5, r5, #3
1000ec9e:	04d2      	lsls	r2, r2, #19
1000eca0:	4315      	orrs	r5, r2
1000eca2:	3b7f      	subs	r3, #127	; 0x7f
1000eca4:	18fb      	adds	r3, r7, r3
1000eca6:	4642      	mov	r2, r8
1000eca8:	4657      	mov	r7, sl
1000ecaa:	1c59      	adds	r1, r3, #1
1000ecac:	4062      	eors	r2, r4
1000ecae:	468c      	mov	ip, r1
1000ecb0:	4307      	orrs	r7, r0
1000ecb2:	2f0f      	cmp	r7, #15
1000ecb4:	d85c      	bhi.n	1000ed70 <__aeabi_fmul+0x11c>
1000ecb6:	496f      	ldr	r1, [pc, #444]	; (1000ee74 <__aeabi_fmul+0x220>)
1000ecb8:	00bf      	lsls	r7, r7, #2
1000ecba:	59c9      	ldr	r1, [r1, r7]
1000ecbc:	468f      	mov	pc, r1
1000ecbe:	2e00      	cmp	r6, #0
1000ecc0:	d145      	bne.n	1000ed4e <__aeabi_fmul+0xfa>
1000ecc2:	2308      	movs	r3, #8
1000ecc4:	469a      	mov	sl, r3
1000ecc6:	3b06      	subs	r3, #6
1000ecc8:	4699      	mov	r9, r3
1000ecca:	e7da      	b.n	1000ec82 <__aeabi_fmul+0x2e>
1000eccc:	4642      	mov	r2, r8
1000ecce:	2802      	cmp	r0, #2
1000ecd0:	d02d      	beq.n	1000ed2e <__aeabi_fmul+0xda>
1000ecd2:	2803      	cmp	r0, #3
1000ecd4:	d100      	bne.n	1000ecd8 <__aeabi_fmul+0x84>
1000ecd6:	e0c3      	b.n	1000ee60 <__aeabi_fmul+0x20c>
1000ecd8:	2801      	cmp	r0, #1
1000ecda:	d000      	beq.n	1000ecde <__aeabi_fmul+0x8a>
1000ecdc:	e0a2      	b.n	1000ee24 <__aeabi_fmul+0x1d0>
1000ecde:	2500      	movs	r5, #0
1000ece0:	2600      	movs	r6, #0
1000ece2:	4002      	ands	r2, r0
1000ece4:	b2d4      	uxtb	r4, r2
1000ece6:	0276      	lsls	r6, r6, #9
1000ece8:	05ed      	lsls	r5, r5, #23
1000ecea:	0a76      	lsrs	r6, r6, #9
1000ecec:	432e      	orrs	r6, r5
1000ecee:	07e4      	lsls	r4, r4, #31
1000ecf0:	4326      	orrs	r6, r4
1000ecf2:	0030      	movs	r0, r6
1000ecf4:	bc1c      	pop	{r2, r3, r4}
1000ecf6:	4690      	mov	r8, r2
1000ecf8:	4699      	mov	r9, r3
1000ecfa:	46a2      	mov	sl, r4
1000ecfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ecfe:	2e00      	cmp	r6, #0
1000ed00:	d11a      	bne.n	1000ed38 <__aeabi_fmul+0xe4>
1000ed02:	2304      	movs	r3, #4
1000ed04:	469a      	mov	sl, r3
1000ed06:	3b03      	subs	r3, #3
1000ed08:	4699      	mov	r9, r3
1000ed0a:	e7ba      	b.n	1000ec82 <__aeabi_fmul+0x2e>
1000ed0c:	002a      	movs	r2, r5
1000ed0e:	1e51      	subs	r1, r2, #1
1000ed10:	418a      	sbcs	r2, r1
1000ed12:	1c90      	adds	r0, r2, #2
1000ed14:	e7c6      	b.n	1000eca4 <__aeabi_fmul+0x50>
1000ed16:	2001      	movs	r0, #1
1000ed18:	2d00      	cmp	r5, #0
1000ed1a:	d0c3      	beq.n	1000eca4 <__aeabi_fmul+0x50>
1000ed1c:	0028      	movs	r0, r5
1000ed1e:	f001 f909 	bl	1000ff34 <__clzsi2>
1000ed22:	1f43      	subs	r3, r0, #5
1000ed24:	3076      	adds	r0, #118	; 0x76
1000ed26:	409d      	lsls	r5, r3
1000ed28:	4243      	negs	r3, r0
1000ed2a:	2000      	movs	r0, #0
1000ed2c:	e7ba      	b.n	1000eca4 <__aeabi_fmul+0x50>
1000ed2e:	2401      	movs	r4, #1
1000ed30:	25ff      	movs	r5, #255	; 0xff
1000ed32:	4014      	ands	r4, r2
1000ed34:	2600      	movs	r6, #0
1000ed36:	e7d6      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000ed38:	0030      	movs	r0, r6
1000ed3a:	f001 f8fb 	bl	1000ff34 <__clzsi2>
1000ed3e:	1f43      	subs	r3, r0, #5
1000ed40:	409e      	lsls	r6, r3
1000ed42:	2300      	movs	r3, #0
1000ed44:	3076      	adds	r0, #118	; 0x76
1000ed46:	4247      	negs	r7, r0
1000ed48:	469a      	mov	sl, r3
1000ed4a:	4699      	mov	r9, r3
1000ed4c:	e799      	b.n	1000ec82 <__aeabi_fmul+0x2e>
1000ed4e:	230c      	movs	r3, #12
1000ed50:	469a      	mov	sl, r3
1000ed52:	3b09      	subs	r3, #9
1000ed54:	4699      	mov	r9, r3
1000ed56:	e794      	b.n	1000ec82 <__aeabi_fmul+0x2e>
1000ed58:	2680      	movs	r6, #128	; 0x80
1000ed5a:	2400      	movs	r4, #0
1000ed5c:	03f6      	lsls	r6, r6, #15
1000ed5e:	25ff      	movs	r5, #255	; 0xff
1000ed60:	e7c1      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000ed62:	0035      	movs	r5, r6
1000ed64:	4648      	mov	r0, r9
1000ed66:	e7b2      	b.n	1000ecce <__aeabi_fmul+0x7a>
1000ed68:	0035      	movs	r5, r6
1000ed6a:	0022      	movs	r2, r4
1000ed6c:	4648      	mov	r0, r9
1000ed6e:	e7ae      	b.n	1000ecce <__aeabi_fmul+0x7a>
1000ed70:	0429      	lsls	r1, r5, #16
1000ed72:	0c09      	lsrs	r1, r1, #16
1000ed74:	0008      	movs	r0, r1
1000ed76:	0c37      	lsrs	r7, r6, #16
1000ed78:	0436      	lsls	r6, r6, #16
1000ed7a:	0c36      	lsrs	r6, r6, #16
1000ed7c:	0c2c      	lsrs	r4, r5, #16
1000ed7e:	4379      	muls	r1, r7
1000ed80:	4370      	muls	r0, r6
1000ed82:	4367      	muls	r7, r4
1000ed84:	4374      	muls	r4, r6
1000ed86:	0c06      	lsrs	r6, r0, #16
1000ed88:	1864      	adds	r4, r4, r1
1000ed8a:	1936      	adds	r6, r6, r4
1000ed8c:	42b1      	cmp	r1, r6
1000ed8e:	d903      	bls.n	1000ed98 <__aeabi_fmul+0x144>
1000ed90:	2180      	movs	r1, #128	; 0x80
1000ed92:	0249      	lsls	r1, r1, #9
1000ed94:	4688      	mov	r8, r1
1000ed96:	4447      	add	r7, r8
1000ed98:	0400      	lsls	r0, r0, #16
1000ed9a:	0c00      	lsrs	r0, r0, #16
1000ed9c:	0431      	lsls	r1, r6, #16
1000ed9e:	1809      	adds	r1, r1, r0
1000eda0:	018d      	lsls	r5, r1, #6
1000eda2:	1e68      	subs	r0, r5, #1
1000eda4:	4185      	sbcs	r5, r0
1000eda6:	0e89      	lsrs	r1, r1, #26
1000eda8:	4329      	orrs	r1, r5
1000edaa:	0c35      	lsrs	r5, r6, #16
1000edac:	19ed      	adds	r5, r5, r7
1000edae:	01ad      	lsls	r5, r5, #6
1000edb0:	430d      	orrs	r5, r1
1000edb2:	0129      	lsls	r1, r5, #4
1000edb4:	d504      	bpl.n	1000edc0 <__aeabi_fmul+0x16c>
1000edb6:	2301      	movs	r3, #1
1000edb8:	0869      	lsrs	r1, r5, #1
1000edba:	401d      	ands	r5, r3
1000edbc:	4663      	mov	r3, ip
1000edbe:	430d      	orrs	r5, r1
1000edc0:	0019      	movs	r1, r3
1000edc2:	317f      	adds	r1, #127	; 0x7f
1000edc4:	2900      	cmp	r1, #0
1000edc6:	dd25      	ble.n	1000ee14 <__aeabi_fmul+0x1c0>
1000edc8:	0768      	lsls	r0, r5, #29
1000edca:	d004      	beq.n	1000edd6 <__aeabi_fmul+0x182>
1000edcc:	200f      	movs	r0, #15
1000edce:	4028      	ands	r0, r5
1000edd0:	2804      	cmp	r0, #4
1000edd2:	d000      	beq.n	1000edd6 <__aeabi_fmul+0x182>
1000edd4:	3504      	adds	r5, #4
1000edd6:	0128      	lsls	r0, r5, #4
1000edd8:	d503      	bpl.n	1000ede2 <__aeabi_fmul+0x18e>
1000edda:	4927      	ldr	r1, [pc, #156]	; (1000ee78 <__aeabi_fmul+0x224>)
1000eddc:	3380      	adds	r3, #128	; 0x80
1000edde:	400d      	ands	r5, r1
1000ede0:	0019      	movs	r1, r3
1000ede2:	29fe      	cmp	r1, #254	; 0xfe
1000ede4:	dca3      	bgt.n	1000ed2e <__aeabi_fmul+0xda>
1000ede6:	2401      	movs	r4, #1
1000ede8:	01ad      	lsls	r5, r5, #6
1000edea:	0a6e      	lsrs	r6, r5, #9
1000edec:	4014      	ands	r4, r2
1000edee:	b2cd      	uxtb	r5, r1
1000edf0:	e779      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000edf2:	2080      	movs	r0, #128	; 0x80
1000edf4:	03c0      	lsls	r0, r0, #15
1000edf6:	4206      	tst	r6, r0
1000edf8:	d007      	beq.n	1000ee0a <__aeabi_fmul+0x1b6>
1000edfa:	4205      	tst	r5, r0
1000edfc:	d105      	bne.n	1000ee0a <__aeabi_fmul+0x1b6>
1000edfe:	4328      	orrs	r0, r5
1000ee00:	0246      	lsls	r6, r0, #9
1000ee02:	0a76      	lsrs	r6, r6, #9
1000ee04:	4644      	mov	r4, r8
1000ee06:	25ff      	movs	r5, #255	; 0xff
1000ee08:	e76d      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000ee0a:	4306      	orrs	r6, r0
1000ee0c:	0276      	lsls	r6, r6, #9
1000ee0e:	0a76      	lsrs	r6, r6, #9
1000ee10:	25ff      	movs	r5, #255	; 0xff
1000ee12:	e768      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000ee14:	2401      	movs	r4, #1
1000ee16:	1a61      	subs	r1, r4, r1
1000ee18:	291b      	cmp	r1, #27
1000ee1a:	dd05      	ble.n	1000ee28 <__aeabi_fmul+0x1d4>
1000ee1c:	4014      	ands	r4, r2
1000ee1e:	2500      	movs	r5, #0
1000ee20:	2600      	movs	r6, #0
1000ee22:	e760      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000ee24:	4663      	mov	r3, ip
1000ee26:	e7cb      	b.n	1000edc0 <__aeabi_fmul+0x16c>
1000ee28:	002e      	movs	r6, r5
1000ee2a:	2320      	movs	r3, #32
1000ee2c:	40ce      	lsrs	r6, r1
1000ee2e:	1a59      	subs	r1, r3, r1
1000ee30:	408d      	lsls	r5, r1
1000ee32:	1e6b      	subs	r3, r5, #1
1000ee34:	419d      	sbcs	r5, r3
1000ee36:	432e      	orrs	r6, r5
1000ee38:	0773      	lsls	r3, r6, #29
1000ee3a:	d004      	beq.n	1000ee46 <__aeabi_fmul+0x1f2>
1000ee3c:	230f      	movs	r3, #15
1000ee3e:	4033      	ands	r3, r6
1000ee40:	2b04      	cmp	r3, #4
1000ee42:	d000      	beq.n	1000ee46 <__aeabi_fmul+0x1f2>
1000ee44:	3604      	adds	r6, #4
1000ee46:	0173      	lsls	r3, r6, #5
1000ee48:	d504      	bpl.n	1000ee54 <__aeabi_fmul+0x200>
1000ee4a:	2401      	movs	r4, #1
1000ee4c:	2501      	movs	r5, #1
1000ee4e:	4014      	ands	r4, r2
1000ee50:	2600      	movs	r6, #0
1000ee52:	e748      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000ee54:	2401      	movs	r4, #1
1000ee56:	01b6      	lsls	r6, r6, #6
1000ee58:	0a76      	lsrs	r6, r6, #9
1000ee5a:	4014      	ands	r4, r2
1000ee5c:	2500      	movs	r5, #0
1000ee5e:	e742      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000ee60:	2680      	movs	r6, #128	; 0x80
1000ee62:	2401      	movs	r4, #1
1000ee64:	03f6      	lsls	r6, r6, #15
1000ee66:	432e      	orrs	r6, r5
1000ee68:	0276      	lsls	r6, r6, #9
1000ee6a:	0a76      	lsrs	r6, r6, #9
1000ee6c:	4014      	ands	r4, r2
1000ee6e:	25ff      	movs	r5, #255	; 0xff
1000ee70:	e739      	b.n	1000ece6 <__aeabi_fmul+0x92>
1000ee72:	46c0      	nop			; (mov r8, r8)
1000ee74:	1001221c 	.word	0x1001221c
1000ee78:	f7ffffff 	.word	0xf7ffffff

1000ee7c <__aeabi_fsub>:
1000ee7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ee7e:	024a      	lsls	r2, r1, #9
1000ee80:	004e      	lsls	r6, r1, #1
1000ee82:	0243      	lsls	r3, r0, #9
1000ee84:	0044      	lsls	r4, r0, #1
1000ee86:	0e24      	lsrs	r4, r4, #24
1000ee88:	0fc5      	lsrs	r5, r0, #31
1000ee8a:	099b      	lsrs	r3, r3, #6
1000ee8c:	0e36      	lsrs	r6, r6, #24
1000ee8e:	0fc9      	lsrs	r1, r1, #31
1000ee90:	0992      	lsrs	r2, r2, #6
1000ee92:	2eff      	cmp	r6, #255	; 0xff
1000ee94:	d100      	bne.n	1000ee98 <__aeabi_fsub+0x1c>
1000ee96:	e083      	b.n	1000efa0 <__aeabi_fsub+0x124>
1000ee98:	2001      	movs	r0, #1
1000ee9a:	4041      	eors	r1, r0
1000ee9c:	1ba0      	subs	r0, r4, r6
1000ee9e:	42a9      	cmp	r1, r5
1000eea0:	d05c      	beq.n	1000ef5c <__aeabi_fsub+0xe0>
1000eea2:	2800      	cmp	r0, #0
1000eea4:	dc00      	bgt.n	1000eea8 <__aeabi_fsub+0x2c>
1000eea6:	e095      	b.n	1000efd4 <__aeabi_fsub+0x158>
1000eea8:	2e00      	cmp	r6, #0
1000eeaa:	d11c      	bne.n	1000eee6 <__aeabi_fsub+0x6a>
1000eeac:	2a00      	cmp	r2, #0
1000eeae:	d000      	beq.n	1000eeb2 <__aeabi_fsub+0x36>
1000eeb0:	e081      	b.n	1000efb6 <__aeabi_fsub+0x13a>
1000eeb2:	075a      	lsls	r2, r3, #29
1000eeb4:	d004      	beq.n	1000eec0 <__aeabi_fsub+0x44>
1000eeb6:	220f      	movs	r2, #15
1000eeb8:	401a      	ands	r2, r3
1000eeba:	2a04      	cmp	r2, #4
1000eebc:	d000      	beq.n	1000eec0 <__aeabi_fsub+0x44>
1000eebe:	3304      	adds	r3, #4
1000eec0:	015a      	lsls	r2, r3, #5
1000eec2:	d53b      	bpl.n	1000ef3c <__aeabi_fsub+0xc0>
1000eec4:	3401      	adds	r4, #1
1000eec6:	2cff      	cmp	r4, #255	; 0xff
1000eec8:	d100      	bne.n	1000eecc <__aeabi_fsub+0x50>
1000eeca:	e091      	b.n	1000eff0 <__aeabi_fsub+0x174>
1000eecc:	2001      	movs	r0, #1
1000eece:	019b      	lsls	r3, r3, #6
1000eed0:	0a5b      	lsrs	r3, r3, #9
1000eed2:	b2e4      	uxtb	r4, r4
1000eed4:	4005      	ands	r5, r0
1000eed6:	025b      	lsls	r3, r3, #9
1000eed8:	05e4      	lsls	r4, r4, #23
1000eeda:	0a5b      	lsrs	r3, r3, #9
1000eedc:	07ed      	lsls	r5, r5, #31
1000eede:	4323      	orrs	r3, r4
1000eee0:	432b      	orrs	r3, r5
1000eee2:	0018      	movs	r0, r3
1000eee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000eee6:	2cff      	cmp	r4, #255	; 0xff
1000eee8:	d0e3      	beq.n	1000eeb2 <__aeabi_fsub+0x36>
1000eeea:	2180      	movs	r1, #128	; 0x80
1000eeec:	04c9      	lsls	r1, r1, #19
1000eeee:	430a      	orrs	r2, r1
1000eef0:	281b      	cmp	r0, #27
1000eef2:	dd00      	ble.n	1000eef6 <__aeabi_fsub+0x7a>
1000eef4:	e090      	b.n	1000f018 <__aeabi_fsub+0x19c>
1000eef6:	0016      	movs	r6, r2
1000eef8:	2120      	movs	r1, #32
1000eefa:	40c6      	lsrs	r6, r0
1000eefc:	1a08      	subs	r0, r1, r0
1000eefe:	4082      	lsls	r2, r0
1000ef00:	1e51      	subs	r1, r2, #1
1000ef02:	418a      	sbcs	r2, r1
1000ef04:	4332      	orrs	r2, r6
1000ef06:	1a9b      	subs	r3, r3, r2
1000ef08:	015a      	lsls	r2, r3, #5
1000ef0a:	d515      	bpl.n	1000ef38 <__aeabi_fsub+0xbc>
1000ef0c:	019b      	lsls	r3, r3, #6
1000ef0e:	099e      	lsrs	r6, r3, #6
1000ef10:	0030      	movs	r0, r6
1000ef12:	f001 f80f 	bl	1000ff34 <__clzsi2>
1000ef16:	3805      	subs	r0, #5
1000ef18:	4086      	lsls	r6, r0
1000ef1a:	4284      	cmp	r4, r0
1000ef1c:	dc6c      	bgt.n	1000eff8 <__aeabi_fsub+0x17c>
1000ef1e:	1b04      	subs	r4, r0, r4
1000ef20:	0033      	movs	r3, r6
1000ef22:	2020      	movs	r0, #32
1000ef24:	3401      	adds	r4, #1
1000ef26:	40e3      	lsrs	r3, r4
1000ef28:	1b04      	subs	r4, r0, r4
1000ef2a:	40a6      	lsls	r6, r4
1000ef2c:	1e72      	subs	r2, r6, #1
1000ef2e:	4196      	sbcs	r6, r2
1000ef30:	2400      	movs	r4, #0
1000ef32:	4333      	orrs	r3, r6
1000ef34:	e7bd      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000ef36:	000d      	movs	r5, r1
1000ef38:	075a      	lsls	r2, r3, #29
1000ef3a:	d1bc      	bne.n	1000eeb6 <__aeabi_fsub+0x3a>
1000ef3c:	08df      	lsrs	r7, r3, #3
1000ef3e:	2301      	movs	r3, #1
1000ef40:	401d      	ands	r5, r3
1000ef42:	2cff      	cmp	r4, #255	; 0xff
1000ef44:	d133      	bne.n	1000efae <__aeabi_fsub+0x132>
1000ef46:	2f00      	cmp	r7, #0
1000ef48:	d100      	bne.n	1000ef4c <__aeabi_fsub+0xd0>
1000ef4a:	e090      	b.n	1000f06e <__aeabi_fsub+0x1f2>
1000ef4c:	2280      	movs	r2, #128	; 0x80
1000ef4e:	03d2      	lsls	r2, r2, #15
1000ef50:	0013      	movs	r3, r2
1000ef52:	433b      	orrs	r3, r7
1000ef54:	025b      	lsls	r3, r3, #9
1000ef56:	0a5b      	lsrs	r3, r3, #9
1000ef58:	24ff      	movs	r4, #255	; 0xff
1000ef5a:	e7bc      	b.n	1000eed6 <__aeabi_fsub+0x5a>
1000ef5c:	2800      	cmp	r0, #0
1000ef5e:	dd4f      	ble.n	1000f000 <__aeabi_fsub+0x184>
1000ef60:	2e00      	cmp	r6, #0
1000ef62:	d02e      	beq.n	1000efc2 <__aeabi_fsub+0x146>
1000ef64:	2cff      	cmp	r4, #255	; 0xff
1000ef66:	d0a4      	beq.n	1000eeb2 <__aeabi_fsub+0x36>
1000ef68:	2580      	movs	r5, #128	; 0x80
1000ef6a:	04ed      	lsls	r5, r5, #19
1000ef6c:	432a      	orrs	r2, r5
1000ef6e:	281b      	cmp	r0, #27
1000ef70:	dd00      	ble.n	1000ef74 <__aeabi_fsub+0xf8>
1000ef72:	e097      	b.n	1000f0a4 <__aeabi_fsub+0x228>
1000ef74:	0016      	movs	r6, r2
1000ef76:	2520      	movs	r5, #32
1000ef78:	40c6      	lsrs	r6, r0
1000ef7a:	1a28      	subs	r0, r5, r0
1000ef7c:	4082      	lsls	r2, r0
1000ef7e:	1e50      	subs	r0, r2, #1
1000ef80:	4182      	sbcs	r2, r0
1000ef82:	4332      	orrs	r2, r6
1000ef84:	189b      	adds	r3, r3, r2
1000ef86:	015a      	lsls	r2, r3, #5
1000ef88:	d5d5      	bpl.n	1000ef36 <__aeabi_fsub+0xba>
1000ef8a:	3401      	adds	r4, #1
1000ef8c:	2cff      	cmp	r4, #255	; 0xff
1000ef8e:	d06d      	beq.n	1000f06c <__aeabi_fsub+0x1f0>
1000ef90:	2201      	movs	r2, #1
1000ef92:	487b      	ldr	r0, [pc, #492]	; (1000f180 <__aeabi_fsub+0x304>)
1000ef94:	401a      	ands	r2, r3
1000ef96:	085b      	lsrs	r3, r3, #1
1000ef98:	4003      	ands	r3, r0
1000ef9a:	4313      	orrs	r3, r2
1000ef9c:	000d      	movs	r5, r1
1000ef9e:	e788      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000efa0:	2a00      	cmp	r2, #0
1000efa2:	d000      	beq.n	1000efa6 <__aeabi_fsub+0x12a>
1000efa4:	e77a      	b.n	1000ee9c <__aeabi_fsub+0x20>
1000efa6:	e777      	b.n	1000ee98 <__aeabi_fsub+0x1c>
1000efa8:	1e03      	subs	r3, r0, #0
1000efaa:	d1c5      	bne.n	1000ef38 <__aeabi_fsub+0xbc>
1000efac:	2500      	movs	r5, #0
1000efae:	027b      	lsls	r3, r7, #9
1000efb0:	0a5b      	lsrs	r3, r3, #9
1000efb2:	b2e4      	uxtb	r4, r4
1000efb4:	e78f      	b.n	1000eed6 <__aeabi_fsub+0x5a>
1000efb6:	3801      	subs	r0, #1
1000efb8:	2800      	cmp	r0, #0
1000efba:	d0a4      	beq.n	1000ef06 <__aeabi_fsub+0x8a>
1000efbc:	2cff      	cmp	r4, #255	; 0xff
1000efbe:	d197      	bne.n	1000eef0 <__aeabi_fsub+0x74>
1000efc0:	e777      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000efc2:	2a00      	cmp	r2, #0
1000efc4:	d100      	bne.n	1000efc8 <__aeabi_fsub+0x14c>
1000efc6:	e774      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000efc8:	3801      	subs	r0, #1
1000efca:	2800      	cmp	r0, #0
1000efcc:	d0da      	beq.n	1000ef84 <__aeabi_fsub+0x108>
1000efce:	2cff      	cmp	r4, #255	; 0xff
1000efd0:	d1cd      	bne.n	1000ef6e <__aeabi_fsub+0xf2>
1000efd2:	e76e      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000efd4:	2800      	cmp	r0, #0
1000efd6:	d121      	bne.n	1000f01c <__aeabi_fsub+0x1a0>
1000efd8:	1c60      	adds	r0, r4, #1
1000efda:	b2c0      	uxtb	r0, r0
1000efdc:	2801      	cmp	r0, #1
1000efde:	dd58      	ble.n	1000f092 <__aeabi_fsub+0x216>
1000efe0:	2780      	movs	r7, #128	; 0x80
1000efe2:	1a9e      	subs	r6, r3, r2
1000efe4:	04ff      	lsls	r7, r7, #19
1000efe6:	4037      	ands	r7, r6
1000efe8:	d02f      	beq.n	1000f04a <__aeabi_fsub+0x1ce>
1000efea:	1ad6      	subs	r6, r2, r3
1000efec:	000d      	movs	r5, r1
1000efee:	e78f      	b.n	1000ef10 <__aeabi_fsub+0x94>
1000eff0:	2301      	movs	r3, #1
1000eff2:	401d      	ands	r5, r3
1000eff4:	2300      	movs	r3, #0
1000eff6:	e76e      	b.n	1000eed6 <__aeabi_fsub+0x5a>
1000eff8:	4b62      	ldr	r3, [pc, #392]	; (1000f184 <__aeabi_fsub+0x308>)
1000effa:	1a24      	subs	r4, r4, r0
1000effc:	4033      	ands	r3, r6
1000effe:	e758      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f000:	2800      	cmp	r0, #0
1000f002:	d151      	bne.n	1000f0a8 <__aeabi_fsub+0x22c>
1000f004:	1c60      	adds	r0, r4, #1
1000f006:	b2c6      	uxtb	r6, r0
1000f008:	2e01      	cmp	r6, #1
1000f00a:	dd33      	ble.n	1000f074 <__aeabi_fsub+0x1f8>
1000f00c:	28ff      	cmp	r0, #255	; 0xff
1000f00e:	d02d      	beq.n	1000f06c <__aeabi_fsub+0x1f0>
1000f010:	189b      	adds	r3, r3, r2
1000f012:	085b      	lsrs	r3, r3, #1
1000f014:	0004      	movs	r4, r0
1000f016:	e74c      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f018:	2201      	movs	r2, #1
1000f01a:	e774      	b.n	1000ef06 <__aeabi_fsub+0x8a>
1000f01c:	2c00      	cmp	r4, #0
1000f01e:	d01a      	beq.n	1000f056 <__aeabi_fsub+0x1da>
1000f020:	2eff      	cmp	r6, #255	; 0xff
1000f022:	d01f      	beq.n	1000f064 <__aeabi_fsub+0x1e8>
1000f024:	2480      	movs	r4, #128	; 0x80
1000f026:	04e4      	lsls	r4, r4, #19
1000f028:	4240      	negs	r0, r0
1000f02a:	4323      	orrs	r3, r4
1000f02c:	281b      	cmp	r0, #27
1000f02e:	dd00      	ble.n	1000f032 <__aeabi_fsub+0x1b6>
1000f030:	e096      	b.n	1000f160 <__aeabi_fsub+0x2e4>
1000f032:	001d      	movs	r5, r3
1000f034:	2420      	movs	r4, #32
1000f036:	40c5      	lsrs	r5, r0
1000f038:	1a20      	subs	r0, r4, r0
1000f03a:	4083      	lsls	r3, r0
1000f03c:	1e58      	subs	r0, r3, #1
1000f03e:	4183      	sbcs	r3, r0
1000f040:	432b      	orrs	r3, r5
1000f042:	1ad3      	subs	r3, r2, r3
1000f044:	0034      	movs	r4, r6
1000f046:	000d      	movs	r5, r1
1000f048:	e75e      	b.n	1000ef08 <__aeabi_fsub+0x8c>
1000f04a:	2e00      	cmp	r6, #0
1000f04c:	d000      	beq.n	1000f050 <__aeabi_fsub+0x1d4>
1000f04e:	e75f      	b.n	1000ef10 <__aeabi_fsub+0x94>
1000f050:	2500      	movs	r5, #0
1000f052:	2400      	movs	r4, #0
1000f054:	e7ab      	b.n	1000efae <__aeabi_fsub+0x132>
1000f056:	2b00      	cmp	r3, #0
1000f058:	d044      	beq.n	1000f0e4 <__aeabi_fsub+0x268>
1000f05a:	43c0      	mvns	r0, r0
1000f05c:	2800      	cmp	r0, #0
1000f05e:	d0f0      	beq.n	1000f042 <__aeabi_fsub+0x1c6>
1000f060:	2eff      	cmp	r6, #255	; 0xff
1000f062:	d1e3      	bne.n	1000f02c <__aeabi_fsub+0x1b0>
1000f064:	0013      	movs	r3, r2
1000f066:	24ff      	movs	r4, #255	; 0xff
1000f068:	000d      	movs	r5, r1
1000f06a:	e722      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f06c:	000d      	movs	r5, r1
1000f06e:	24ff      	movs	r4, #255	; 0xff
1000f070:	2300      	movs	r3, #0
1000f072:	e730      	b.n	1000eed6 <__aeabi_fsub+0x5a>
1000f074:	2c00      	cmp	r4, #0
1000f076:	d15d      	bne.n	1000f134 <__aeabi_fsub+0x2b8>
1000f078:	2b00      	cmp	r3, #0
1000f07a:	d07d      	beq.n	1000f178 <__aeabi_fsub+0x2fc>
1000f07c:	2a00      	cmp	r2, #0
1000f07e:	d100      	bne.n	1000f082 <__aeabi_fsub+0x206>
1000f080:	e717      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f082:	189b      	adds	r3, r3, r2
1000f084:	015a      	lsls	r2, r3, #5
1000f086:	d400      	bmi.n	1000f08a <__aeabi_fsub+0x20e>
1000f088:	e756      	b.n	1000ef38 <__aeabi_fsub+0xbc>
1000f08a:	4a3e      	ldr	r2, [pc, #248]	; (1000f184 <__aeabi_fsub+0x308>)
1000f08c:	0004      	movs	r4, r0
1000f08e:	4013      	ands	r3, r2
1000f090:	e70f      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f092:	2c00      	cmp	r4, #0
1000f094:	d11e      	bne.n	1000f0d4 <__aeabi_fsub+0x258>
1000f096:	2b00      	cmp	r3, #0
1000f098:	d12f      	bne.n	1000f0fa <__aeabi_fsub+0x27e>
1000f09a:	2a00      	cmp	r2, #0
1000f09c:	d065      	beq.n	1000f16a <__aeabi_fsub+0x2ee>
1000f09e:	0013      	movs	r3, r2
1000f0a0:	000d      	movs	r5, r1
1000f0a2:	e706      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f0a4:	2201      	movs	r2, #1
1000f0a6:	e76d      	b.n	1000ef84 <__aeabi_fsub+0x108>
1000f0a8:	2c00      	cmp	r4, #0
1000f0aa:	d11f      	bne.n	1000f0ec <__aeabi_fsub+0x270>
1000f0ac:	2b00      	cmp	r3, #0
1000f0ae:	d059      	beq.n	1000f164 <__aeabi_fsub+0x2e8>
1000f0b0:	43c0      	mvns	r0, r0
1000f0b2:	2800      	cmp	r0, #0
1000f0b4:	d00b      	beq.n	1000f0ce <__aeabi_fsub+0x252>
1000f0b6:	2eff      	cmp	r6, #255	; 0xff
1000f0b8:	d04f      	beq.n	1000f15a <__aeabi_fsub+0x2de>
1000f0ba:	281b      	cmp	r0, #27
1000f0bc:	dc5e      	bgt.n	1000f17c <__aeabi_fsub+0x300>
1000f0be:	001d      	movs	r5, r3
1000f0c0:	2420      	movs	r4, #32
1000f0c2:	40c5      	lsrs	r5, r0
1000f0c4:	1a20      	subs	r0, r4, r0
1000f0c6:	4083      	lsls	r3, r0
1000f0c8:	1e58      	subs	r0, r3, #1
1000f0ca:	4183      	sbcs	r3, r0
1000f0cc:	432b      	orrs	r3, r5
1000f0ce:	189b      	adds	r3, r3, r2
1000f0d0:	0034      	movs	r4, r6
1000f0d2:	e758      	b.n	1000ef86 <__aeabi_fsub+0x10a>
1000f0d4:	2b00      	cmp	r3, #0
1000f0d6:	d11c      	bne.n	1000f112 <__aeabi_fsub+0x296>
1000f0d8:	2a00      	cmp	r2, #0
1000f0da:	d049      	beq.n	1000f170 <__aeabi_fsub+0x2f4>
1000f0dc:	0013      	movs	r3, r2
1000f0de:	000d      	movs	r5, r1
1000f0e0:	24ff      	movs	r4, #255	; 0xff
1000f0e2:	e6e6      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f0e4:	0013      	movs	r3, r2
1000f0e6:	0034      	movs	r4, r6
1000f0e8:	000d      	movs	r5, r1
1000f0ea:	e6e2      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f0ec:	2eff      	cmp	r6, #255	; 0xff
1000f0ee:	d034      	beq.n	1000f15a <__aeabi_fsub+0x2de>
1000f0f0:	2480      	movs	r4, #128	; 0x80
1000f0f2:	04e4      	lsls	r4, r4, #19
1000f0f4:	4240      	negs	r0, r0
1000f0f6:	4323      	orrs	r3, r4
1000f0f8:	e7df      	b.n	1000f0ba <__aeabi_fsub+0x23e>
1000f0fa:	2a00      	cmp	r2, #0
1000f0fc:	d100      	bne.n	1000f100 <__aeabi_fsub+0x284>
1000f0fe:	e6d8      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f100:	2780      	movs	r7, #128	; 0x80
1000f102:	1a98      	subs	r0, r3, r2
1000f104:	04ff      	lsls	r7, r7, #19
1000f106:	4007      	ands	r7, r0
1000f108:	d100      	bne.n	1000f10c <__aeabi_fsub+0x290>
1000f10a:	e74d      	b.n	1000efa8 <__aeabi_fsub+0x12c>
1000f10c:	1ad3      	subs	r3, r2, r3
1000f10e:	000d      	movs	r5, r1
1000f110:	e6cf      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f112:	24ff      	movs	r4, #255	; 0xff
1000f114:	2a00      	cmp	r2, #0
1000f116:	d100      	bne.n	1000f11a <__aeabi_fsub+0x29e>
1000f118:	e6cb      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f11a:	2080      	movs	r0, #128	; 0x80
1000f11c:	08db      	lsrs	r3, r3, #3
1000f11e:	03c0      	lsls	r0, r0, #15
1000f120:	4203      	tst	r3, r0
1000f122:	d004      	beq.n	1000f12e <__aeabi_fsub+0x2b2>
1000f124:	08d2      	lsrs	r2, r2, #3
1000f126:	4202      	tst	r2, r0
1000f128:	d101      	bne.n	1000f12e <__aeabi_fsub+0x2b2>
1000f12a:	0013      	movs	r3, r2
1000f12c:	000d      	movs	r5, r1
1000f12e:	00db      	lsls	r3, r3, #3
1000f130:	24ff      	movs	r4, #255	; 0xff
1000f132:	e6be      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f134:	2b00      	cmp	r3, #0
1000f136:	d010      	beq.n	1000f15a <__aeabi_fsub+0x2de>
1000f138:	24ff      	movs	r4, #255	; 0xff
1000f13a:	2a00      	cmp	r2, #0
1000f13c:	d100      	bne.n	1000f140 <__aeabi_fsub+0x2c4>
1000f13e:	e6b8      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f140:	2080      	movs	r0, #128	; 0x80
1000f142:	08db      	lsrs	r3, r3, #3
1000f144:	03c0      	lsls	r0, r0, #15
1000f146:	4203      	tst	r3, r0
1000f148:	d003      	beq.n	1000f152 <__aeabi_fsub+0x2d6>
1000f14a:	08d2      	lsrs	r2, r2, #3
1000f14c:	4202      	tst	r2, r0
1000f14e:	d100      	bne.n	1000f152 <__aeabi_fsub+0x2d6>
1000f150:	0013      	movs	r3, r2
1000f152:	00db      	lsls	r3, r3, #3
1000f154:	000d      	movs	r5, r1
1000f156:	24ff      	movs	r4, #255	; 0xff
1000f158:	e6ab      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f15a:	0013      	movs	r3, r2
1000f15c:	24ff      	movs	r4, #255	; 0xff
1000f15e:	e6a8      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f160:	2301      	movs	r3, #1
1000f162:	e76e      	b.n	1000f042 <__aeabi_fsub+0x1c6>
1000f164:	0013      	movs	r3, r2
1000f166:	0034      	movs	r4, r6
1000f168:	e6a3      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f16a:	2700      	movs	r7, #0
1000f16c:	2500      	movs	r5, #0
1000f16e:	e71e      	b.n	1000efae <__aeabi_fsub+0x132>
1000f170:	2780      	movs	r7, #128	; 0x80
1000f172:	2500      	movs	r5, #0
1000f174:	03ff      	lsls	r7, r7, #15
1000f176:	e6e9      	b.n	1000ef4c <__aeabi_fsub+0xd0>
1000f178:	0013      	movs	r3, r2
1000f17a:	e69a      	b.n	1000eeb2 <__aeabi_fsub+0x36>
1000f17c:	2301      	movs	r3, #1
1000f17e:	e7a6      	b.n	1000f0ce <__aeabi_fsub+0x252>
1000f180:	7dffffff 	.word	0x7dffffff
1000f184:	fbffffff 	.word	0xfbffffff

1000f188 <__aeabi_f2iz>:
1000f188:	0243      	lsls	r3, r0, #9
1000f18a:	0a59      	lsrs	r1, r3, #9
1000f18c:	0043      	lsls	r3, r0, #1
1000f18e:	0fc2      	lsrs	r2, r0, #31
1000f190:	0e1b      	lsrs	r3, r3, #24
1000f192:	2000      	movs	r0, #0
1000f194:	2b7e      	cmp	r3, #126	; 0x7e
1000f196:	dd0e      	ble.n	1000f1b6 <__aeabi_f2iz+0x2e>
1000f198:	2b9d      	cmp	r3, #157	; 0x9d
1000f19a:	dc0d      	bgt.n	1000f1b8 <__aeabi_f2iz+0x30>
1000f19c:	2080      	movs	r0, #128	; 0x80
1000f19e:	0400      	lsls	r0, r0, #16
1000f1a0:	4301      	orrs	r1, r0
1000f1a2:	2b95      	cmp	r3, #149	; 0x95
1000f1a4:	dc0b      	bgt.n	1000f1be <__aeabi_f2iz+0x36>
1000f1a6:	2096      	movs	r0, #150	; 0x96
1000f1a8:	1ac3      	subs	r3, r0, r3
1000f1aa:	40d9      	lsrs	r1, r3
1000f1ac:	000b      	movs	r3, r1
1000f1ae:	4258      	negs	r0, r3
1000f1b0:	2a00      	cmp	r2, #0
1000f1b2:	d100      	bne.n	1000f1b6 <__aeabi_f2iz+0x2e>
1000f1b4:	0018      	movs	r0, r3
1000f1b6:	4770      	bx	lr
1000f1b8:	4b03      	ldr	r3, [pc, #12]	; (1000f1c8 <__aeabi_f2iz+0x40>)
1000f1ba:	18d0      	adds	r0, r2, r3
1000f1bc:	e7fb      	b.n	1000f1b6 <__aeabi_f2iz+0x2e>
1000f1be:	3b96      	subs	r3, #150	; 0x96
1000f1c0:	4099      	lsls	r1, r3
1000f1c2:	000b      	movs	r3, r1
1000f1c4:	e7f3      	b.n	1000f1ae <__aeabi_f2iz+0x26>
1000f1c6:	46c0      	nop			; (mov r8, r8)
1000f1c8:	7fffffff 	.word	0x7fffffff

1000f1cc <__aeabi_dmul>:
1000f1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f1ce:	465f      	mov	r7, fp
1000f1d0:	4656      	mov	r6, sl
1000f1d2:	464d      	mov	r5, r9
1000f1d4:	4644      	mov	r4, r8
1000f1d6:	b4f0      	push	{r4, r5, r6, r7}
1000f1d8:	030d      	lsls	r5, r1, #12
1000f1da:	4699      	mov	r9, r3
1000f1dc:	004e      	lsls	r6, r1, #1
1000f1de:	0b2b      	lsrs	r3, r5, #12
1000f1e0:	b087      	sub	sp, #28
1000f1e2:	0007      	movs	r7, r0
1000f1e4:	4692      	mov	sl, r2
1000f1e6:	4680      	mov	r8, r0
1000f1e8:	469b      	mov	fp, r3
1000f1ea:	0d76      	lsrs	r6, r6, #21
1000f1ec:	0fcc      	lsrs	r4, r1, #31
1000f1ee:	2e00      	cmp	r6, #0
1000f1f0:	d069      	beq.n	1000f2c6 <__aeabi_dmul+0xfa>
1000f1f2:	4b6d      	ldr	r3, [pc, #436]	; (1000f3a8 <__aeabi_dmul+0x1dc>)
1000f1f4:	429e      	cmp	r6, r3
1000f1f6:	d035      	beq.n	1000f264 <__aeabi_dmul+0x98>
1000f1f8:	465b      	mov	r3, fp
1000f1fa:	2280      	movs	r2, #128	; 0x80
1000f1fc:	00dd      	lsls	r5, r3, #3
1000f1fe:	0412      	lsls	r2, r2, #16
1000f200:	0f43      	lsrs	r3, r0, #29
1000f202:	4313      	orrs	r3, r2
1000f204:	432b      	orrs	r3, r5
1000f206:	469b      	mov	fp, r3
1000f208:	00c3      	lsls	r3, r0, #3
1000f20a:	4698      	mov	r8, r3
1000f20c:	4b67      	ldr	r3, [pc, #412]	; (1000f3ac <__aeabi_dmul+0x1e0>)
1000f20e:	2700      	movs	r7, #0
1000f210:	469c      	mov	ip, r3
1000f212:	2300      	movs	r3, #0
1000f214:	4466      	add	r6, ip
1000f216:	9301      	str	r3, [sp, #4]
1000f218:	464a      	mov	r2, r9
1000f21a:	0315      	lsls	r5, r2, #12
1000f21c:	0050      	lsls	r0, r2, #1
1000f21e:	0fd2      	lsrs	r2, r2, #31
1000f220:	4653      	mov	r3, sl
1000f222:	0b2d      	lsrs	r5, r5, #12
1000f224:	0d40      	lsrs	r0, r0, #21
1000f226:	4691      	mov	r9, r2
1000f228:	d100      	bne.n	1000f22c <__aeabi_dmul+0x60>
1000f22a:	e076      	b.n	1000f31a <__aeabi_dmul+0x14e>
1000f22c:	4a5e      	ldr	r2, [pc, #376]	; (1000f3a8 <__aeabi_dmul+0x1dc>)
1000f22e:	4290      	cmp	r0, r2
1000f230:	d06c      	beq.n	1000f30c <__aeabi_dmul+0x140>
1000f232:	2280      	movs	r2, #128	; 0x80
1000f234:	0f5b      	lsrs	r3, r3, #29
1000f236:	0412      	lsls	r2, r2, #16
1000f238:	4313      	orrs	r3, r2
1000f23a:	4a5c      	ldr	r2, [pc, #368]	; (1000f3ac <__aeabi_dmul+0x1e0>)
1000f23c:	00ed      	lsls	r5, r5, #3
1000f23e:	4694      	mov	ip, r2
1000f240:	431d      	orrs	r5, r3
1000f242:	4653      	mov	r3, sl
1000f244:	2200      	movs	r2, #0
1000f246:	00db      	lsls	r3, r3, #3
1000f248:	4460      	add	r0, ip
1000f24a:	4649      	mov	r1, r9
1000f24c:	1836      	adds	r6, r6, r0
1000f24e:	1c70      	adds	r0, r6, #1
1000f250:	4061      	eors	r1, r4
1000f252:	9002      	str	r0, [sp, #8]
1000f254:	4317      	orrs	r7, r2
1000f256:	2f0f      	cmp	r7, #15
1000f258:	d900      	bls.n	1000f25c <__aeabi_dmul+0x90>
1000f25a:	e0af      	b.n	1000f3bc <__aeabi_dmul+0x1f0>
1000f25c:	4854      	ldr	r0, [pc, #336]	; (1000f3b0 <__aeabi_dmul+0x1e4>)
1000f25e:	00bf      	lsls	r7, r7, #2
1000f260:	59c7      	ldr	r7, [r0, r7]
1000f262:	46bf      	mov	pc, r7
1000f264:	465b      	mov	r3, fp
1000f266:	431f      	orrs	r7, r3
1000f268:	d000      	beq.n	1000f26c <__aeabi_dmul+0xa0>
1000f26a:	e088      	b.n	1000f37e <__aeabi_dmul+0x1b2>
1000f26c:	2300      	movs	r3, #0
1000f26e:	469b      	mov	fp, r3
1000f270:	4698      	mov	r8, r3
1000f272:	3302      	adds	r3, #2
1000f274:	2708      	movs	r7, #8
1000f276:	9301      	str	r3, [sp, #4]
1000f278:	e7ce      	b.n	1000f218 <__aeabi_dmul+0x4c>
1000f27a:	4649      	mov	r1, r9
1000f27c:	2a02      	cmp	r2, #2
1000f27e:	d06a      	beq.n	1000f356 <__aeabi_dmul+0x18a>
1000f280:	2a03      	cmp	r2, #3
1000f282:	d100      	bne.n	1000f286 <__aeabi_dmul+0xba>
1000f284:	e209      	b.n	1000f69a <__aeabi_dmul+0x4ce>
1000f286:	2a01      	cmp	r2, #1
1000f288:	d000      	beq.n	1000f28c <__aeabi_dmul+0xc0>
1000f28a:	e1bb      	b.n	1000f604 <__aeabi_dmul+0x438>
1000f28c:	4011      	ands	r1, r2
1000f28e:	2200      	movs	r2, #0
1000f290:	2300      	movs	r3, #0
1000f292:	2500      	movs	r5, #0
1000f294:	4690      	mov	r8, r2
1000f296:	b2cc      	uxtb	r4, r1
1000f298:	2100      	movs	r1, #0
1000f29a:	032d      	lsls	r5, r5, #12
1000f29c:	0d0a      	lsrs	r2, r1, #20
1000f29e:	0512      	lsls	r2, r2, #20
1000f2a0:	0b2d      	lsrs	r5, r5, #12
1000f2a2:	4315      	orrs	r5, r2
1000f2a4:	4a43      	ldr	r2, [pc, #268]	; (1000f3b4 <__aeabi_dmul+0x1e8>)
1000f2a6:	051b      	lsls	r3, r3, #20
1000f2a8:	4015      	ands	r5, r2
1000f2aa:	431d      	orrs	r5, r3
1000f2ac:	006d      	lsls	r5, r5, #1
1000f2ae:	07e4      	lsls	r4, r4, #31
1000f2b0:	086d      	lsrs	r5, r5, #1
1000f2b2:	4325      	orrs	r5, r4
1000f2b4:	4640      	mov	r0, r8
1000f2b6:	0029      	movs	r1, r5
1000f2b8:	b007      	add	sp, #28
1000f2ba:	bc3c      	pop	{r2, r3, r4, r5}
1000f2bc:	4690      	mov	r8, r2
1000f2be:	4699      	mov	r9, r3
1000f2c0:	46a2      	mov	sl, r4
1000f2c2:	46ab      	mov	fp, r5
1000f2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2c6:	4303      	orrs	r3, r0
1000f2c8:	d052      	beq.n	1000f370 <__aeabi_dmul+0x1a4>
1000f2ca:	465b      	mov	r3, fp
1000f2cc:	2b00      	cmp	r3, #0
1000f2ce:	d100      	bne.n	1000f2d2 <__aeabi_dmul+0x106>
1000f2d0:	e18a      	b.n	1000f5e8 <__aeabi_dmul+0x41c>
1000f2d2:	4658      	mov	r0, fp
1000f2d4:	f000 fe2e 	bl	1000ff34 <__clzsi2>
1000f2d8:	0003      	movs	r3, r0
1000f2da:	3b0b      	subs	r3, #11
1000f2dc:	2b1c      	cmp	r3, #28
1000f2de:	dd00      	ble.n	1000f2e2 <__aeabi_dmul+0x116>
1000f2e0:	e17b      	b.n	1000f5da <__aeabi_dmul+0x40e>
1000f2e2:	221d      	movs	r2, #29
1000f2e4:	1ad3      	subs	r3, r2, r3
1000f2e6:	003a      	movs	r2, r7
1000f2e8:	0001      	movs	r1, r0
1000f2ea:	465d      	mov	r5, fp
1000f2ec:	40da      	lsrs	r2, r3
1000f2ee:	3908      	subs	r1, #8
1000f2f0:	408d      	lsls	r5, r1
1000f2f2:	0013      	movs	r3, r2
1000f2f4:	408f      	lsls	r7, r1
1000f2f6:	432b      	orrs	r3, r5
1000f2f8:	469b      	mov	fp, r3
1000f2fa:	46b8      	mov	r8, r7
1000f2fc:	4b2e      	ldr	r3, [pc, #184]	; (1000f3b8 <__aeabi_dmul+0x1ec>)
1000f2fe:	2700      	movs	r7, #0
1000f300:	469c      	mov	ip, r3
1000f302:	2300      	movs	r3, #0
1000f304:	4460      	add	r0, ip
1000f306:	4246      	negs	r6, r0
1000f308:	9301      	str	r3, [sp, #4]
1000f30a:	e785      	b.n	1000f218 <__aeabi_dmul+0x4c>
1000f30c:	4652      	mov	r2, sl
1000f30e:	432a      	orrs	r2, r5
1000f310:	d12c      	bne.n	1000f36c <__aeabi_dmul+0x1a0>
1000f312:	2500      	movs	r5, #0
1000f314:	2300      	movs	r3, #0
1000f316:	2202      	movs	r2, #2
1000f318:	e797      	b.n	1000f24a <__aeabi_dmul+0x7e>
1000f31a:	4652      	mov	r2, sl
1000f31c:	432a      	orrs	r2, r5
1000f31e:	d021      	beq.n	1000f364 <__aeabi_dmul+0x198>
1000f320:	2d00      	cmp	r5, #0
1000f322:	d100      	bne.n	1000f326 <__aeabi_dmul+0x15a>
1000f324:	e154      	b.n	1000f5d0 <__aeabi_dmul+0x404>
1000f326:	0028      	movs	r0, r5
1000f328:	f000 fe04 	bl	1000ff34 <__clzsi2>
1000f32c:	0003      	movs	r3, r0
1000f32e:	3b0b      	subs	r3, #11
1000f330:	2b1c      	cmp	r3, #28
1000f332:	dd00      	ble.n	1000f336 <__aeabi_dmul+0x16a>
1000f334:	e146      	b.n	1000f5c4 <__aeabi_dmul+0x3f8>
1000f336:	211d      	movs	r1, #29
1000f338:	1acb      	subs	r3, r1, r3
1000f33a:	4651      	mov	r1, sl
1000f33c:	0002      	movs	r2, r0
1000f33e:	40d9      	lsrs	r1, r3
1000f340:	4653      	mov	r3, sl
1000f342:	3a08      	subs	r2, #8
1000f344:	4095      	lsls	r5, r2
1000f346:	4093      	lsls	r3, r2
1000f348:	430d      	orrs	r5, r1
1000f34a:	4a1b      	ldr	r2, [pc, #108]	; (1000f3b8 <__aeabi_dmul+0x1ec>)
1000f34c:	4694      	mov	ip, r2
1000f34e:	4460      	add	r0, ip
1000f350:	4240      	negs	r0, r0
1000f352:	2200      	movs	r2, #0
1000f354:	e779      	b.n	1000f24a <__aeabi_dmul+0x7e>
1000f356:	2401      	movs	r4, #1
1000f358:	2200      	movs	r2, #0
1000f35a:	400c      	ands	r4, r1
1000f35c:	4b12      	ldr	r3, [pc, #72]	; (1000f3a8 <__aeabi_dmul+0x1dc>)
1000f35e:	2500      	movs	r5, #0
1000f360:	4690      	mov	r8, r2
1000f362:	e799      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f364:	2500      	movs	r5, #0
1000f366:	2300      	movs	r3, #0
1000f368:	2201      	movs	r2, #1
1000f36a:	e76e      	b.n	1000f24a <__aeabi_dmul+0x7e>
1000f36c:	2203      	movs	r2, #3
1000f36e:	e76c      	b.n	1000f24a <__aeabi_dmul+0x7e>
1000f370:	2300      	movs	r3, #0
1000f372:	469b      	mov	fp, r3
1000f374:	4698      	mov	r8, r3
1000f376:	3301      	adds	r3, #1
1000f378:	2704      	movs	r7, #4
1000f37a:	9301      	str	r3, [sp, #4]
1000f37c:	e74c      	b.n	1000f218 <__aeabi_dmul+0x4c>
1000f37e:	2303      	movs	r3, #3
1000f380:	270c      	movs	r7, #12
1000f382:	9301      	str	r3, [sp, #4]
1000f384:	e748      	b.n	1000f218 <__aeabi_dmul+0x4c>
1000f386:	2300      	movs	r3, #0
1000f388:	2580      	movs	r5, #128	; 0x80
1000f38a:	4698      	mov	r8, r3
1000f38c:	2400      	movs	r4, #0
1000f38e:	032d      	lsls	r5, r5, #12
1000f390:	4b05      	ldr	r3, [pc, #20]	; (1000f3a8 <__aeabi_dmul+0x1dc>)
1000f392:	e781      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f394:	465d      	mov	r5, fp
1000f396:	4643      	mov	r3, r8
1000f398:	9a01      	ldr	r2, [sp, #4]
1000f39a:	e76f      	b.n	1000f27c <__aeabi_dmul+0xb0>
1000f39c:	465d      	mov	r5, fp
1000f39e:	4643      	mov	r3, r8
1000f3a0:	0021      	movs	r1, r4
1000f3a2:	9a01      	ldr	r2, [sp, #4]
1000f3a4:	e76a      	b.n	1000f27c <__aeabi_dmul+0xb0>
1000f3a6:	46c0      	nop			; (mov r8, r8)
1000f3a8:	000007ff 	.word	0x000007ff
1000f3ac:	fffffc01 	.word	0xfffffc01
1000f3b0:	1001225c 	.word	0x1001225c
1000f3b4:	800fffff 	.word	0x800fffff
1000f3b8:	000003f3 	.word	0x000003f3
1000f3bc:	4642      	mov	r2, r8
1000f3be:	0c12      	lsrs	r2, r2, #16
1000f3c0:	4691      	mov	r9, r2
1000f3c2:	0c1a      	lsrs	r2, r3, #16
1000f3c4:	4694      	mov	ip, r2
1000f3c6:	4642      	mov	r2, r8
1000f3c8:	0417      	lsls	r7, r2, #16
1000f3ca:	464a      	mov	r2, r9
1000f3cc:	041b      	lsls	r3, r3, #16
1000f3ce:	0c1b      	lsrs	r3, r3, #16
1000f3d0:	435a      	muls	r2, r3
1000f3d2:	4660      	mov	r0, ip
1000f3d4:	4690      	mov	r8, r2
1000f3d6:	464a      	mov	r2, r9
1000f3d8:	4342      	muls	r2, r0
1000f3da:	0010      	movs	r0, r2
1000f3dc:	9203      	str	r2, [sp, #12]
1000f3de:	4662      	mov	r2, ip
1000f3e0:	001c      	movs	r4, r3
1000f3e2:	0c3f      	lsrs	r7, r7, #16
1000f3e4:	437a      	muls	r2, r7
1000f3e6:	437c      	muls	r4, r7
1000f3e8:	4442      	add	r2, r8
1000f3ea:	9201      	str	r2, [sp, #4]
1000f3ec:	0c22      	lsrs	r2, r4, #16
1000f3ee:	4692      	mov	sl, r2
1000f3f0:	9a01      	ldr	r2, [sp, #4]
1000f3f2:	4452      	add	r2, sl
1000f3f4:	4590      	cmp	r8, r2
1000f3f6:	d906      	bls.n	1000f406 <__aeabi_dmul+0x23a>
1000f3f8:	4682      	mov	sl, r0
1000f3fa:	2080      	movs	r0, #128	; 0x80
1000f3fc:	0240      	lsls	r0, r0, #9
1000f3fe:	4680      	mov	r8, r0
1000f400:	44c2      	add	sl, r8
1000f402:	4650      	mov	r0, sl
1000f404:	9003      	str	r0, [sp, #12]
1000f406:	0c10      	lsrs	r0, r2, #16
1000f408:	9004      	str	r0, [sp, #16]
1000f40a:	4648      	mov	r0, r9
1000f40c:	0424      	lsls	r4, r4, #16
1000f40e:	0c24      	lsrs	r4, r4, #16
1000f410:	0412      	lsls	r2, r2, #16
1000f412:	1912      	adds	r2, r2, r4
1000f414:	9205      	str	r2, [sp, #20]
1000f416:	0c2a      	lsrs	r2, r5, #16
1000f418:	042d      	lsls	r5, r5, #16
1000f41a:	0c2d      	lsrs	r5, r5, #16
1000f41c:	4368      	muls	r0, r5
1000f41e:	002c      	movs	r4, r5
1000f420:	4682      	mov	sl, r0
1000f422:	4648      	mov	r0, r9
1000f424:	437c      	muls	r4, r7
1000f426:	4350      	muls	r0, r2
1000f428:	4681      	mov	r9, r0
1000f42a:	0c20      	lsrs	r0, r4, #16
1000f42c:	4680      	mov	r8, r0
1000f42e:	4357      	muls	r7, r2
1000f430:	4457      	add	r7, sl
1000f432:	4447      	add	r7, r8
1000f434:	45ba      	cmp	sl, r7
1000f436:	d903      	bls.n	1000f440 <__aeabi_dmul+0x274>
1000f438:	2080      	movs	r0, #128	; 0x80
1000f43a:	0240      	lsls	r0, r0, #9
1000f43c:	4680      	mov	r8, r0
1000f43e:	44c1      	add	r9, r8
1000f440:	0c38      	lsrs	r0, r7, #16
1000f442:	043f      	lsls	r7, r7, #16
1000f444:	46b8      	mov	r8, r7
1000f446:	4448      	add	r0, r9
1000f448:	0424      	lsls	r4, r4, #16
1000f44a:	0c24      	lsrs	r4, r4, #16
1000f44c:	9001      	str	r0, [sp, #4]
1000f44e:	9804      	ldr	r0, [sp, #16]
1000f450:	44a0      	add	r8, r4
1000f452:	4440      	add	r0, r8
1000f454:	9004      	str	r0, [sp, #16]
1000f456:	4658      	mov	r0, fp
1000f458:	0c00      	lsrs	r0, r0, #16
1000f45a:	4681      	mov	r9, r0
1000f45c:	4658      	mov	r0, fp
1000f45e:	0404      	lsls	r4, r0, #16
1000f460:	0c20      	lsrs	r0, r4, #16
1000f462:	4682      	mov	sl, r0
1000f464:	0007      	movs	r7, r0
1000f466:	4648      	mov	r0, r9
1000f468:	435f      	muls	r7, r3
1000f46a:	464c      	mov	r4, r9
1000f46c:	4343      	muls	r3, r0
1000f46e:	4660      	mov	r0, ip
1000f470:	4360      	muls	r0, r4
1000f472:	4664      	mov	r4, ip
1000f474:	4683      	mov	fp, r0
1000f476:	4650      	mov	r0, sl
1000f478:	4344      	muls	r4, r0
1000f47a:	0c38      	lsrs	r0, r7, #16
1000f47c:	4684      	mov	ip, r0
1000f47e:	18e4      	adds	r4, r4, r3
1000f480:	4464      	add	r4, ip
1000f482:	42a3      	cmp	r3, r4
1000f484:	d903      	bls.n	1000f48e <__aeabi_dmul+0x2c2>
1000f486:	2380      	movs	r3, #128	; 0x80
1000f488:	025b      	lsls	r3, r3, #9
1000f48a:	469c      	mov	ip, r3
1000f48c:	44e3      	add	fp, ip
1000f48e:	4648      	mov	r0, r9
1000f490:	043f      	lsls	r7, r7, #16
1000f492:	0c23      	lsrs	r3, r4, #16
1000f494:	0c3f      	lsrs	r7, r7, #16
1000f496:	0424      	lsls	r4, r4, #16
1000f498:	19e4      	adds	r4, r4, r7
1000f49a:	4657      	mov	r7, sl
1000f49c:	4368      	muls	r0, r5
1000f49e:	436f      	muls	r7, r5
1000f4a0:	4684      	mov	ip, r0
1000f4a2:	464d      	mov	r5, r9
1000f4a4:	4650      	mov	r0, sl
1000f4a6:	4355      	muls	r5, r2
1000f4a8:	4342      	muls	r2, r0
1000f4aa:	0c38      	lsrs	r0, r7, #16
1000f4ac:	4681      	mov	r9, r0
1000f4ae:	4462      	add	r2, ip
1000f4b0:	444a      	add	r2, r9
1000f4b2:	445b      	add	r3, fp
1000f4b4:	4594      	cmp	ip, r2
1000f4b6:	d903      	bls.n	1000f4c0 <__aeabi_dmul+0x2f4>
1000f4b8:	2080      	movs	r0, #128	; 0x80
1000f4ba:	0240      	lsls	r0, r0, #9
1000f4bc:	4684      	mov	ip, r0
1000f4be:	4465      	add	r5, ip
1000f4c0:	9803      	ldr	r0, [sp, #12]
1000f4c2:	043f      	lsls	r7, r7, #16
1000f4c4:	4683      	mov	fp, r0
1000f4c6:	9804      	ldr	r0, [sp, #16]
1000f4c8:	0c3f      	lsrs	r7, r7, #16
1000f4ca:	4684      	mov	ip, r0
1000f4cc:	44e3      	add	fp, ip
1000f4ce:	45c3      	cmp	fp, r8
1000f4d0:	4180      	sbcs	r0, r0
1000f4d2:	4240      	negs	r0, r0
1000f4d4:	4682      	mov	sl, r0
1000f4d6:	0410      	lsls	r0, r2, #16
1000f4d8:	4684      	mov	ip, r0
1000f4da:	9801      	ldr	r0, [sp, #4]
1000f4dc:	4467      	add	r7, ip
1000f4de:	4684      	mov	ip, r0
1000f4e0:	4467      	add	r7, ip
1000f4e2:	44a3      	add	fp, r4
1000f4e4:	46bc      	mov	ip, r7
1000f4e6:	45a3      	cmp	fp, r4
1000f4e8:	41a4      	sbcs	r4, r4
1000f4ea:	4699      	mov	r9, r3
1000f4ec:	44d4      	add	ip, sl
1000f4ee:	4264      	negs	r4, r4
1000f4f0:	4287      	cmp	r7, r0
1000f4f2:	41bf      	sbcs	r7, r7
1000f4f4:	45d4      	cmp	ip, sl
1000f4f6:	4180      	sbcs	r0, r0
1000f4f8:	44e1      	add	r9, ip
1000f4fa:	46a0      	mov	r8, r4
1000f4fc:	4599      	cmp	r9, r3
1000f4fe:	419b      	sbcs	r3, r3
1000f500:	427f      	negs	r7, r7
1000f502:	4240      	negs	r0, r0
1000f504:	44c8      	add	r8, r9
1000f506:	4307      	orrs	r7, r0
1000f508:	0c12      	lsrs	r2, r2, #16
1000f50a:	18ba      	adds	r2, r7, r2
1000f50c:	45a0      	cmp	r8, r4
1000f50e:	41a4      	sbcs	r4, r4
1000f510:	425f      	negs	r7, r3
1000f512:	003b      	movs	r3, r7
1000f514:	4264      	negs	r4, r4
1000f516:	4323      	orrs	r3, r4
1000f518:	18d7      	adds	r7, r2, r3
1000f51a:	4643      	mov	r3, r8
1000f51c:	197d      	adds	r5, r7, r5
1000f51e:	0ddb      	lsrs	r3, r3, #23
1000f520:	026d      	lsls	r5, r5, #9
1000f522:	431d      	orrs	r5, r3
1000f524:	465b      	mov	r3, fp
1000f526:	025a      	lsls	r2, r3, #9
1000f528:	9b05      	ldr	r3, [sp, #20]
1000f52a:	431a      	orrs	r2, r3
1000f52c:	1e53      	subs	r3, r2, #1
1000f52e:	419a      	sbcs	r2, r3
1000f530:	465b      	mov	r3, fp
1000f532:	0ddb      	lsrs	r3, r3, #23
1000f534:	431a      	orrs	r2, r3
1000f536:	4643      	mov	r3, r8
1000f538:	025b      	lsls	r3, r3, #9
1000f53a:	4313      	orrs	r3, r2
1000f53c:	01ea      	lsls	r2, r5, #7
1000f53e:	d507      	bpl.n	1000f550 <__aeabi_dmul+0x384>
1000f540:	2201      	movs	r2, #1
1000f542:	085c      	lsrs	r4, r3, #1
1000f544:	4013      	ands	r3, r2
1000f546:	4323      	orrs	r3, r4
1000f548:	07ea      	lsls	r2, r5, #31
1000f54a:	9e02      	ldr	r6, [sp, #8]
1000f54c:	4313      	orrs	r3, r2
1000f54e:	086d      	lsrs	r5, r5, #1
1000f550:	4a57      	ldr	r2, [pc, #348]	; (1000f6b0 <__aeabi_dmul+0x4e4>)
1000f552:	18b2      	adds	r2, r6, r2
1000f554:	2a00      	cmp	r2, #0
1000f556:	dd4b      	ble.n	1000f5f0 <__aeabi_dmul+0x424>
1000f558:	0758      	lsls	r0, r3, #29
1000f55a:	d009      	beq.n	1000f570 <__aeabi_dmul+0x3a4>
1000f55c:	200f      	movs	r0, #15
1000f55e:	4018      	ands	r0, r3
1000f560:	2804      	cmp	r0, #4
1000f562:	d005      	beq.n	1000f570 <__aeabi_dmul+0x3a4>
1000f564:	1d18      	adds	r0, r3, #4
1000f566:	4298      	cmp	r0, r3
1000f568:	419b      	sbcs	r3, r3
1000f56a:	425b      	negs	r3, r3
1000f56c:	18ed      	adds	r5, r5, r3
1000f56e:	0003      	movs	r3, r0
1000f570:	01e8      	lsls	r0, r5, #7
1000f572:	d504      	bpl.n	1000f57e <__aeabi_dmul+0x3b2>
1000f574:	4a4f      	ldr	r2, [pc, #316]	; (1000f6b4 <__aeabi_dmul+0x4e8>)
1000f576:	4015      	ands	r5, r2
1000f578:	2280      	movs	r2, #128	; 0x80
1000f57a:	00d2      	lsls	r2, r2, #3
1000f57c:	18b2      	adds	r2, r6, r2
1000f57e:	484e      	ldr	r0, [pc, #312]	; (1000f6b8 <__aeabi_dmul+0x4ec>)
1000f580:	4282      	cmp	r2, r0
1000f582:	dd00      	ble.n	1000f586 <__aeabi_dmul+0x3ba>
1000f584:	e6e7      	b.n	1000f356 <__aeabi_dmul+0x18a>
1000f586:	2401      	movs	r4, #1
1000f588:	08db      	lsrs	r3, r3, #3
1000f58a:	0768      	lsls	r0, r5, #29
1000f58c:	4318      	orrs	r0, r3
1000f58e:	026d      	lsls	r5, r5, #9
1000f590:	0553      	lsls	r3, r2, #21
1000f592:	4680      	mov	r8, r0
1000f594:	0b2d      	lsrs	r5, r5, #12
1000f596:	0d5b      	lsrs	r3, r3, #21
1000f598:	400c      	ands	r4, r1
1000f59a:	e67d      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f59c:	2280      	movs	r2, #128	; 0x80
1000f59e:	4659      	mov	r1, fp
1000f5a0:	0312      	lsls	r2, r2, #12
1000f5a2:	4211      	tst	r1, r2
1000f5a4:	d008      	beq.n	1000f5b8 <__aeabi_dmul+0x3ec>
1000f5a6:	4215      	tst	r5, r2
1000f5a8:	d106      	bne.n	1000f5b8 <__aeabi_dmul+0x3ec>
1000f5aa:	4315      	orrs	r5, r2
1000f5ac:	032d      	lsls	r5, r5, #12
1000f5ae:	4698      	mov	r8, r3
1000f5b0:	0b2d      	lsrs	r5, r5, #12
1000f5b2:	464c      	mov	r4, r9
1000f5b4:	4b41      	ldr	r3, [pc, #260]	; (1000f6bc <__aeabi_dmul+0x4f0>)
1000f5b6:	e66f      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f5b8:	465d      	mov	r5, fp
1000f5ba:	4315      	orrs	r5, r2
1000f5bc:	032d      	lsls	r5, r5, #12
1000f5be:	0b2d      	lsrs	r5, r5, #12
1000f5c0:	4b3e      	ldr	r3, [pc, #248]	; (1000f6bc <__aeabi_dmul+0x4f0>)
1000f5c2:	e669      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f5c4:	0003      	movs	r3, r0
1000f5c6:	4655      	mov	r5, sl
1000f5c8:	3b28      	subs	r3, #40	; 0x28
1000f5ca:	409d      	lsls	r5, r3
1000f5cc:	2300      	movs	r3, #0
1000f5ce:	e6bc      	b.n	1000f34a <__aeabi_dmul+0x17e>
1000f5d0:	4650      	mov	r0, sl
1000f5d2:	f000 fcaf 	bl	1000ff34 <__clzsi2>
1000f5d6:	3020      	adds	r0, #32
1000f5d8:	e6a8      	b.n	1000f32c <__aeabi_dmul+0x160>
1000f5da:	0003      	movs	r3, r0
1000f5dc:	3b28      	subs	r3, #40	; 0x28
1000f5de:	409f      	lsls	r7, r3
1000f5e0:	2300      	movs	r3, #0
1000f5e2:	46bb      	mov	fp, r7
1000f5e4:	4698      	mov	r8, r3
1000f5e6:	e689      	b.n	1000f2fc <__aeabi_dmul+0x130>
1000f5e8:	f000 fca4 	bl	1000ff34 <__clzsi2>
1000f5ec:	3020      	adds	r0, #32
1000f5ee:	e673      	b.n	1000f2d8 <__aeabi_dmul+0x10c>
1000f5f0:	2401      	movs	r4, #1
1000f5f2:	1aa6      	subs	r6, r4, r2
1000f5f4:	2e38      	cmp	r6, #56	; 0x38
1000f5f6:	dd07      	ble.n	1000f608 <__aeabi_dmul+0x43c>
1000f5f8:	2200      	movs	r2, #0
1000f5fa:	400c      	ands	r4, r1
1000f5fc:	2300      	movs	r3, #0
1000f5fe:	2500      	movs	r5, #0
1000f600:	4690      	mov	r8, r2
1000f602:	e649      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f604:	9e02      	ldr	r6, [sp, #8]
1000f606:	e7a3      	b.n	1000f550 <__aeabi_dmul+0x384>
1000f608:	2e1f      	cmp	r6, #31
1000f60a:	dc20      	bgt.n	1000f64e <__aeabi_dmul+0x482>
1000f60c:	2220      	movs	r2, #32
1000f60e:	002c      	movs	r4, r5
1000f610:	0018      	movs	r0, r3
1000f612:	1b92      	subs	r2, r2, r6
1000f614:	40f0      	lsrs	r0, r6
1000f616:	4094      	lsls	r4, r2
1000f618:	4093      	lsls	r3, r2
1000f61a:	4304      	orrs	r4, r0
1000f61c:	1e58      	subs	r0, r3, #1
1000f61e:	4183      	sbcs	r3, r0
1000f620:	431c      	orrs	r4, r3
1000f622:	40f5      	lsrs	r5, r6
1000f624:	0763      	lsls	r3, r4, #29
1000f626:	d009      	beq.n	1000f63c <__aeabi_dmul+0x470>
1000f628:	230f      	movs	r3, #15
1000f62a:	4023      	ands	r3, r4
1000f62c:	2b04      	cmp	r3, #4
1000f62e:	d005      	beq.n	1000f63c <__aeabi_dmul+0x470>
1000f630:	0023      	movs	r3, r4
1000f632:	1d1c      	adds	r4, r3, #4
1000f634:	429c      	cmp	r4, r3
1000f636:	4192      	sbcs	r2, r2
1000f638:	4252      	negs	r2, r2
1000f63a:	18ad      	adds	r5, r5, r2
1000f63c:	022b      	lsls	r3, r5, #8
1000f63e:	d51f      	bpl.n	1000f680 <__aeabi_dmul+0x4b4>
1000f640:	2401      	movs	r4, #1
1000f642:	2200      	movs	r2, #0
1000f644:	400c      	ands	r4, r1
1000f646:	2301      	movs	r3, #1
1000f648:	2500      	movs	r5, #0
1000f64a:	4690      	mov	r8, r2
1000f64c:	e624      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f64e:	201f      	movs	r0, #31
1000f650:	002c      	movs	r4, r5
1000f652:	4240      	negs	r0, r0
1000f654:	1a82      	subs	r2, r0, r2
1000f656:	40d4      	lsrs	r4, r2
1000f658:	2e20      	cmp	r6, #32
1000f65a:	d01c      	beq.n	1000f696 <__aeabi_dmul+0x4ca>
1000f65c:	2240      	movs	r2, #64	; 0x40
1000f65e:	1b96      	subs	r6, r2, r6
1000f660:	40b5      	lsls	r5, r6
1000f662:	432b      	orrs	r3, r5
1000f664:	1e58      	subs	r0, r3, #1
1000f666:	4183      	sbcs	r3, r0
1000f668:	2007      	movs	r0, #7
1000f66a:	4323      	orrs	r3, r4
1000f66c:	4018      	ands	r0, r3
1000f66e:	2500      	movs	r5, #0
1000f670:	2800      	cmp	r0, #0
1000f672:	d009      	beq.n	1000f688 <__aeabi_dmul+0x4bc>
1000f674:	220f      	movs	r2, #15
1000f676:	2500      	movs	r5, #0
1000f678:	401a      	ands	r2, r3
1000f67a:	001c      	movs	r4, r3
1000f67c:	2a04      	cmp	r2, #4
1000f67e:	d1d8      	bne.n	1000f632 <__aeabi_dmul+0x466>
1000f680:	0023      	movs	r3, r4
1000f682:	0768      	lsls	r0, r5, #29
1000f684:	026d      	lsls	r5, r5, #9
1000f686:	0b2d      	lsrs	r5, r5, #12
1000f688:	2401      	movs	r4, #1
1000f68a:	08db      	lsrs	r3, r3, #3
1000f68c:	4303      	orrs	r3, r0
1000f68e:	4698      	mov	r8, r3
1000f690:	400c      	ands	r4, r1
1000f692:	2300      	movs	r3, #0
1000f694:	e600      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f696:	2500      	movs	r5, #0
1000f698:	e7e3      	b.n	1000f662 <__aeabi_dmul+0x496>
1000f69a:	2280      	movs	r2, #128	; 0x80
1000f69c:	2401      	movs	r4, #1
1000f69e:	0312      	lsls	r2, r2, #12
1000f6a0:	4315      	orrs	r5, r2
1000f6a2:	032d      	lsls	r5, r5, #12
1000f6a4:	4698      	mov	r8, r3
1000f6a6:	0b2d      	lsrs	r5, r5, #12
1000f6a8:	400c      	ands	r4, r1
1000f6aa:	4b04      	ldr	r3, [pc, #16]	; (1000f6bc <__aeabi_dmul+0x4f0>)
1000f6ac:	e5f4      	b.n	1000f298 <__aeabi_dmul+0xcc>
1000f6ae:	46c0      	nop			; (mov r8, r8)
1000f6b0:	000003ff 	.word	0x000003ff
1000f6b4:	feffffff 	.word	0xfeffffff
1000f6b8:	000007fe 	.word	0x000007fe
1000f6bc:	000007ff 	.word	0x000007ff

1000f6c0 <__aeabi_dsub>:
1000f6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f6c2:	4657      	mov	r7, sl
1000f6c4:	464e      	mov	r6, r9
1000f6c6:	4645      	mov	r5, r8
1000f6c8:	b4e0      	push	{r5, r6, r7}
1000f6ca:	000e      	movs	r6, r1
1000f6cc:	0011      	movs	r1, r2
1000f6ce:	0ff2      	lsrs	r2, r6, #31
1000f6d0:	4692      	mov	sl, r2
1000f6d2:	00c5      	lsls	r5, r0, #3
1000f6d4:	0f42      	lsrs	r2, r0, #29
1000f6d6:	0318      	lsls	r0, r3, #12
1000f6d8:	0337      	lsls	r7, r6, #12
1000f6da:	0074      	lsls	r4, r6, #1
1000f6dc:	0a40      	lsrs	r0, r0, #9
1000f6de:	0f4e      	lsrs	r6, r1, #29
1000f6e0:	0a7f      	lsrs	r7, r7, #9
1000f6e2:	4330      	orrs	r0, r6
1000f6e4:	4ecf      	ldr	r6, [pc, #828]	; (1000fa24 <__aeabi_dsub+0x364>)
1000f6e6:	4317      	orrs	r7, r2
1000f6e8:	005a      	lsls	r2, r3, #1
1000f6ea:	0d64      	lsrs	r4, r4, #21
1000f6ec:	0d52      	lsrs	r2, r2, #21
1000f6ee:	0fdb      	lsrs	r3, r3, #31
1000f6f0:	00c9      	lsls	r1, r1, #3
1000f6f2:	42b2      	cmp	r2, r6
1000f6f4:	d100      	bne.n	1000f6f8 <__aeabi_dsub+0x38>
1000f6f6:	e0e5      	b.n	1000f8c4 <__aeabi_dsub+0x204>
1000f6f8:	2601      	movs	r6, #1
1000f6fa:	4073      	eors	r3, r6
1000f6fc:	1aa6      	subs	r6, r4, r2
1000f6fe:	46b4      	mov	ip, r6
1000f700:	4553      	cmp	r3, sl
1000f702:	d100      	bne.n	1000f706 <__aeabi_dsub+0x46>
1000f704:	e0af      	b.n	1000f866 <__aeabi_dsub+0x1a6>
1000f706:	2e00      	cmp	r6, #0
1000f708:	dc00      	bgt.n	1000f70c <__aeabi_dsub+0x4c>
1000f70a:	e10d      	b.n	1000f928 <__aeabi_dsub+0x268>
1000f70c:	2a00      	cmp	r2, #0
1000f70e:	d13a      	bne.n	1000f786 <__aeabi_dsub+0xc6>
1000f710:	0003      	movs	r3, r0
1000f712:	430b      	orrs	r3, r1
1000f714:	d000      	beq.n	1000f718 <__aeabi_dsub+0x58>
1000f716:	e0e4      	b.n	1000f8e2 <__aeabi_dsub+0x222>
1000f718:	076b      	lsls	r3, r5, #29
1000f71a:	d009      	beq.n	1000f730 <__aeabi_dsub+0x70>
1000f71c:	230f      	movs	r3, #15
1000f71e:	402b      	ands	r3, r5
1000f720:	2b04      	cmp	r3, #4
1000f722:	d005      	beq.n	1000f730 <__aeabi_dsub+0x70>
1000f724:	1d2b      	adds	r3, r5, #4
1000f726:	42ab      	cmp	r3, r5
1000f728:	41ad      	sbcs	r5, r5
1000f72a:	426d      	negs	r5, r5
1000f72c:	197f      	adds	r7, r7, r5
1000f72e:	001d      	movs	r5, r3
1000f730:	023b      	lsls	r3, r7, #8
1000f732:	d400      	bmi.n	1000f736 <__aeabi_dsub+0x76>
1000f734:	e088      	b.n	1000f848 <__aeabi_dsub+0x188>
1000f736:	4bbb      	ldr	r3, [pc, #748]	; (1000fa24 <__aeabi_dsub+0x364>)
1000f738:	3401      	adds	r4, #1
1000f73a:	429c      	cmp	r4, r3
1000f73c:	d100      	bne.n	1000f740 <__aeabi_dsub+0x80>
1000f73e:	e110      	b.n	1000f962 <__aeabi_dsub+0x2a2>
1000f740:	003a      	movs	r2, r7
1000f742:	4bb9      	ldr	r3, [pc, #740]	; (1000fa28 <__aeabi_dsub+0x368>)
1000f744:	4651      	mov	r1, sl
1000f746:	401a      	ands	r2, r3
1000f748:	2301      	movs	r3, #1
1000f74a:	0750      	lsls	r0, r2, #29
1000f74c:	08ed      	lsrs	r5, r5, #3
1000f74e:	0252      	lsls	r2, r2, #9
1000f750:	0564      	lsls	r4, r4, #21
1000f752:	4305      	orrs	r5, r0
1000f754:	0b12      	lsrs	r2, r2, #12
1000f756:	0d64      	lsrs	r4, r4, #21
1000f758:	400b      	ands	r3, r1
1000f75a:	2100      	movs	r1, #0
1000f75c:	0028      	movs	r0, r5
1000f75e:	0312      	lsls	r2, r2, #12
1000f760:	0d0d      	lsrs	r5, r1, #20
1000f762:	0b12      	lsrs	r2, r2, #12
1000f764:	0564      	lsls	r4, r4, #21
1000f766:	052d      	lsls	r5, r5, #20
1000f768:	4315      	orrs	r5, r2
1000f76a:	0862      	lsrs	r2, r4, #1
1000f76c:	4caf      	ldr	r4, [pc, #700]	; (1000fa2c <__aeabi_dsub+0x36c>)
1000f76e:	07db      	lsls	r3, r3, #31
1000f770:	402c      	ands	r4, r5
1000f772:	4314      	orrs	r4, r2
1000f774:	0064      	lsls	r4, r4, #1
1000f776:	0864      	lsrs	r4, r4, #1
1000f778:	431c      	orrs	r4, r3
1000f77a:	0021      	movs	r1, r4
1000f77c:	bc1c      	pop	{r2, r3, r4}
1000f77e:	4690      	mov	r8, r2
1000f780:	4699      	mov	r9, r3
1000f782:	46a2      	mov	sl, r4
1000f784:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f786:	4ba7      	ldr	r3, [pc, #668]	; (1000fa24 <__aeabi_dsub+0x364>)
1000f788:	429c      	cmp	r4, r3
1000f78a:	d0c5      	beq.n	1000f718 <__aeabi_dsub+0x58>
1000f78c:	2380      	movs	r3, #128	; 0x80
1000f78e:	041b      	lsls	r3, r3, #16
1000f790:	4318      	orrs	r0, r3
1000f792:	4663      	mov	r3, ip
1000f794:	2b38      	cmp	r3, #56	; 0x38
1000f796:	dd00      	ble.n	1000f79a <__aeabi_dsub+0xda>
1000f798:	e0fd      	b.n	1000f996 <__aeabi_dsub+0x2d6>
1000f79a:	2b1f      	cmp	r3, #31
1000f79c:	dd00      	ble.n	1000f7a0 <__aeabi_dsub+0xe0>
1000f79e:	e130      	b.n	1000fa02 <__aeabi_dsub+0x342>
1000f7a0:	4662      	mov	r2, ip
1000f7a2:	2320      	movs	r3, #32
1000f7a4:	1a9b      	subs	r3, r3, r2
1000f7a6:	0002      	movs	r2, r0
1000f7a8:	409a      	lsls	r2, r3
1000f7aa:	4666      	mov	r6, ip
1000f7ac:	4690      	mov	r8, r2
1000f7ae:	000a      	movs	r2, r1
1000f7b0:	4099      	lsls	r1, r3
1000f7b2:	40f2      	lsrs	r2, r6
1000f7b4:	4646      	mov	r6, r8
1000f7b6:	1e4b      	subs	r3, r1, #1
1000f7b8:	4199      	sbcs	r1, r3
1000f7ba:	4332      	orrs	r2, r6
1000f7bc:	4311      	orrs	r1, r2
1000f7be:	4663      	mov	r3, ip
1000f7c0:	0002      	movs	r2, r0
1000f7c2:	40da      	lsrs	r2, r3
1000f7c4:	1a69      	subs	r1, r5, r1
1000f7c6:	428d      	cmp	r5, r1
1000f7c8:	419b      	sbcs	r3, r3
1000f7ca:	000d      	movs	r5, r1
1000f7cc:	1aba      	subs	r2, r7, r2
1000f7ce:	425b      	negs	r3, r3
1000f7d0:	1ad7      	subs	r7, r2, r3
1000f7d2:	023b      	lsls	r3, r7, #8
1000f7d4:	d535      	bpl.n	1000f842 <__aeabi_dsub+0x182>
1000f7d6:	027a      	lsls	r2, r7, #9
1000f7d8:	0a53      	lsrs	r3, r2, #9
1000f7da:	4698      	mov	r8, r3
1000f7dc:	4643      	mov	r3, r8
1000f7de:	2b00      	cmp	r3, #0
1000f7e0:	d100      	bne.n	1000f7e4 <__aeabi_dsub+0x124>
1000f7e2:	e0c4      	b.n	1000f96e <__aeabi_dsub+0x2ae>
1000f7e4:	4640      	mov	r0, r8
1000f7e6:	f000 fba5 	bl	1000ff34 <__clzsi2>
1000f7ea:	0003      	movs	r3, r0
1000f7ec:	3b08      	subs	r3, #8
1000f7ee:	2b1f      	cmp	r3, #31
1000f7f0:	dd00      	ble.n	1000f7f4 <__aeabi_dsub+0x134>
1000f7f2:	e0c5      	b.n	1000f980 <__aeabi_dsub+0x2c0>
1000f7f4:	2220      	movs	r2, #32
1000f7f6:	0029      	movs	r1, r5
1000f7f8:	1ad2      	subs	r2, r2, r3
1000f7fa:	4647      	mov	r7, r8
1000f7fc:	40d1      	lsrs	r1, r2
1000f7fe:	409f      	lsls	r7, r3
1000f800:	000a      	movs	r2, r1
1000f802:	409d      	lsls	r5, r3
1000f804:	433a      	orrs	r2, r7
1000f806:	429c      	cmp	r4, r3
1000f808:	dd00      	ble.n	1000f80c <__aeabi_dsub+0x14c>
1000f80a:	e0c0      	b.n	1000f98e <__aeabi_dsub+0x2ce>
1000f80c:	1b1c      	subs	r4, r3, r4
1000f80e:	1c63      	adds	r3, r4, #1
1000f810:	2b1f      	cmp	r3, #31
1000f812:	dd00      	ble.n	1000f816 <__aeabi_dsub+0x156>
1000f814:	e0e4      	b.n	1000f9e0 <__aeabi_dsub+0x320>
1000f816:	2120      	movs	r1, #32
1000f818:	0014      	movs	r4, r2
1000f81a:	0028      	movs	r0, r5
1000f81c:	1ac9      	subs	r1, r1, r3
1000f81e:	40d8      	lsrs	r0, r3
1000f820:	408c      	lsls	r4, r1
1000f822:	408d      	lsls	r5, r1
1000f824:	4304      	orrs	r4, r0
1000f826:	40da      	lsrs	r2, r3
1000f828:	1e68      	subs	r0, r5, #1
1000f82a:	4185      	sbcs	r5, r0
1000f82c:	0017      	movs	r7, r2
1000f82e:	4325      	orrs	r5, r4
1000f830:	2400      	movs	r4, #0
1000f832:	e771      	b.n	1000f718 <__aeabi_dsub+0x58>
1000f834:	4642      	mov	r2, r8
1000f836:	4663      	mov	r3, ip
1000f838:	431a      	orrs	r2, r3
1000f83a:	d100      	bne.n	1000f83e <__aeabi_dsub+0x17e>
1000f83c:	e24c      	b.n	1000fcd8 <__aeabi_dsub+0x618>
1000f83e:	4667      	mov	r7, ip
1000f840:	4645      	mov	r5, r8
1000f842:	076b      	lsls	r3, r5, #29
1000f844:	d000      	beq.n	1000f848 <__aeabi_dsub+0x188>
1000f846:	e769      	b.n	1000f71c <__aeabi_dsub+0x5c>
1000f848:	2301      	movs	r3, #1
1000f84a:	4651      	mov	r1, sl
1000f84c:	0778      	lsls	r0, r7, #29
1000f84e:	08ed      	lsrs	r5, r5, #3
1000f850:	08fa      	lsrs	r2, r7, #3
1000f852:	400b      	ands	r3, r1
1000f854:	4305      	orrs	r5, r0
1000f856:	4973      	ldr	r1, [pc, #460]	; (1000fa24 <__aeabi_dsub+0x364>)
1000f858:	428c      	cmp	r4, r1
1000f85a:	d038      	beq.n	1000f8ce <__aeabi_dsub+0x20e>
1000f85c:	0312      	lsls	r2, r2, #12
1000f85e:	0564      	lsls	r4, r4, #21
1000f860:	0b12      	lsrs	r2, r2, #12
1000f862:	0d64      	lsrs	r4, r4, #21
1000f864:	e779      	b.n	1000f75a <__aeabi_dsub+0x9a>
1000f866:	2e00      	cmp	r6, #0
1000f868:	dc00      	bgt.n	1000f86c <__aeabi_dsub+0x1ac>
1000f86a:	e09a      	b.n	1000f9a2 <__aeabi_dsub+0x2e2>
1000f86c:	2a00      	cmp	r2, #0
1000f86e:	d047      	beq.n	1000f900 <__aeabi_dsub+0x240>
1000f870:	4a6c      	ldr	r2, [pc, #432]	; (1000fa24 <__aeabi_dsub+0x364>)
1000f872:	4294      	cmp	r4, r2
1000f874:	d100      	bne.n	1000f878 <__aeabi_dsub+0x1b8>
1000f876:	e74f      	b.n	1000f718 <__aeabi_dsub+0x58>
1000f878:	2280      	movs	r2, #128	; 0x80
1000f87a:	0412      	lsls	r2, r2, #16
1000f87c:	4310      	orrs	r0, r2
1000f87e:	4662      	mov	r2, ip
1000f880:	2a38      	cmp	r2, #56	; 0x38
1000f882:	dc00      	bgt.n	1000f886 <__aeabi_dsub+0x1c6>
1000f884:	e108      	b.n	1000fa98 <__aeabi_dsub+0x3d8>
1000f886:	4301      	orrs	r1, r0
1000f888:	1e48      	subs	r0, r1, #1
1000f88a:	4181      	sbcs	r1, r0
1000f88c:	2200      	movs	r2, #0
1000f88e:	b2c9      	uxtb	r1, r1
1000f890:	1949      	adds	r1, r1, r5
1000f892:	19d2      	adds	r2, r2, r7
1000f894:	42a9      	cmp	r1, r5
1000f896:	41bf      	sbcs	r7, r7
1000f898:	000d      	movs	r5, r1
1000f89a:	427f      	negs	r7, r7
1000f89c:	18bf      	adds	r7, r7, r2
1000f89e:	023a      	lsls	r2, r7, #8
1000f8a0:	d400      	bmi.n	1000f8a4 <__aeabi_dsub+0x1e4>
1000f8a2:	e142      	b.n	1000fb2a <__aeabi_dsub+0x46a>
1000f8a4:	4a5f      	ldr	r2, [pc, #380]	; (1000fa24 <__aeabi_dsub+0x364>)
1000f8a6:	3401      	adds	r4, #1
1000f8a8:	4294      	cmp	r4, r2
1000f8aa:	d100      	bne.n	1000f8ae <__aeabi_dsub+0x1ee>
1000f8ac:	e14e      	b.n	1000fb4c <__aeabi_dsub+0x48c>
1000f8ae:	2001      	movs	r0, #1
1000f8b0:	4a5d      	ldr	r2, [pc, #372]	; (1000fa28 <__aeabi_dsub+0x368>)
1000f8b2:	0869      	lsrs	r1, r5, #1
1000f8b4:	403a      	ands	r2, r7
1000f8b6:	4028      	ands	r0, r5
1000f8b8:	4308      	orrs	r0, r1
1000f8ba:	07d5      	lsls	r5, r2, #31
1000f8bc:	4305      	orrs	r5, r0
1000f8be:	0857      	lsrs	r7, r2, #1
1000f8c0:	469a      	mov	sl, r3
1000f8c2:	e729      	b.n	1000f718 <__aeabi_dsub+0x58>
1000f8c4:	0006      	movs	r6, r0
1000f8c6:	430e      	orrs	r6, r1
1000f8c8:	d000      	beq.n	1000f8cc <__aeabi_dsub+0x20c>
1000f8ca:	e717      	b.n	1000f6fc <__aeabi_dsub+0x3c>
1000f8cc:	e714      	b.n	1000f6f8 <__aeabi_dsub+0x38>
1000f8ce:	0029      	movs	r1, r5
1000f8d0:	4311      	orrs	r1, r2
1000f8d2:	d100      	bne.n	1000f8d6 <__aeabi_dsub+0x216>
1000f8d4:	e1f9      	b.n	1000fcca <__aeabi_dsub+0x60a>
1000f8d6:	2180      	movs	r1, #128	; 0x80
1000f8d8:	0309      	lsls	r1, r1, #12
1000f8da:	430a      	orrs	r2, r1
1000f8dc:	0312      	lsls	r2, r2, #12
1000f8de:	0b12      	lsrs	r2, r2, #12
1000f8e0:	e73b      	b.n	1000f75a <__aeabi_dsub+0x9a>
1000f8e2:	2301      	movs	r3, #1
1000f8e4:	425b      	negs	r3, r3
1000f8e6:	4698      	mov	r8, r3
1000f8e8:	44c4      	add	ip, r8
1000f8ea:	4663      	mov	r3, ip
1000f8ec:	2b00      	cmp	r3, #0
1000f8ee:	d172      	bne.n	1000f9d6 <__aeabi_dsub+0x316>
1000f8f0:	1a69      	subs	r1, r5, r1
1000f8f2:	428d      	cmp	r5, r1
1000f8f4:	419b      	sbcs	r3, r3
1000f8f6:	1a3f      	subs	r7, r7, r0
1000f8f8:	425b      	negs	r3, r3
1000f8fa:	1aff      	subs	r7, r7, r3
1000f8fc:	000d      	movs	r5, r1
1000f8fe:	e768      	b.n	1000f7d2 <__aeabi_dsub+0x112>
1000f900:	0002      	movs	r2, r0
1000f902:	430a      	orrs	r2, r1
1000f904:	d100      	bne.n	1000f908 <__aeabi_dsub+0x248>
1000f906:	e707      	b.n	1000f718 <__aeabi_dsub+0x58>
1000f908:	2201      	movs	r2, #1
1000f90a:	4252      	negs	r2, r2
1000f90c:	4690      	mov	r8, r2
1000f90e:	44c4      	add	ip, r8
1000f910:	4662      	mov	r2, ip
1000f912:	2a00      	cmp	r2, #0
1000f914:	d000      	beq.n	1000f918 <__aeabi_dsub+0x258>
1000f916:	e0e6      	b.n	1000fae6 <__aeabi_dsub+0x426>
1000f918:	1869      	adds	r1, r5, r1
1000f91a:	42a9      	cmp	r1, r5
1000f91c:	41b6      	sbcs	r6, r6
1000f91e:	183f      	adds	r7, r7, r0
1000f920:	4276      	negs	r6, r6
1000f922:	19f7      	adds	r7, r6, r7
1000f924:	000d      	movs	r5, r1
1000f926:	e7ba      	b.n	1000f89e <__aeabi_dsub+0x1de>
1000f928:	2e00      	cmp	r6, #0
1000f92a:	d000      	beq.n	1000f92e <__aeabi_dsub+0x26e>
1000f92c:	e080      	b.n	1000fa30 <__aeabi_dsub+0x370>
1000f92e:	1c62      	adds	r2, r4, #1
1000f930:	0552      	lsls	r2, r2, #21
1000f932:	0d52      	lsrs	r2, r2, #21
1000f934:	2a01      	cmp	r2, #1
1000f936:	dc00      	bgt.n	1000f93a <__aeabi_dsub+0x27a>
1000f938:	e0f9      	b.n	1000fb2e <__aeabi_dsub+0x46e>
1000f93a:	1a6a      	subs	r2, r5, r1
1000f93c:	4691      	mov	r9, r2
1000f93e:	454d      	cmp	r5, r9
1000f940:	41b6      	sbcs	r6, r6
1000f942:	1a3a      	subs	r2, r7, r0
1000f944:	4276      	negs	r6, r6
1000f946:	1b92      	subs	r2, r2, r6
1000f948:	4690      	mov	r8, r2
1000f94a:	0212      	lsls	r2, r2, #8
1000f94c:	d400      	bmi.n	1000f950 <__aeabi_dsub+0x290>
1000f94e:	e099      	b.n	1000fa84 <__aeabi_dsub+0x3c4>
1000f950:	1b4d      	subs	r5, r1, r5
1000f952:	42a9      	cmp	r1, r5
1000f954:	4189      	sbcs	r1, r1
1000f956:	1bc7      	subs	r7, r0, r7
1000f958:	4249      	negs	r1, r1
1000f95a:	1a7a      	subs	r2, r7, r1
1000f95c:	4690      	mov	r8, r2
1000f95e:	469a      	mov	sl, r3
1000f960:	e73c      	b.n	1000f7dc <__aeabi_dsub+0x11c>
1000f962:	4652      	mov	r2, sl
1000f964:	2301      	movs	r3, #1
1000f966:	2500      	movs	r5, #0
1000f968:	4013      	ands	r3, r2
1000f96a:	2200      	movs	r2, #0
1000f96c:	e6f5      	b.n	1000f75a <__aeabi_dsub+0x9a>
1000f96e:	0028      	movs	r0, r5
1000f970:	f000 fae0 	bl	1000ff34 <__clzsi2>
1000f974:	3020      	adds	r0, #32
1000f976:	0003      	movs	r3, r0
1000f978:	3b08      	subs	r3, #8
1000f97a:	2b1f      	cmp	r3, #31
1000f97c:	dc00      	bgt.n	1000f980 <__aeabi_dsub+0x2c0>
1000f97e:	e739      	b.n	1000f7f4 <__aeabi_dsub+0x134>
1000f980:	002a      	movs	r2, r5
1000f982:	3828      	subs	r0, #40	; 0x28
1000f984:	4082      	lsls	r2, r0
1000f986:	2500      	movs	r5, #0
1000f988:	429c      	cmp	r4, r3
1000f98a:	dc00      	bgt.n	1000f98e <__aeabi_dsub+0x2ce>
1000f98c:	e73e      	b.n	1000f80c <__aeabi_dsub+0x14c>
1000f98e:	4f26      	ldr	r7, [pc, #152]	; (1000fa28 <__aeabi_dsub+0x368>)
1000f990:	1ae4      	subs	r4, r4, r3
1000f992:	4017      	ands	r7, r2
1000f994:	e6c0      	b.n	1000f718 <__aeabi_dsub+0x58>
1000f996:	4301      	orrs	r1, r0
1000f998:	1e48      	subs	r0, r1, #1
1000f99a:	4181      	sbcs	r1, r0
1000f99c:	2200      	movs	r2, #0
1000f99e:	b2c9      	uxtb	r1, r1
1000f9a0:	e710      	b.n	1000f7c4 <__aeabi_dsub+0x104>
1000f9a2:	2e00      	cmp	r6, #0
1000f9a4:	d000      	beq.n	1000f9a8 <__aeabi_dsub+0x2e8>
1000f9a6:	e0f1      	b.n	1000fb8c <__aeabi_dsub+0x4cc>
1000f9a8:	1c62      	adds	r2, r4, #1
1000f9aa:	4694      	mov	ip, r2
1000f9ac:	0552      	lsls	r2, r2, #21
1000f9ae:	0d52      	lsrs	r2, r2, #21
1000f9b0:	2a01      	cmp	r2, #1
1000f9b2:	dc00      	bgt.n	1000f9b6 <__aeabi_dsub+0x2f6>
1000f9b4:	e0a0      	b.n	1000faf8 <__aeabi_dsub+0x438>
1000f9b6:	4a1b      	ldr	r2, [pc, #108]	; (1000fa24 <__aeabi_dsub+0x364>)
1000f9b8:	4594      	cmp	ip, r2
1000f9ba:	d100      	bne.n	1000f9be <__aeabi_dsub+0x2fe>
1000f9bc:	e0c5      	b.n	1000fb4a <__aeabi_dsub+0x48a>
1000f9be:	1869      	adds	r1, r5, r1
1000f9c0:	42a9      	cmp	r1, r5
1000f9c2:	4192      	sbcs	r2, r2
1000f9c4:	183f      	adds	r7, r7, r0
1000f9c6:	4252      	negs	r2, r2
1000f9c8:	19d2      	adds	r2, r2, r7
1000f9ca:	0849      	lsrs	r1, r1, #1
1000f9cc:	07d5      	lsls	r5, r2, #31
1000f9ce:	430d      	orrs	r5, r1
1000f9d0:	0857      	lsrs	r7, r2, #1
1000f9d2:	4664      	mov	r4, ip
1000f9d4:	e6a0      	b.n	1000f718 <__aeabi_dsub+0x58>
1000f9d6:	4b13      	ldr	r3, [pc, #76]	; (1000fa24 <__aeabi_dsub+0x364>)
1000f9d8:	429c      	cmp	r4, r3
1000f9da:	d000      	beq.n	1000f9de <__aeabi_dsub+0x31e>
1000f9dc:	e6d9      	b.n	1000f792 <__aeabi_dsub+0xd2>
1000f9de:	e69b      	b.n	1000f718 <__aeabi_dsub+0x58>
1000f9e0:	0011      	movs	r1, r2
1000f9e2:	3c1f      	subs	r4, #31
1000f9e4:	40e1      	lsrs	r1, r4
1000f9e6:	000c      	movs	r4, r1
1000f9e8:	2b20      	cmp	r3, #32
1000f9ea:	d100      	bne.n	1000f9ee <__aeabi_dsub+0x32e>
1000f9ec:	e080      	b.n	1000faf0 <__aeabi_dsub+0x430>
1000f9ee:	2140      	movs	r1, #64	; 0x40
1000f9f0:	1acb      	subs	r3, r1, r3
1000f9f2:	409a      	lsls	r2, r3
1000f9f4:	4315      	orrs	r5, r2
1000f9f6:	1e6a      	subs	r2, r5, #1
1000f9f8:	4195      	sbcs	r5, r2
1000f9fa:	2700      	movs	r7, #0
1000f9fc:	4325      	orrs	r5, r4
1000f9fe:	2400      	movs	r4, #0
1000fa00:	e71f      	b.n	1000f842 <__aeabi_dsub+0x182>
1000fa02:	4663      	mov	r3, ip
1000fa04:	0002      	movs	r2, r0
1000fa06:	3b20      	subs	r3, #32
1000fa08:	40da      	lsrs	r2, r3
1000fa0a:	4663      	mov	r3, ip
1000fa0c:	2b20      	cmp	r3, #32
1000fa0e:	d071      	beq.n	1000faf4 <__aeabi_dsub+0x434>
1000fa10:	2340      	movs	r3, #64	; 0x40
1000fa12:	4666      	mov	r6, ip
1000fa14:	1b9b      	subs	r3, r3, r6
1000fa16:	4098      	lsls	r0, r3
1000fa18:	4301      	orrs	r1, r0
1000fa1a:	1e48      	subs	r0, r1, #1
1000fa1c:	4181      	sbcs	r1, r0
1000fa1e:	4311      	orrs	r1, r2
1000fa20:	2200      	movs	r2, #0
1000fa22:	e6cf      	b.n	1000f7c4 <__aeabi_dsub+0x104>
1000fa24:	000007ff 	.word	0x000007ff
1000fa28:	ff7fffff 	.word	0xff7fffff
1000fa2c:	800fffff 	.word	0x800fffff
1000fa30:	2c00      	cmp	r4, #0
1000fa32:	d048      	beq.n	1000fac6 <__aeabi_dsub+0x406>
1000fa34:	4cca      	ldr	r4, [pc, #808]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fa36:	42a2      	cmp	r2, r4
1000fa38:	d100      	bne.n	1000fa3c <__aeabi_dsub+0x37c>
1000fa3a:	e0a2      	b.n	1000fb82 <__aeabi_dsub+0x4c2>
1000fa3c:	4274      	negs	r4, r6
1000fa3e:	46a1      	mov	r9, r4
1000fa40:	2480      	movs	r4, #128	; 0x80
1000fa42:	0424      	lsls	r4, r4, #16
1000fa44:	4327      	orrs	r7, r4
1000fa46:	464c      	mov	r4, r9
1000fa48:	2c38      	cmp	r4, #56	; 0x38
1000fa4a:	dd00      	ble.n	1000fa4e <__aeabi_dsub+0x38e>
1000fa4c:	e0db      	b.n	1000fc06 <__aeabi_dsub+0x546>
1000fa4e:	2c1f      	cmp	r4, #31
1000fa50:	dd00      	ble.n	1000fa54 <__aeabi_dsub+0x394>
1000fa52:	e144      	b.n	1000fcde <__aeabi_dsub+0x61e>
1000fa54:	464e      	mov	r6, r9
1000fa56:	2420      	movs	r4, #32
1000fa58:	1ba4      	subs	r4, r4, r6
1000fa5a:	003e      	movs	r6, r7
1000fa5c:	40a6      	lsls	r6, r4
1000fa5e:	46a2      	mov	sl, r4
1000fa60:	46b0      	mov	r8, r6
1000fa62:	464c      	mov	r4, r9
1000fa64:	002e      	movs	r6, r5
1000fa66:	40e6      	lsrs	r6, r4
1000fa68:	46b4      	mov	ip, r6
1000fa6a:	4646      	mov	r6, r8
1000fa6c:	4664      	mov	r4, ip
1000fa6e:	4326      	orrs	r6, r4
1000fa70:	4654      	mov	r4, sl
1000fa72:	40a5      	lsls	r5, r4
1000fa74:	1e6c      	subs	r4, r5, #1
1000fa76:	41a5      	sbcs	r5, r4
1000fa78:	0034      	movs	r4, r6
1000fa7a:	432c      	orrs	r4, r5
1000fa7c:	464d      	mov	r5, r9
1000fa7e:	40ef      	lsrs	r7, r5
1000fa80:	1b0d      	subs	r5, r1, r4
1000fa82:	e028      	b.n	1000fad6 <__aeabi_dsub+0x416>
1000fa84:	464a      	mov	r2, r9
1000fa86:	4643      	mov	r3, r8
1000fa88:	464d      	mov	r5, r9
1000fa8a:	431a      	orrs	r2, r3
1000fa8c:	d000      	beq.n	1000fa90 <__aeabi_dsub+0x3d0>
1000fa8e:	e6a5      	b.n	1000f7dc <__aeabi_dsub+0x11c>
1000fa90:	2300      	movs	r3, #0
1000fa92:	2400      	movs	r4, #0
1000fa94:	2500      	movs	r5, #0
1000fa96:	e6de      	b.n	1000f856 <__aeabi_dsub+0x196>
1000fa98:	2a1f      	cmp	r2, #31
1000fa9a:	dc5a      	bgt.n	1000fb52 <__aeabi_dsub+0x492>
1000fa9c:	4666      	mov	r6, ip
1000fa9e:	2220      	movs	r2, #32
1000faa0:	1b92      	subs	r2, r2, r6
1000faa2:	0006      	movs	r6, r0
1000faa4:	4096      	lsls	r6, r2
1000faa6:	4691      	mov	r9, r2
1000faa8:	46b0      	mov	r8, r6
1000faaa:	4662      	mov	r2, ip
1000faac:	000e      	movs	r6, r1
1000faae:	40d6      	lsrs	r6, r2
1000fab0:	4642      	mov	r2, r8
1000fab2:	4316      	orrs	r6, r2
1000fab4:	464a      	mov	r2, r9
1000fab6:	4091      	lsls	r1, r2
1000fab8:	1e4a      	subs	r2, r1, #1
1000faba:	4191      	sbcs	r1, r2
1000fabc:	0002      	movs	r2, r0
1000fabe:	4660      	mov	r0, ip
1000fac0:	4331      	orrs	r1, r6
1000fac2:	40c2      	lsrs	r2, r0
1000fac4:	e6e4      	b.n	1000f890 <__aeabi_dsub+0x1d0>
1000fac6:	003c      	movs	r4, r7
1000fac8:	432c      	orrs	r4, r5
1000faca:	d05a      	beq.n	1000fb82 <__aeabi_dsub+0x4c2>
1000facc:	43f4      	mvns	r4, r6
1000face:	46a1      	mov	r9, r4
1000fad0:	2c00      	cmp	r4, #0
1000fad2:	d152      	bne.n	1000fb7a <__aeabi_dsub+0x4ba>
1000fad4:	1b4d      	subs	r5, r1, r5
1000fad6:	42a9      	cmp	r1, r5
1000fad8:	4189      	sbcs	r1, r1
1000fada:	1bc7      	subs	r7, r0, r7
1000fadc:	4249      	negs	r1, r1
1000fade:	1a7f      	subs	r7, r7, r1
1000fae0:	0014      	movs	r4, r2
1000fae2:	469a      	mov	sl, r3
1000fae4:	e675      	b.n	1000f7d2 <__aeabi_dsub+0x112>
1000fae6:	4a9e      	ldr	r2, [pc, #632]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fae8:	4294      	cmp	r4, r2
1000faea:	d000      	beq.n	1000faee <__aeabi_dsub+0x42e>
1000faec:	e6c7      	b.n	1000f87e <__aeabi_dsub+0x1be>
1000faee:	e613      	b.n	1000f718 <__aeabi_dsub+0x58>
1000faf0:	2200      	movs	r2, #0
1000faf2:	e77f      	b.n	1000f9f4 <__aeabi_dsub+0x334>
1000faf4:	2000      	movs	r0, #0
1000faf6:	e78f      	b.n	1000fa18 <__aeabi_dsub+0x358>
1000faf8:	2c00      	cmp	r4, #0
1000fafa:	d000      	beq.n	1000fafe <__aeabi_dsub+0x43e>
1000fafc:	e0c8      	b.n	1000fc90 <__aeabi_dsub+0x5d0>
1000fafe:	003b      	movs	r3, r7
1000fb00:	432b      	orrs	r3, r5
1000fb02:	d100      	bne.n	1000fb06 <__aeabi_dsub+0x446>
1000fb04:	e10f      	b.n	1000fd26 <__aeabi_dsub+0x666>
1000fb06:	0003      	movs	r3, r0
1000fb08:	430b      	orrs	r3, r1
1000fb0a:	d100      	bne.n	1000fb0e <__aeabi_dsub+0x44e>
1000fb0c:	e604      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fb0e:	1869      	adds	r1, r5, r1
1000fb10:	42a9      	cmp	r1, r5
1000fb12:	419b      	sbcs	r3, r3
1000fb14:	183f      	adds	r7, r7, r0
1000fb16:	425b      	negs	r3, r3
1000fb18:	19df      	adds	r7, r3, r7
1000fb1a:	023b      	lsls	r3, r7, #8
1000fb1c:	d400      	bmi.n	1000fb20 <__aeabi_dsub+0x460>
1000fb1e:	e11a      	b.n	1000fd56 <__aeabi_dsub+0x696>
1000fb20:	4b90      	ldr	r3, [pc, #576]	; (1000fd64 <__aeabi_dsub+0x6a4>)
1000fb22:	000d      	movs	r5, r1
1000fb24:	401f      	ands	r7, r3
1000fb26:	4664      	mov	r4, ip
1000fb28:	e5f6      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fb2a:	469a      	mov	sl, r3
1000fb2c:	e689      	b.n	1000f842 <__aeabi_dsub+0x182>
1000fb2e:	003a      	movs	r2, r7
1000fb30:	432a      	orrs	r2, r5
1000fb32:	2c00      	cmp	r4, #0
1000fb34:	d15c      	bne.n	1000fbf0 <__aeabi_dsub+0x530>
1000fb36:	2a00      	cmp	r2, #0
1000fb38:	d175      	bne.n	1000fc26 <__aeabi_dsub+0x566>
1000fb3a:	0002      	movs	r2, r0
1000fb3c:	430a      	orrs	r2, r1
1000fb3e:	d100      	bne.n	1000fb42 <__aeabi_dsub+0x482>
1000fb40:	e0ca      	b.n	1000fcd8 <__aeabi_dsub+0x618>
1000fb42:	0007      	movs	r7, r0
1000fb44:	000d      	movs	r5, r1
1000fb46:	469a      	mov	sl, r3
1000fb48:	e5e6      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fb4a:	4664      	mov	r4, ip
1000fb4c:	2200      	movs	r2, #0
1000fb4e:	2500      	movs	r5, #0
1000fb50:	e681      	b.n	1000f856 <__aeabi_dsub+0x196>
1000fb52:	4662      	mov	r2, ip
1000fb54:	0006      	movs	r6, r0
1000fb56:	3a20      	subs	r2, #32
1000fb58:	40d6      	lsrs	r6, r2
1000fb5a:	4662      	mov	r2, ip
1000fb5c:	46b0      	mov	r8, r6
1000fb5e:	2a20      	cmp	r2, #32
1000fb60:	d100      	bne.n	1000fb64 <__aeabi_dsub+0x4a4>
1000fb62:	e0b7      	b.n	1000fcd4 <__aeabi_dsub+0x614>
1000fb64:	2240      	movs	r2, #64	; 0x40
1000fb66:	4666      	mov	r6, ip
1000fb68:	1b92      	subs	r2, r2, r6
1000fb6a:	4090      	lsls	r0, r2
1000fb6c:	4301      	orrs	r1, r0
1000fb6e:	4642      	mov	r2, r8
1000fb70:	1e48      	subs	r0, r1, #1
1000fb72:	4181      	sbcs	r1, r0
1000fb74:	4311      	orrs	r1, r2
1000fb76:	2200      	movs	r2, #0
1000fb78:	e68a      	b.n	1000f890 <__aeabi_dsub+0x1d0>
1000fb7a:	4c79      	ldr	r4, [pc, #484]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fb7c:	42a2      	cmp	r2, r4
1000fb7e:	d000      	beq.n	1000fb82 <__aeabi_dsub+0x4c2>
1000fb80:	e761      	b.n	1000fa46 <__aeabi_dsub+0x386>
1000fb82:	0007      	movs	r7, r0
1000fb84:	000d      	movs	r5, r1
1000fb86:	0014      	movs	r4, r2
1000fb88:	469a      	mov	sl, r3
1000fb8a:	e5c5      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fb8c:	2c00      	cmp	r4, #0
1000fb8e:	d141      	bne.n	1000fc14 <__aeabi_dsub+0x554>
1000fb90:	003c      	movs	r4, r7
1000fb92:	432c      	orrs	r4, r5
1000fb94:	d078      	beq.n	1000fc88 <__aeabi_dsub+0x5c8>
1000fb96:	43f4      	mvns	r4, r6
1000fb98:	46a1      	mov	r9, r4
1000fb9a:	2c00      	cmp	r4, #0
1000fb9c:	d020      	beq.n	1000fbe0 <__aeabi_dsub+0x520>
1000fb9e:	4c70      	ldr	r4, [pc, #448]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fba0:	42a2      	cmp	r2, r4
1000fba2:	d071      	beq.n	1000fc88 <__aeabi_dsub+0x5c8>
1000fba4:	464c      	mov	r4, r9
1000fba6:	2c38      	cmp	r4, #56	; 0x38
1000fba8:	dd00      	ble.n	1000fbac <__aeabi_dsub+0x4ec>
1000fbaa:	e0b2      	b.n	1000fd12 <__aeabi_dsub+0x652>
1000fbac:	2c1f      	cmp	r4, #31
1000fbae:	dd00      	ble.n	1000fbb2 <__aeabi_dsub+0x4f2>
1000fbb0:	e0bc      	b.n	1000fd2c <__aeabi_dsub+0x66c>
1000fbb2:	2620      	movs	r6, #32
1000fbb4:	1b34      	subs	r4, r6, r4
1000fbb6:	46a2      	mov	sl, r4
1000fbb8:	003c      	movs	r4, r7
1000fbba:	4656      	mov	r6, sl
1000fbbc:	40b4      	lsls	r4, r6
1000fbbe:	464e      	mov	r6, r9
1000fbc0:	46a0      	mov	r8, r4
1000fbc2:	002c      	movs	r4, r5
1000fbc4:	40f4      	lsrs	r4, r6
1000fbc6:	46a4      	mov	ip, r4
1000fbc8:	4644      	mov	r4, r8
1000fbca:	4666      	mov	r6, ip
1000fbcc:	4334      	orrs	r4, r6
1000fbce:	46a4      	mov	ip, r4
1000fbd0:	4654      	mov	r4, sl
1000fbd2:	40a5      	lsls	r5, r4
1000fbd4:	4664      	mov	r4, ip
1000fbd6:	1e6e      	subs	r6, r5, #1
1000fbd8:	41b5      	sbcs	r5, r6
1000fbda:	4325      	orrs	r5, r4
1000fbdc:	464c      	mov	r4, r9
1000fbde:	40e7      	lsrs	r7, r4
1000fbe0:	186d      	adds	r5, r5, r1
1000fbe2:	428d      	cmp	r5, r1
1000fbe4:	4189      	sbcs	r1, r1
1000fbe6:	183f      	adds	r7, r7, r0
1000fbe8:	4249      	negs	r1, r1
1000fbea:	19cf      	adds	r7, r1, r7
1000fbec:	0014      	movs	r4, r2
1000fbee:	e656      	b.n	1000f89e <__aeabi_dsub+0x1de>
1000fbf0:	2a00      	cmp	r2, #0
1000fbf2:	d12f      	bne.n	1000fc54 <__aeabi_dsub+0x594>
1000fbf4:	0002      	movs	r2, r0
1000fbf6:	430a      	orrs	r2, r1
1000fbf8:	d100      	bne.n	1000fbfc <__aeabi_dsub+0x53c>
1000fbfa:	e084      	b.n	1000fd06 <__aeabi_dsub+0x646>
1000fbfc:	0007      	movs	r7, r0
1000fbfe:	000d      	movs	r5, r1
1000fc00:	469a      	mov	sl, r3
1000fc02:	4c57      	ldr	r4, [pc, #348]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fc04:	e588      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fc06:	433d      	orrs	r5, r7
1000fc08:	1e6f      	subs	r7, r5, #1
1000fc0a:	41bd      	sbcs	r5, r7
1000fc0c:	b2ec      	uxtb	r4, r5
1000fc0e:	2700      	movs	r7, #0
1000fc10:	1b0d      	subs	r5, r1, r4
1000fc12:	e760      	b.n	1000fad6 <__aeabi_dsub+0x416>
1000fc14:	4c52      	ldr	r4, [pc, #328]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fc16:	42a2      	cmp	r2, r4
1000fc18:	d036      	beq.n	1000fc88 <__aeabi_dsub+0x5c8>
1000fc1a:	4274      	negs	r4, r6
1000fc1c:	2680      	movs	r6, #128	; 0x80
1000fc1e:	0436      	lsls	r6, r6, #16
1000fc20:	46a1      	mov	r9, r4
1000fc22:	4337      	orrs	r7, r6
1000fc24:	e7be      	b.n	1000fba4 <__aeabi_dsub+0x4e4>
1000fc26:	0002      	movs	r2, r0
1000fc28:	430a      	orrs	r2, r1
1000fc2a:	d100      	bne.n	1000fc2e <__aeabi_dsub+0x56e>
1000fc2c:	e574      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fc2e:	1a6a      	subs	r2, r5, r1
1000fc30:	4690      	mov	r8, r2
1000fc32:	4545      	cmp	r5, r8
1000fc34:	41b6      	sbcs	r6, r6
1000fc36:	1a3a      	subs	r2, r7, r0
1000fc38:	4276      	negs	r6, r6
1000fc3a:	1b92      	subs	r2, r2, r6
1000fc3c:	4694      	mov	ip, r2
1000fc3e:	0212      	lsls	r2, r2, #8
1000fc40:	d400      	bmi.n	1000fc44 <__aeabi_dsub+0x584>
1000fc42:	e5f7      	b.n	1000f834 <__aeabi_dsub+0x174>
1000fc44:	1b4d      	subs	r5, r1, r5
1000fc46:	42a9      	cmp	r1, r5
1000fc48:	4189      	sbcs	r1, r1
1000fc4a:	1bc7      	subs	r7, r0, r7
1000fc4c:	4249      	negs	r1, r1
1000fc4e:	1a7f      	subs	r7, r7, r1
1000fc50:	469a      	mov	sl, r3
1000fc52:	e561      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fc54:	0002      	movs	r2, r0
1000fc56:	430a      	orrs	r2, r1
1000fc58:	d03a      	beq.n	1000fcd0 <__aeabi_dsub+0x610>
1000fc5a:	08ed      	lsrs	r5, r5, #3
1000fc5c:	077c      	lsls	r4, r7, #29
1000fc5e:	432c      	orrs	r4, r5
1000fc60:	2580      	movs	r5, #128	; 0x80
1000fc62:	08fa      	lsrs	r2, r7, #3
1000fc64:	032d      	lsls	r5, r5, #12
1000fc66:	422a      	tst	r2, r5
1000fc68:	d008      	beq.n	1000fc7c <__aeabi_dsub+0x5bc>
1000fc6a:	08c7      	lsrs	r7, r0, #3
1000fc6c:	422f      	tst	r7, r5
1000fc6e:	d105      	bne.n	1000fc7c <__aeabi_dsub+0x5bc>
1000fc70:	0745      	lsls	r5, r0, #29
1000fc72:	002c      	movs	r4, r5
1000fc74:	003a      	movs	r2, r7
1000fc76:	469a      	mov	sl, r3
1000fc78:	08c9      	lsrs	r1, r1, #3
1000fc7a:	430c      	orrs	r4, r1
1000fc7c:	0f67      	lsrs	r7, r4, #29
1000fc7e:	00d2      	lsls	r2, r2, #3
1000fc80:	00e5      	lsls	r5, r4, #3
1000fc82:	4317      	orrs	r7, r2
1000fc84:	4c36      	ldr	r4, [pc, #216]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fc86:	e547      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fc88:	0007      	movs	r7, r0
1000fc8a:	000d      	movs	r5, r1
1000fc8c:	0014      	movs	r4, r2
1000fc8e:	e543      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fc90:	003a      	movs	r2, r7
1000fc92:	432a      	orrs	r2, r5
1000fc94:	d043      	beq.n	1000fd1e <__aeabi_dsub+0x65e>
1000fc96:	0002      	movs	r2, r0
1000fc98:	430a      	orrs	r2, r1
1000fc9a:	d019      	beq.n	1000fcd0 <__aeabi_dsub+0x610>
1000fc9c:	08ed      	lsrs	r5, r5, #3
1000fc9e:	077c      	lsls	r4, r7, #29
1000fca0:	432c      	orrs	r4, r5
1000fca2:	2580      	movs	r5, #128	; 0x80
1000fca4:	08fa      	lsrs	r2, r7, #3
1000fca6:	032d      	lsls	r5, r5, #12
1000fca8:	422a      	tst	r2, r5
1000fcaa:	d007      	beq.n	1000fcbc <__aeabi_dsub+0x5fc>
1000fcac:	08c6      	lsrs	r6, r0, #3
1000fcae:	422e      	tst	r6, r5
1000fcb0:	d104      	bne.n	1000fcbc <__aeabi_dsub+0x5fc>
1000fcb2:	0747      	lsls	r7, r0, #29
1000fcb4:	003c      	movs	r4, r7
1000fcb6:	0032      	movs	r2, r6
1000fcb8:	08c9      	lsrs	r1, r1, #3
1000fcba:	430c      	orrs	r4, r1
1000fcbc:	00d7      	lsls	r7, r2, #3
1000fcbe:	0f62      	lsrs	r2, r4, #29
1000fcc0:	00e5      	lsls	r5, r4, #3
1000fcc2:	4317      	orrs	r7, r2
1000fcc4:	469a      	mov	sl, r3
1000fcc6:	4c26      	ldr	r4, [pc, #152]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fcc8:	e526      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fcca:	2200      	movs	r2, #0
1000fccc:	2500      	movs	r5, #0
1000fcce:	e544      	b.n	1000f75a <__aeabi_dsub+0x9a>
1000fcd0:	4c23      	ldr	r4, [pc, #140]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fcd2:	e521      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fcd4:	2000      	movs	r0, #0
1000fcd6:	e749      	b.n	1000fb6c <__aeabi_dsub+0x4ac>
1000fcd8:	2300      	movs	r3, #0
1000fcda:	2500      	movs	r5, #0
1000fcdc:	e5bb      	b.n	1000f856 <__aeabi_dsub+0x196>
1000fcde:	464c      	mov	r4, r9
1000fce0:	003e      	movs	r6, r7
1000fce2:	3c20      	subs	r4, #32
1000fce4:	40e6      	lsrs	r6, r4
1000fce6:	464c      	mov	r4, r9
1000fce8:	46b4      	mov	ip, r6
1000fcea:	2c20      	cmp	r4, #32
1000fcec:	d031      	beq.n	1000fd52 <__aeabi_dsub+0x692>
1000fcee:	2440      	movs	r4, #64	; 0x40
1000fcf0:	464e      	mov	r6, r9
1000fcf2:	1ba6      	subs	r6, r4, r6
1000fcf4:	40b7      	lsls	r7, r6
1000fcf6:	433d      	orrs	r5, r7
1000fcf8:	1e6c      	subs	r4, r5, #1
1000fcfa:	41a5      	sbcs	r5, r4
1000fcfc:	4664      	mov	r4, ip
1000fcfe:	432c      	orrs	r4, r5
1000fd00:	2700      	movs	r7, #0
1000fd02:	1b0d      	subs	r5, r1, r4
1000fd04:	e6e7      	b.n	1000fad6 <__aeabi_dsub+0x416>
1000fd06:	2280      	movs	r2, #128	; 0x80
1000fd08:	2300      	movs	r3, #0
1000fd0a:	0312      	lsls	r2, r2, #12
1000fd0c:	4c14      	ldr	r4, [pc, #80]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fd0e:	2500      	movs	r5, #0
1000fd10:	e5a1      	b.n	1000f856 <__aeabi_dsub+0x196>
1000fd12:	433d      	orrs	r5, r7
1000fd14:	1e6f      	subs	r7, r5, #1
1000fd16:	41bd      	sbcs	r5, r7
1000fd18:	2700      	movs	r7, #0
1000fd1a:	b2ed      	uxtb	r5, r5
1000fd1c:	e760      	b.n	1000fbe0 <__aeabi_dsub+0x520>
1000fd1e:	0007      	movs	r7, r0
1000fd20:	000d      	movs	r5, r1
1000fd22:	4c0f      	ldr	r4, [pc, #60]	; (1000fd60 <__aeabi_dsub+0x6a0>)
1000fd24:	e4f8      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fd26:	0007      	movs	r7, r0
1000fd28:	000d      	movs	r5, r1
1000fd2a:	e4f5      	b.n	1000f718 <__aeabi_dsub+0x58>
1000fd2c:	464e      	mov	r6, r9
1000fd2e:	003c      	movs	r4, r7
1000fd30:	3e20      	subs	r6, #32
1000fd32:	40f4      	lsrs	r4, r6
1000fd34:	46a0      	mov	r8, r4
1000fd36:	464c      	mov	r4, r9
1000fd38:	2c20      	cmp	r4, #32
1000fd3a:	d00e      	beq.n	1000fd5a <__aeabi_dsub+0x69a>
1000fd3c:	2440      	movs	r4, #64	; 0x40
1000fd3e:	464e      	mov	r6, r9
1000fd40:	1ba4      	subs	r4, r4, r6
1000fd42:	40a7      	lsls	r7, r4
1000fd44:	433d      	orrs	r5, r7
1000fd46:	1e6f      	subs	r7, r5, #1
1000fd48:	41bd      	sbcs	r5, r7
1000fd4a:	4644      	mov	r4, r8
1000fd4c:	2700      	movs	r7, #0
1000fd4e:	4325      	orrs	r5, r4
1000fd50:	e746      	b.n	1000fbe0 <__aeabi_dsub+0x520>
1000fd52:	2700      	movs	r7, #0
1000fd54:	e7cf      	b.n	1000fcf6 <__aeabi_dsub+0x636>
1000fd56:	000d      	movs	r5, r1
1000fd58:	e573      	b.n	1000f842 <__aeabi_dsub+0x182>
1000fd5a:	2700      	movs	r7, #0
1000fd5c:	e7f2      	b.n	1000fd44 <__aeabi_dsub+0x684>
1000fd5e:	46c0      	nop			; (mov r8, r8)
1000fd60:	000007ff 	.word	0x000007ff
1000fd64:	ff7fffff 	.word	0xff7fffff

1000fd68 <__aeabi_d2iz>:
1000fd68:	030b      	lsls	r3, r1, #12
1000fd6a:	b530      	push	{r4, r5, lr}
1000fd6c:	4d13      	ldr	r5, [pc, #76]	; (1000fdbc <__aeabi_d2iz+0x54>)
1000fd6e:	0b1a      	lsrs	r2, r3, #12
1000fd70:	004b      	lsls	r3, r1, #1
1000fd72:	0d5b      	lsrs	r3, r3, #21
1000fd74:	0fc9      	lsrs	r1, r1, #31
1000fd76:	2400      	movs	r4, #0
1000fd78:	42ab      	cmp	r3, r5
1000fd7a:	dd11      	ble.n	1000fda0 <__aeabi_d2iz+0x38>
1000fd7c:	4c10      	ldr	r4, [pc, #64]	; (1000fdc0 <__aeabi_d2iz+0x58>)
1000fd7e:	42a3      	cmp	r3, r4
1000fd80:	dc10      	bgt.n	1000fda4 <__aeabi_d2iz+0x3c>
1000fd82:	2480      	movs	r4, #128	; 0x80
1000fd84:	0364      	lsls	r4, r4, #13
1000fd86:	4322      	orrs	r2, r4
1000fd88:	4c0e      	ldr	r4, [pc, #56]	; (1000fdc4 <__aeabi_d2iz+0x5c>)
1000fd8a:	1ae4      	subs	r4, r4, r3
1000fd8c:	2c1f      	cmp	r4, #31
1000fd8e:	dd0c      	ble.n	1000fdaa <__aeabi_d2iz+0x42>
1000fd90:	480d      	ldr	r0, [pc, #52]	; (1000fdc8 <__aeabi_d2iz+0x60>)
1000fd92:	1ac3      	subs	r3, r0, r3
1000fd94:	40da      	lsrs	r2, r3
1000fd96:	0013      	movs	r3, r2
1000fd98:	425c      	negs	r4, r3
1000fd9a:	2900      	cmp	r1, #0
1000fd9c:	d100      	bne.n	1000fda0 <__aeabi_d2iz+0x38>
1000fd9e:	001c      	movs	r4, r3
1000fda0:	0020      	movs	r0, r4
1000fda2:	bd30      	pop	{r4, r5, pc}
1000fda4:	4b09      	ldr	r3, [pc, #36]	; (1000fdcc <__aeabi_d2iz+0x64>)
1000fda6:	18cc      	adds	r4, r1, r3
1000fda8:	e7fa      	b.n	1000fda0 <__aeabi_d2iz+0x38>
1000fdaa:	40e0      	lsrs	r0, r4
1000fdac:	4c08      	ldr	r4, [pc, #32]	; (1000fdd0 <__aeabi_d2iz+0x68>)
1000fdae:	46a4      	mov	ip, r4
1000fdb0:	4463      	add	r3, ip
1000fdb2:	409a      	lsls	r2, r3
1000fdb4:	0013      	movs	r3, r2
1000fdb6:	4303      	orrs	r3, r0
1000fdb8:	e7ee      	b.n	1000fd98 <__aeabi_d2iz+0x30>
1000fdba:	46c0      	nop			; (mov r8, r8)
1000fdbc:	000003fe 	.word	0x000003fe
1000fdc0:	0000041d 	.word	0x0000041d
1000fdc4:	00000433 	.word	0x00000433
1000fdc8:	00000413 	.word	0x00000413
1000fdcc:	7fffffff 	.word	0x7fffffff
1000fdd0:	fffffbed 	.word	0xfffffbed

1000fdd4 <__aeabi_ui2d>:
1000fdd4:	b570      	push	{r4, r5, r6, lr}
1000fdd6:	1e05      	subs	r5, r0, #0
1000fdd8:	d028      	beq.n	1000fe2c <__aeabi_ui2d+0x58>
1000fdda:	f000 f8ab 	bl	1000ff34 <__clzsi2>
1000fdde:	4b15      	ldr	r3, [pc, #84]	; (1000fe34 <__aeabi_ui2d+0x60>)
1000fde0:	4a15      	ldr	r2, [pc, #84]	; (1000fe38 <__aeabi_ui2d+0x64>)
1000fde2:	1a1b      	subs	r3, r3, r0
1000fde4:	1ad2      	subs	r2, r2, r3
1000fde6:	2a1f      	cmp	r2, #31
1000fde8:	dd16      	ble.n	1000fe18 <__aeabi_ui2d+0x44>
1000fdea:	002c      	movs	r4, r5
1000fdec:	4a13      	ldr	r2, [pc, #76]	; (1000fe3c <__aeabi_ui2d+0x68>)
1000fdee:	2500      	movs	r5, #0
1000fdf0:	1ad2      	subs	r2, r2, r3
1000fdf2:	4094      	lsls	r4, r2
1000fdf4:	055a      	lsls	r2, r3, #21
1000fdf6:	0324      	lsls	r4, r4, #12
1000fdf8:	0b24      	lsrs	r4, r4, #12
1000fdfa:	0d52      	lsrs	r2, r2, #21
1000fdfc:	2100      	movs	r1, #0
1000fdfe:	0324      	lsls	r4, r4, #12
1000fe00:	0d0b      	lsrs	r3, r1, #20
1000fe02:	0b24      	lsrs	r4, r4, #12
1000fe04:	051b      	lsls	r3, r3, #20
1000fe06:	4323      	orrs	r3, r4
1000fe08:	4c0d      	ldr	r4, [pc, #52]	; (1000fe40 <__aeabi_ui2d+0x6c>)
1000fe0a:	0512      	lsls	r2, r2, #20
1000fe0c:	4023      	ands	r3, r4
1000fe0e:	4313      	orrs	r3, r2
1000fe10:	005b      	lsls	r3, r3, #1
1000fe12:	0028      	movs	r0, r5
1000fe14:	0859      	lsrs	r1, r3, #1
1000fe16:	bd70      	pop	{r4, r5, r6, pc}
1000fe18:	210b      	movs	r1, #11
1000fe1a:	002c      	movs	r4, r5
1000fe1c:	1a08      	subs	r0, r1, r0
1000fe1e:	40c4      	lsrs	r4, r0
1000fe20:	4095      	lsls	r5, r2
1000fe22:	0324      	lsls	r4, r4, #12
1000fe24:	055a      	lsls	r2, r3, #21
1000fe26:	0b24      	lsrs	r4, r4, #12
1000fe28:	0d52      	lsrs	r2, r2, #21
1000fe2a:	e7e7      	b.n	1000fdfc <__aeabi_ui2d+0x28>
1000fe2c:	2200      	movs	r2, #0
1000fe2e:	2400      	movs	r4, #0
1000fe30:	e7e4      	b.n	1000fdfc <__aeabi_ui2d+0x28>
1000fe32:	46c0      	nop			; (mov r8, r8)
1000fe34:	0000041e 	.word	0x0000041e
1000fe38:	00000433 	.word	0x00000433
1000fe3c:	00000413 	.word	0x00000413
1000fe40:	800fffff 	.word	0x800fffff

1000fe44 <__aeabi_cdrcmple>:
1000fe44:	4684      	mov	ip, r0
1000fe46:	1c10      	adds	r0, r2, #0
1000fe48:	4662      	mov	r2, ip
1000fe4a:	468c      	mov	ip, r1
1000fe4c:	1c19      	adds	r1, r3, #0
1000fe4e:	4663      	mov	r3, ip
1000fe50:	e000      	b.n	1000fe54 <__aeabi_cdcmpeq>
1000fe52:	46c0      	nop			; (mov r8, r8)

1000fe54 <__aeabi_cdcmpeq>:
1000fe54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000fe56:	f000 f9df 	bl	10010218 <__ledf2>
1000fe5a:	2800      	cmp	r0, #0
1000fe5c:	d401      	bmi.n	1000fe62 <__aeabi_cdcmpeq+0xe>
1000fe5e:	2100      	movs	r1, #0
1000fe60:	42c8      	cmn	r0, r1
1000fe62:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000fe64 <__aeabi_dcmpeq>:
1000fe64:	b510      	push	{r4, lr}
1000fe66:	f000 f933 	bl	100100d0 <__eqdf2>
1000fe6a:	4240      	negs	r0, r0
1000fe6c:	3001      	adds	r0, #1
1000fe6e:	bd10      	pop	{r4, pc}

1000fe70 <__aeabi_dcmplt>:
1000fe70:	b510      	push	{r4, lr}
1000fe72:	f000 f9d1 	bl	10010218 <__ledf2>
1000fe76:	2800      	cmp	r0, #0
1000fe78:	db01      	blt.n	1000fe7e <__aeabi_dcmplt+0xe>
1000fe7a:	2000      	movs	r0, #0
1000fe7c:	bd10      	pop	{r4, pc}
1000fe7e:	2001      	movs	r0, #1
1000fe80:	bd10      	pop	{r4, pc}
1000fe82:	46c0      	nop			; (mov r8, r8)

1000fe84 <__aeabi_dcmple>:
1000fe84:	b510      	push	{r4, lr}
1000fe86:	f000 f9c7 	bl	10010218 <__ledf2>
1000fe8a:	2800      	cmp	r0, #0
1000fe8c:	dd01      	ble.n	1000fe92 <__aeabi_dcmple+0xe>
1000fe8e:	2000      	movs	r0, #0
1000fe90:	bd10      	pop	{r4, pc}
1000fe92:	2001      	movs	r0, #1
1000fe94:	bd10      	pop	{r4, pc}
1000fe96:	46c0      	nop			; (mov r8, r8)

1000fe98 <__aeabi_dcmpgt>:
1000fe98:	b510      	push	{r4, lr}
1000fe9a:	f000 f959 	bl	10010150 <__gedf2>
1000fe9e:	2800      	cmp	r0, #0
1000fea0:	dc01      	bgt.n	1000fea6 <__aeabi_dcmpgt+0xe>
1000fea2:	2000      	movs	r0, #0
1000fea4:	bd10      	pop	{r4, pc}
1000fea6:	2001      	movs	r0, #1
1000fea8:	bd10      	pop	{r4, pc}
1000feaa:	46c0      	nop			; (mov r8, r8)

1000feac <__aeabi_dcmpge>:
1000feac:	b510      	push	{r4, lr}
1000feae:	f000 f94f 	bl	10010150 <__gedf2>
1000feb2:	2800      	cmp	r0, #0
1000feb4:	da01      	bge.n	1000feba <__aeabi_dcmpge+0xe>
1000feb6:	2000      	movs	r0, #0
1000feb8:	bd10      	pop	{r4, pc}
1000feba:	2001      	movs	r0, #1
1000febc:	bd10      	pop	{r4, pc}
1000febe:	46c0      	nop			; (mov r8, r8)

1000fec0 <__aeabi_cfrcmple>:
1000fec0:	4684      	mov	ip, r0
1000fec2:	1c08      	adds	r0, r1, #0
1000fec4:	4661      	mov	r1, ip
1000fec6:	e7ff      	b.n	1000fec8 <__aeabi_cfcmpeq>

1000fec8 <__aeabi_cfcmpeq>:
1000fec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000feca:	f000 f8bd 	bl	10010048 <__lesf2>
1000fece:	2800      	cmp	r0, #0
1000fed0:	d401      	bmi.n	1000fed6 <__aeabi_cfcmpeq+0xe>
1000fed2:	2100      	movs	r1, #0
1000fed4:	42c8      	cmn	r0, r1
1000fed6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1000fed8 <__aeabi_fcmpeq>:
1000fed8:	b510      	push	{r4, lr}
1000feda:	f000 f849 	bl	1000ff70 <__eqsf2>
1000fede:	4240      	negs	r0, r0
1000fee0:	3001      	adds	r0, #1
1000fee2:	bd10      	pop	{r4, pc}

1000fee4 <__aeabi_fcmplt>:
1000fee4:	b510      	push	{r4, lr}
1000fee6:	f000 f8af 	bl	10010048 <__lesf2>
1000feea:	2800      	cmp	r0, #0
1000feec:	db01      	blt.n	1000fef2 <__aeabi_fcmplt+0xe>
1000feee:	2000      	movs	r0, #0
1000fef0:	bd10      	pop	{r4, pc}
1000fef2:	2001      	movs	r0, #1
1000fef4:	bd10      	pop	{r4, pc}
1000fef6:	46c0      	nop			; (mov r8, r8)

1000fef8 <__aeabi_fcmple>:
1000fef8:	b510      	push	{r4, lr}
1000fefa:	f000 f8a5 	bl	10010048 <__lesf2>
1000fefe:	2800      	cmp	r0, #0
1000ff00:	dd01      	ble.n	1000ff06 <__aeabi_fcmple+0xe>
1000ff02:	2000      	movs	r0, #0
1000ff04:	bd10      	pop	{r4, pc}
1000ff06:	2001      	movs	r0, #1
1000ff08:	bd10      	pop	{r4, pc}
1000ff0a:	46c0      	nop			; (mov r8, r8)

1000ff0c <__aeabi_fcmpgt>:
1000ff0c:	b510      	push	{r4, lr}
1000ff0e:	f000 f857 	bl	1000ffc0 <__gesf2>
1000ff12:	2800      	cmp	r0, #0
1000ff14:	dc01      	bgt.n	1000ff1a <__aeabi_fcmpgt+0xe>
1000ff16:	2000      	movs	r0, #0
1000ff18:	bd10      	pop	{r4, pc}
1000ff1a:	2001      	movs	r0, #1
1000ff1c:	bd10      	pop	{r4, pc}
1000ff1e:	46c0      	nop			; (mov r8, r8)

1000ff20 <__aeabi_fcmpge>:
1000ff20:	b510      	push	{r4, lr}
1000ff22:	f000 f84d 	bl	1000ffc0 <__gesf2>
1000ff26:	2800      	cmp	r0, #0
1000ff28:	da01      	bge.n	1000ff2e <__aeabi_fcmpge+0xe>
1000ff2a:	2000      	movs	r0, #0
1000ff2c:	bd10      	pop	{r4, pc}
1000ff2e:	2001      	movs	r0, #1
1000ff30:	bd10      	pop	{r4, pc}
1000ff32:	46c0      	nop			; (mov r8, r8)

1000ff34 <__clzsi2>:
1000ff34:	211c      	movs	r1, #28
1000ff36:	2301      	movs	r3, #1
1000ff38:	041b      	lsls	r3, r3, #16
1000ff3a:	4298      	cmp	r0, r3
1000ff3c:	d301      	bcc.n	1000ff42 <__clzsi2+0xe>
1000ff3e:	0c00      	lsrs	r0, r0, #16
1000ff40:	3910      	subs	r1, #16
1000ff42:	0a1b      	lsrs	r3, r3, #8
1000ff44:	4298      	cmp	r0, r3
1000ff46:	d301      	bcc.n	1000ff4c <__clzsi2+0x18>
1000ff48:	0a00      	lsrs	r0, r0, #8
1000ff4a:	3908      	subs	r1, #8
1000ff4c:	091b      	lsrs	r3, r3, #4
1000ff4e:	4298      	cmp	r0, r3
1000ff50:	d301      	bcc.n	1000ff56 <__clzsi2+0x22>
1000ff52:	0900      	lsrs	r0, r0, #4
1000ff54:	3904      	subs	r1, #4
1000ff56:	a202      	add	r2, pc, #8	; (adr r2, 1000ff60 <__clzsi2+0x2c>)
1000ff58:	5c10      	ldrb	r0, [r2, r0]
1000ff5a:	1840      	adds	r0, r0, r1
1000ff5c:	4770      	bx	lr
1000ff5e:	46c0      	nop			; (mov r8, r8)
1000ff60:	02020304 	.word	0x02020304
1000ff64:	01010101 	.word	0x01010101
	...

1000ff70 <__eqsf2>:
1000ff70:	0243      	lsls	r3, r0, #9
1000ff72:	b570      	push	{r4, r5, r6, lr}
1000ff74:	0042      	lsls	r2, r0, #1
1000ff76:	004c      	lsls	r4, r1, #1
1000ff78:	0a5d      	lsrs	r5, r3, #9
1000ff7a:	0fc3      	lsrs	r3, r0, #31
1000ff7c:	0248      	lsls	r0, r1, #9
1000ff7e:	0e12      	lsrs	r2, r2, #24
1000ff80:	0a46      	lsrs	r6, r0, #9
1000ff82:	0e24      	lsrs	r4, r4, #24
1000ff84:	0fc9      	lsrs	r1, r1, #31
1000ff86:	2aff      	cmp	r2, #255	; 0xff
1000ff88:	d00f      	beq.n	1000ffaa <__eqsf2+0x3a>
1000ff8a:	2cff      	cmp	r4, #255	; 0xff
1000ff8c:	d011      	beq.n	1000ffb2 <__eqsf2+0x42>
1000ff8e:	2001      	movs	r0, #1
1000ff90:	42a2      	cmp	r2, r4
1000ff92:	d000      	beq.n	1000ff96 <__eqsf2+0x26>
1000ff94:	bd70      	pop	{r4, r5, r6, pc}
1000ff96:	42b5      	cmp	r5, r6
1000ff98:	d1fc      	bne.n	1000ff94 <__eqsf2+0x24>
1000ff9a:	428b      	cmp	r3, r1
1000ff9c:	d00d      	beq.n	1000ffba <__eqsf2+0x4a>
1000ff9e:	2a00      	cmp	r2, #0
1000ffa0:	d1f8      	bne.n	1000ff94 <__eqsf2+0x24>
1000ffa2:	0028      	movs	r0, r5
1000ffa4:	1e43      	subs	r3, r0, #1
1000ffa6:	4198      	sbcs	r0, r3
1000ffa8:	e7f4      	b.n	1000ff94 <__eqsf2+0x24>
1000ffaa:	2001      	movs	r0, #1
1000ffac:	2d00      	cmp	r5, #0
1000ffae:	d1f1      	bne.n	1000ff94 <__eqsf2+0x24>
1000ffb0:	e7eb      	b.n	1000ff8a <__eqsf2+0x1a>
1000ffb2:	2001      	movs	r0, #1
1000ffb4:	2e00      	cmp	r6, #0
1000ffb6:	d1ed      	bne.n	1000ff94 <__eqsf2+0x24>
1000ffb8:	e7e9      	b.n	1000ff8e <__eqsf2+0x1e>
1000ffba:	2000      	movs	r0, #0
1000ffbc:	e7ea      	b.n	1000ff94 <__eqsf2+0x24>
1000ffbe:	46c0      	nop			; (mov r8, r8)

1000ffc0 <__gesf2>:
1000ffc0:	0243      	lsls	r3, r0, #9
1000ffc2:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffc4:	0042      	lsls	r2, r0, #1
1000ffc6:	0a5d      	lsrs	r5, r3, #9
1000ffc8:	0fc3      	lsrs	r3, r0, #31
1000ffca:	0248      	lsls	r0, r1, #9
1000ffcc:	0a44      	lsrs	r4, r0, #9
1000ffce:	0048      	lsls	r0, r1, #1
1000ffd0:	0e12      	lsrs	r2, r2, #24
1000ffd2:	0e00      	lsrs	r0, r0, #24
1000ffd4:	0fc9      	lsrs	r1, r1, #31
1000ffd6:	2aff      	cmp	r2, #255	; 0xff
1000ffd8:	d01f      	beq.n	1001001a <__gesf2+0x5a>
1000ffda:	28ff      	cmp	r0, #255	; 0xff
1000ffdc:	d022      	beq.n	10010024 <__gesf2+0x64>
1000ffde:	2a00      	cmp	r2, #0
1000ffe0:	d109      	bne.n	1000fff6 <__gesf2+0x36>
1000ffe2:	426e      	negs	r6, r5
1000ffe4:	416e      	adcs	r6, r5
1000ffe6:	2800      	cmp	r0, #0
1000ffe8:	d10f      	bne.n	1001000a <__gesf2+0x4a>
1000ffea:	2c00      	cmp	r4, #0
1000ffec:	d10d      	bne.n	1001000a <__gesf2+0x4a>
1000ffee:	2000      	movs	r0, #0
1000fff0:	2d00      	cmp	r5, #0
1000fff2:	d009      	beq.n	10010008 <__gesf2+0x48>
1000fff4:	e005      	b.n	10010002 <__gesf2+0x42>
1000fff6:	2800      	cmp	r0, #0
1000fff8:	d101      	bne.n	1000fffe <__gesf2+0x3e>
1000fffa:	2c00      	cmp	r4, #0
1000fffc:	d001      	beq.n	10010002 <__gesf2+0x42>
1000fffe:	428b      	cmp	r3, r1
10010000:	d013      	beq.n	1001002a <__gesf2+0x6a>
10010002:	4258      	negs	r0, r3
10010004:	2301      	movs	r3, #1
10010006:	4318      	orrs	r0, r3
10010008:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001000a:	2e00      	cmp	r6, #0
1001000c:	d0f7      	beq.n	1000fffe <__gesf2+0x3e>
1001000e:	4248      	negs	r0, r1
10010010:	4141      	adcs	r1, r0
10010012:	2001      	movs	r0, #1
10010014:	4249      	negs	r1, r1
10010016:	4308      	orrs	r0, r1
10010018:	e7f6      	b.n	10010008 <__gesf2+0x48>
1001001a:	2d00      	cmp	r5, #0
1001001c:	d0dd      	beq.n	1000ffda <__gesf2+0x1a>
1001001e:	2002      	movs	r0, #2
10010020:	4240      	negs	r0, r0
10010022:	e7f1      	b.n	10010008 <__gesf2+0x48>
10010024:	2c00      	cmp	r4, #0
10010026:	d0da      	beq.n	1000ffde <__gesf2+0x1e>
10010028:	e7f9      	b.n	1001001e <__gesf2+0x5e>
1001002a:	4282      	cmp	r2, r0
1001002c:	dce9      	bgt.n	10010002 <__gesf2+0x42>
1001002e:	db04      	blt.n	1001003a <__gesf2+0x7a>
10010030:	42a5      	cmp	r5, r4
10010032:	d8e6      	bhi.n	10010002 <__gesf2+0x42>
10010034:	2000      	movs	r0, #0
10010036:	42a5      	cmp	r5, r4
10010038:	d2e6      	bcs.n	10010008 <__gesf2+0x48>
1001003a:	4258      	negs	r0, r3
1001003c:	4143      	adcs	r3, r0
1001003e:	2001      	movs	r0, #1
10010040:	425b      	negs	r3, r3
10010042:	4318      	orrs	r0, r3
10010044:	e7e0      	b.n	10010008 <__gesf2+0x48>
10010046:	46c0      	nop			; (mov r8, r8)

10010048 <__lesf2>:
10010048:	0243      	lsls	r3, r0, #9
1001004a:	b5f0      	push	{r4, r5, r6, r7, lr}
1001004c:	0042      	lsls	r2, r0, #1
1001004e:	004c      	lsls	r4, r1, #1
10010050:	0a5e      	lsrs	r6, r3, #9
10010052:	0fc3      	lsrs	r3, r0, #31
10010054:	0248      	lsls	r0, r1, #9
10010056:	0e12      	lsrs	r2, r2, #24
10010058:	0a45      	lsrs	r5, r0, #9
1001005a:	0e24      	lsrs	r4, r4, #24
1001005c:	0fc9      	lsrs	r1, r1, #31
1001005e:	2aff      	cmp	r2, #255	; 0xff
10010060:	d017      	beq.n	10010092 <__lesf2+0x4a>
10010062:	2cff      	cmp	r4, #255	; 0xff
10010064:	d019      	beq.n	1001009a <__lesf2+0x52>
10010066:	2a00      	cmp	r2, #0
10010068:	d10b      	bne.n	10010082 <__lesf2+0x3a>
1001006a:	4270      	negs	r0, r6
1001006c:	4170      	adcs	r0, r6
1001006e:	2c00      	cmp	r4, #0
10010070:	d017      	beq.n	100100a2 <__lesf2+0x5a>
10010072:	2800      	cmp	r0, #0
10010074:	d007      	beq.n	10010086 <__lesf2+0x3e>
10010076:	4248      	negs	r0, r1
10010078:	4141      	adcs	r1, r0
1001007a:	2001      	movs	r0, #1
1001007c:	4249      	negs	r1, r1
1001007e:	4308      	orrs	r0, r1
10010080:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010082:	2c00      	cmp	r4, #0
10010084:	d013      	beq.n	100100ae <__lesf2+0x66>
10010086:	428b      	cmp	r3, r1
10010088:	d014      	beq.n	100100b4 <__lesf2+0x6c>
1001008a:	4258      	negs	r0, r3
1001008c:	2301      	movs	r3, #1
1001008e:	4318      	orrs	r0, r3
10010090:	e7f6      	b.n	10010080 <__lesf2+0x38>
10010092:	2002      	movs	r0, #2
10010094:	2e00      	cmp	r6, #0
10010096:	d1f3      	bne.n	10010080 <__lesf2+0x38>
10010098:	e7e3      	b.n	10010062 <__lesf2+0x1a>
1001009a:	2002      	movs	r0, #2
1001009c:	2d00      	cmp	r5, #0
1001009e:	d1ef      	bne.n	10010080 <__lesf2+0x38>
100100a0:	e7e1      	b.n	10010066 <__lesf2+0x1e>
100100a2:	2d00      	cmp	r5, #0
100100a4:	d1e5      	bne.n	10010072 <__lesf2+0x2a>
100100a6:	2000      	movs	r0, #0
100100a8:	2e00      	cmp	r6, #0
100100aa:	d0e9      	beq.n	10010080 <__lesf2+0x38>
100100ac:	e7ed      	b.n	1001008a <__lesf2+0x42>
100100ae:	2d00      	cmp	r5, #0
100100b0:	d1e9      	bne.n	10010086 <__lesf2+0x3e>
100100b2:	e7ea      	b.n	1001008a <__lesf2+0x42>
100100b4:	42a2      	cmp	r2, r4
100100b6:	dce8      	bgt.n	1001008a <__lesf2+0x42>
100100b8:	db04      	blt.n	100100c4 <__lesf2+0x7c>
100100ba:	42ae      	cmp	r6, r5
100100bc:	d8e5      	bhi.n	1001008a <__lesf2+0x42>
100100be:	2000      	movs	r0, #0
100100c0:	42ae      	cmp	r6, r5
100100c2:	d2dd      	bcs.n	10010080 <__lesf2+0x38>
100100c4:	4258      	negs	r0, r3
100100c6:	4143      	adcs	r3, r0
100100c8:	2001      	movs	r0, #1
100100ca:	425b      	negs	r3, r3
100100cc:	4318      	orrs	r0, r3
100100ce:	e7d7      	b.n	10010080 <__lesf2+0x38>

100100d0 <__eqdf2>:
100100d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100100d2:	465f      	mov	r7, fp
100100d4:	4656      	mov	r6, sl
100100d6:	464d      	mov	r5, r9
100100d8:	4644      	mov	r4, r8
100100da:	b4f0      	push	{r4, r5, r6, r7}
100100dc:	031f      	lsls	r7, r3, #12
100100de:	005c      	lsls	r4, r3, #1
100100e0:	0fdb      	lsrs	r3, r3, #31
100100e2:	469a      	mov	sl, r3
100100e4:	4b19      	ldr	r3, [pc, #100]	; (1001014c <__eqdf2+0x7c>)
100100e6:	030e      	lsls	r6, r1, #12
100100e8:	004d      	lsls	r5, r1, #1
100100ea:	0fc9      	lsrs	r1, r1, #31
100100ec:	4680      	mov	r8, r0
100100ee:	0b36      	lsrs	r6, r6, #12
100100f0:	0d6d      	lsrs	r5, r5, #21
100100f2:	468b      	mov	fp, r1
100100f4:	4691      	mov	r9, r2
100100f6:	0b3f      	lsrs	r7, r7, #12
100100f8:	0d64      	lsrs	r4, r4, #21
100100fa:	429d      	cmp	r5, r3
100100fc:	d019      	beq.n	10010132 <__eqdf2+0x62>
100100fe:	4b13      	ldr	r3, [pc, #76]	; (1001014c <__eqdf2+0x7c>)
10010100:	429c      	cmp	r4, r3
10010102:	d01b      	beq.n	1001013c <__eqdf2+0x6c>
10010104:	2301      	movs	r3, #1
10010106:	42a5      	cmp	r5, r4
10010108:	d006      	beq.n	10010118 <__eqdf2+0x48>
1001010a:	0018      	movs	r0, r3
1001010c:	bc3c      	pop	{r2, r3, r4, r5}
1001010e:	4690      	mov	r8, r2
10010110:	4699      	mov	r9, r3
10010112:	46a2      	mov	sl, r4
10010114:	46ab      	mov	fp, r5
10010116:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010118:	42be      	cmp	r6, r7
1001011a:	d1f6      	bne.n	1001010a <__eqdf2+0x3a>
1001011c:	45c8      	cmp	r8, r9
1001011e:	d1f4      	bne.n	1001010a <__eqdf2+0x3a>
10010120:	45d3      	cmp	fp, sl
10010122:	d010      	beq.n	10010146 <__eqdf2+0x76>
10010124:	2d00      	cmp	r5, #0
10010126:	d1f0      	bne.n	1001010a <__eqdf2+0x3a>
10010128:	4330      	orrs	r0, r6
1001012a:	0003      	movs	r3, r0
1001012c:	1e5a      	subs	r2, r3, #1
1001012e:	4193      	sbcs	r3, r2
10010130:	e7eb      	b.n	1001010a <__eqdf2+0x3a>
10010132:	0031      	movs	r1, r6
10010134:	2301      	movs	r3, #1
10010136:	4301      	orrs	r1, r0
10010138:	d1e7      	bne.n	1001010a <__eqdf2+0x3a>
1001013a:	e7e0      	b.n	100100fe <__eqdf2+0x2e>
1001013c:	433a      	orrs	r2, r7
1001013e:	2301      	movs	r3, #1
10010140:	2a00      	cmp	r2, #0
10010142:	d1e2      	bne.n	1001010a <__eqdf2+0x3a>
10010144:	e7de      	b.n	10010104 <__eqdf2+0x34>
10010146:	2300      	movs	r3, #0
10010148:	e7df      	b.n	1001010a <__eqdf2+0x3a>
1001014a:	46c0      	nop			; (mov r8, r8)
1001014c:	000007ff 	.word	0x000007ff

10010150 <__gedf2>:
10010150:	b5f0      	push	{r4, r5, r6, r7, lr}
10010152:	465f      	mov	r7, fp
10010154:	4644      	mov	r4, r8
10010156:	4656      	mov	r6, sl
10010158:	464d      	mov	r5, r9
1001015a:	b4f0      	push	{r4, r5, r6, r7}
1001015c:	031f      	lsls	r7, r3, #12
1001015e:	0b3c      	lsrs	r4, r7, #12
10010160:	4f2c      	ldr	r7, [pc, #176]	; (10010214 <__gedf2+0xc4>)
10010162:	030e      	lsls	r6, r1, #12
10010164:	004d      	lsls	r5, r1, #1
10010166:	46a3      	mov	fp, r4
10010168:	005c      	lsls	r4, r3, #1
1001016a:	4684      	mov	ip, r0
1001016c:	0b36      	lsrs	r6, r6, #12
1001016e:	0d6d      	lsrs	r5, r5, #21
10010170:	0fc9      	lsrs	r1, r1, #31
10010172:	4690      	mov	r8, r2
10010174:	0d64      	lsrs	r4, r4, #21
10010176:	0fdb      	lsrs	r3, r3, #31
10010178:	42bd      	cmp	r5, r7
1001017a:	d02b      	beq.n	100101d4 <__gedf2+0x84>
1001017c:	4f25      	ldr	r7, [pc, #148]	; (10010214 <__gedf2+0xc4>)
1001017e:	42bc      	cmp	r4, r7
10010180:	d02e      	beq.n	100101e0 <__gedf2+0x90>
10010182:	2d00      	cmp	r5, #0
10010184:	d10e      	bne.n	100101a4 <__gedf2+0x54>
10010186:	4330      	orrs	r0, r6
10010188:	0007      	movs	r7, r0
1001018a:	4681      	mov	r9, r0
1001018c:	4278      	negs	r0, r7
1001018e:	4178      	adcs	r0, r7
10010190:	2c00      	cmp	r4, #0
10010192:	d117      	bne.n	100101c4 <__gedf2+0x74>
10010194:	465f      	mov	r7, fp
10010196:	433a      	orrs	r2, r7
10010198:	d114      	bne.n	100101c4 <__gedf2+0x74>
1001019a:	464b      	mov	r3, r9
1001019c:	2000      	movs	r0, #0
1001019e:	2b00      	cmp	r3, #0
100101a0:	d00a      	beq.n	100101b8 <__gedf2+0x68>
100101a2:	e006      	b.n	100101b2 <__gedf2+0x62>
100101a4:	2c00      	cmp	r4, #0
100101a6:	d102      	bne.n	100101ae <__gedf2+0x5e>
100101a8:	4658      	mov	r0, fp
100101aa:	4302      	orrs	r2, r0
100101ac:	d001      	beq.n	100101b2 <__gedf2+0x62>
100101ae:	4299      	cmp	r1, r3
100101b0:	d01a      	beq.n	100101e8 <__gedf2+0x98>
100101b2:	2301      	movs	r3, #1
100101b4:	4248      	negs	r0, r1
100101b6:	4318      	orrs	r0, r3
100101b8:	bc3c      	pop	{r2, r3, r4, r5}
100101ba:	4690      	mov	r8, r2
100101bc:	4699      	mov	r9, r3
100101be:	46a2      	mov	sl, r4
100101c0:	46ab      	mov	fp, r5
100101c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101c4:	2800      	cmp	r0, #0
100101c6:	d0f2      	beq.n	100101ae <__gedf2+0x5e>
100101c8:	4258      	negs	r0, r3
100101ca:	4158      	adcs	r0, r3
100101cc:	2201      	movs	r2, #1
100101ce:	4240      	negs	r0, r0
100101d0:	4310      	orrs	r0, r2
100101d2:	e7f1      	b.n	100101b8 <__gedf2+0x68>
100101d4:	0037      	movs	r7, r6
100101d6:	4307      	orrs	r7, r0
100101d8:	d0d0      	beq.n	1001017c <__gedf2+0x2c>
100101da:	2002      	movs	r0, #2
100101dc:	4240      	negs	r0, r0
100101de:	e7eb      	b.n	100101b8 <__gedf2+0x68>
100101e0:	465f      	mov	r7, fp
100101e2:	4317      	orrs	r7, r2
100101e4:	d0cd      	beq.n	10010182 <__gedf2+0x32>
100101e6:	e7f8      	b.n	100101da <__gedf2+0x8a>
100101e8:	42a5      	cmp	r5, r4
100101ea:	dce2      	bgt.n	100101b2 <__gedf2+0x62>
100101ec:	db05      	blt.n	100101fa <__gedf2+0xaa>
100101ee:	455e      	cmp	r6, fp
100101f0:	d8df      	bhi.n	100101b2 <__gedf2+0x62>
100101f2:	d008      	beq.n	10010206 <__gedf2+0xb6>
100101f4:	2000      	movs	r0, #0
100101f6:	455e      	cmp	r6, fp
100101f8:	d2de      	bcs.n	100101b8 <__gedf2+0x68>
100101fa:	4248      	negs	r0, r1
100101fc:	4148      	adcs	r0, r1
100101fe:	2301      	movs	r3, #1
10010200:	4240      	negs	r0, r0
10010202:	4318      	orrs	r0, r3
10010204:	e7d8      	b.n	100101b8 <__gedf2+0x68>
10010206:	45c4      	cmp	ip, r8
10010208:	d8d3      	bhi.n	100101b2 <__gedf2+0x62>
1001020a:	2000      	movs	r0, #0
1001020c:	45c4      	cmp	ip, r8
1001020e:	d3f4      	bcc.n	100101fa <__gedf2+0xaa>
10010210:	e7d2      	b.n	100101b8 <__gedf2+0x68>
10010212:	46c0      	nop			; (mov r8, r8)
10010214:	000007ff 	.word	0x000007ff

10010218 <__ledf2>:
10010218:	b5f0      	push	{r4, r5, r6, r7, lr}
1001021a:	465f      	mov	r7, fp
1001021c:	464d      	mov	r5, r9
1001021e:	4644      	mov	r4, r8
10010220:	4656      	mov	r6, sl
10010222:	b4f0      	push	{r4, r5, r6, r7}
10010224:	031c      	lsls	r4, r3, #12
10010226:	0b24      	lsrs	r4, r4, #12
10010228:	46a4      	mov	ip, r4
1001022a:	4c2f      	ldr	r4, [pc, #188]	; (100102e8 <__ledf2+0xd0>)
1001022c:	030f      	lsls	r7, r1, #12
1001022e:	004d      	lsls	r5, r1, #1
10010230:	005e      	lsls	r6, r3, #1
10010232:	0fc9      	lsrs	r1, r1, #31
10010234:	4680      	mov	r8, r0
10010236:	0b3f      	lsrs	r7, r7, #12
10010238:	0d6d      	lsrs	r5, r5, #21
1001023a:	468b      	mov	fp, r1
1001023c:	4691      	mov	r9, r2
1001023e:	0d76      	lsrs	r6, r6, #21
10010240:	0fdb      	lsrs	r3, r3, #31
10010242:	42a5      	cmp	r5, r4
10010244:	d020      	beq.n	10010288 <__ledf2+0x70>
10010246:	4c28      	ldr	r4, [pc, #160]	; (100102e8 <__ledf2+0xd0>)
10010248:	42a6      	cmp	r6, r4
1001024a:	d022      	beq.n	10010292 <__ledf2+0x7a>
1001024c:	2d00      	cmp	r5, #0
1001024e:	d112      	bne.n	10010276 <__ledf2+0x5e>
10010250:	4338      	orrs	r0, r7
10010252:	4244      	negs	r4, r0
10010254:	4144      	adcs	r4, r0
10010256:	2e00      	cmp	r6, #0
10010258:	d020      	beq.n	1001029c <__ledf2+0x84>
1001025a:	2c00      	cmp	r4, #0
1001025c:	d00d      	beq.n	1001027a <__ledf2+0x62>
1001025e:	425c      	negs	r4, r3
10010260:	4163      	adcs	r3, r4
10010262:	2401      	movs	r4, #1
10010264:	425b      	negs	r3, r3
10010266:	431c      	orrs	r4, r3
10010268:	0020      	movs	r0, r4
1001026a:	bc3c      	pop	{r2, r3, r4, r5}
1001026c:	4690      	mov	r8, r2
1001026e:	4699      	mov	r9, r3
10010270:	46a2      	mov	sl, r4
10010272:	46ab      	mov	fp, r5
10010274:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010276:	2e00      	cmp	r6, #0
10010278:	d017      	beq.n	100102aa <__ledf2+0x92>
1001027a:	455b      	cmp	r3, fp
1001027c:	d019      	beq.n	100102b2 <__ledf2+0x9a>
1001027e:	465b      	mov	r3, fp
10010280:	425c      	negs	r4, r3
10010282:	2301      	movs	r3, #1
10010284:	431c      	orrs	r4, r3
10010286:	e7ef      	b.n	10010268 <__ledf2+0x50>
10010288:	0039      	movs	r1, r7
1001028a:	2402      	movs	r4, #2
1001028c:	4301      	orrs	r1, r0
1001028e:	d1eb      	bne.n	10010268 <__ledf2+0x50>
10010290:	e7d9      	b.n	10010246 <__ledf2+0x2e>
10010292:	4661      	mov	r1, ip
10010294:	2402      	movs	r4, #2
10010296:	4311      	orrs	r1, r2
10010298:	d1e6      	bne.n	10010268 <__ledf2+0x50>
1001029a:	e7d7      	b.n	1001024c <__ledf2+0x34>
1001029c:	4661      	mov	r1, ip
1001029e:	430a      	orrs	r2, r1
100102a0:	d1db      	bne.n	1001025a <__ledf2+0x42>
100102a2:	2400      	movs	r4, #0
100102a4:	2800      	cmp	r0, #0
100102a6:	d0df      	beq.n	10010268 <__ledf2+0x50>
100102a8:	e7e9      	b.n	1001027e <__ledf2+0x66>
100102aa:	4661      	mov	r1, ip
100102ac:	430a      	orrs	r2, r1
100102ae:	d1e4      	bne.n	1001027a <__ledf2+0x62>
100102b0:	e7e5      	b.n	1001027e <__ledf2+0x66>
100102b2:	42b5      	cmp	r5, r6
100102b4:	dd03      	ble.n	100102be <__ledf2+0xa6>
100102b6:	2201      	movs	r2, #1
100102b8:	425c      	negs	r4, r3
100102ba:	4314      	orrs	r4, r2
100102bc:	e7d4      	b.n	10010268 <__ledf2+0x50>
100102be:	42b5      	cmp	r5, r6
100102c0:	dbcd      	blt.n	1001025e <__ledf2+0x46>
100102c2:	4567      	cmp	r7, ip
100102c4:	d8db      	bhi.n	1001027e <__ledf2+0x66>
100102c6:	d009      	beq.n	100102dc <__ledf2+0xc4>
100102c8:	2400      	movs	r4, #0
100102ca:	4567      	cmp	r7, ip
100102cc:	d2cc      	bcs.n	10010268 <__ledf2+0x50>
100102ce:	4659      	mov	r1, fp
100102d0:	424c      	negs	r4, r1
100102d2:	4161      	adcs	r1, r4
100102d4:	2401      	movs	r4, #1
100102d6:	4249      	negs	r1, r1
100102d8:	430c      	orrs	r4, r1
100102da:	e7c5      	b.n	10010268 <__ledf2+0x50>
100102dc:	45c8      	cmp	r8, r9
100102de:	d8ce      	bhi.n	1001027e <__ledf2+0x66>
100102e0:	2400      	movs	r4, #0
100102e2:	45c8      	cmp	r8, r9
100102e4:	d3f3      	bcc.n	100102ce <__ledf2+0xb6>
100102e6:	e7bf      	b.n	10010268 <__ledf2+0x50>
100102e8:	000007ff 	.word	0x000007ff

100102ec <__libc_init_array>:
100102ec:	4b0e      	ldr	r3, [pc, #56]	; (10010328 <__libc_init_array+0x3c>)
100102ee:	b570      	push	{r4, r5, r6, lr}
100102f0:	2500      	movs	r5, #0
100102f2:	001e      	movs	r6, r3
100102f4:	4c0d      	ldr	r4, [pc, #52]	; (1001032c <__libc_init_array+0x40>)
100102f6:	1ae4      	subs	r4, r4, r3
100102f8:	10a4      	asrs	r4, r4, #2
100102fa:	42a5      	cmp	r5, r4
100102fc:	d004      	beq.n	10010308 <__libc_init_array+0x1c>
100102fe:	00ab      	lsls	r3, r5, #2
10010300:	58f3      	ldr	r3, [r6, r3]
10010302:	4798      	blx	r3
10010304:	3501      	adds	r5, #1
10010306:	e7f8      	b.n	100102fa <__libc_init_array+0xe>
10010308:	f002 f816 	bl	10012338 <_init>
1001030c:	4b08      	ldr	r3, [pc, #32]	; (10010330 <__libc_init_array+0x44>)
1001030e:	2500      	movs	r5, #0
10010310:	001e      	movs	r6, r3
10010312:	4c08      	ldr	r4, [pc, #32]	; (10010334 <__libc_init_array+0x48>)
10010314:	1ae4      	subs	r4, r4, r3
10010316:	10a4      	asrs	r4, r4, #2
10010318:	42a5      	cmp	r5, r4
1001031a:	d004      	beq.n	10010326 <__libc_init_array+0x3a>
1001031c:	00ab      	lsls	r3, r5, #2
1001031e:	58f3      	ldr	r3, [r6, r3]
10010320:	4798      	blx	r3
10010322:	3501      	adds	r5, #1
10010324:	e7f8      	b.n	10010318 <__libc_init_array+0x2c>
10010326:	bd70      	pop	{r4, r5, r6, pc}
10010328:	10012344 	.word	0x10012344
1001032c:	10012344 	.word	0x10012344
10010330:	10012344 	.word	0x10012344
10010334:	10012348 	.word	0x10012348

10010338 <memcmp>:
10010338:	b530      	push	{r4, r5, lr}
1001033a:	2400      	movs	r4, #0
1001033c:	42a2      	cmp	r2, r4
1001033e:	d008      	beq.n	10010352 <memcmp+0x1a>
10010340:	5d03      	ldrb	r3, [r0, r4]
10010342:	1c65      	adds	r5, r4, #1
10010344:	5d0c      	ldrb	r4, [r1, r4]
10010346:	42a3      	cmp	r3, r4
10010348:	d001      	beq.n	1001034e <memcmp+0x16>
1001034a:	1b18      	subs	r0, r3, r4
1001034c:	e002      	b.n	10010354 <memcmp+0x1c>
1001034e:	002c      	movs	r4, r5
10010350:	e7f4      	b.n	1001033c <memcmp+0x4>
10010352:	2000      	movs	r0, #0
10010354:	bd30      	pop	{r4, r5, pc}

10010356 <memcpy>:
10010356:	2300      	movs	r3, #0
10010358:	b510      	push	{r4, lr}
1001035a:	429a      	cmp	r2, r3
1001035c:	d003      	beq.n	10010366 <memcpy+0x10>
1001035e:	5ccc      	ldrb	r4, [r1, r3]
10010360:	54c4      	strb	r4, [r0, r3]
10010362:	3301      	adds	r3, #1
10010364:	e7f9      	b.n	1001035a <memcpy+0x4>
10010366:	bd10      	pop	{r4, pc}

10010368 <memset>:
10010368:	0003      	movs	r3, r0
1001036a:	1882      	adds	r2, r0, r2
1001036c:	4293      	cmp	r3, r2
1001036e:	d002      	beq.n	10010376 <memset+0xe>
10010370:	7019      	strb	r1, [r3, #0]
10010372:	3301      	adds	r3, #1
10010374:	e7fa      	b.n	1001036c <memset+0x4>
10010376:	4770      	bx	lr

10010378 <iprintf>:
10010378:	b40f      	push	{r0, r1, r2, r3}
1001037a:	4b0b      	ldr	r3, [pc, #44]	; (100103a8 <iprintf+0x30>)
1001037c:	b513      	push	{r0, r1, r4, lr}
1001037e:	681c      	ldr	r4, [r3, #0]
10010380:	2c00      	cmp	r4, #0
10010382:	d005      	beq.n	10010390 <iprintf+0x18>
10010384:	69a3      	ldr	r3, [r4, #24]
10010386:	2b00      	cmp	r3, #0
10010388:	d102      	bne.n	10010390 <iprintf+0x18>
1001038a:	0020      	movs	r0, r4
1001038c:	f000 fb46 	bl	10010a1c <__sinit>
10010390:	ab05      	add	r3, sp, #20
10010392:	9a04      	ldr	r2, [sp, #16]
10010394:	68a1      	ldr	r1, [r4, #8]
10010396:	0020      	movs	r0, r4
10010398:	9301      	str	r3, [sp, #4]
1001039a:	f000 fd05 	bl	10010da8 <_vfiprintf_r>
1001039e:	bc16      	pop	{r1, r2, r4}
100103a0:	bc08      	pop	{r3}
100103a2:	b004      	add	sp, #16
100103a4:	4718      	bx	r3
100103a6:	46c0      	nop			; (mov r8, r8)
100103a8:	100123cc 	.word	0x100123cc

100103ac <putchar>:
100103ac:	4b08      	ldr	r3, [pc, #32]	; (100103d0 <putchar+0x24>)
100103ae:	b570      	push	{r4, r5, r6, lr}
100103b0:	681c      	ldr	r4, [r3, #0]
100103b2:	0005      	movs	r5, r0
100103b4:	2c00      	cmp	r4, #0
100103b6:	d005      	beq.n	100103c4 <putchar+0x18>
100103b8:	69a3      	ldr	r3, [r4, #24]
100103ba:	2b00      	cmp	r3, #0
100103bc:	d102      	bne.n	100103c4 <putchar+0x18>
100103be:	0020      	movs	r0, r4
100103c0:	f000 fb2c 	bl	10010a1c <__sinit>
100103c4:	0029      	movs	r1, r5
100103c6:	68a2      	ldr	r2, [r4, #8]
100103c8:	0020      	movs	r0, r4
100103ca:	f000 ff99 	bl	10011300 <_putc_r>
100103ce:	bd70      	pop	{r4, r5, r6, pc}
100103d0:	100123cc 	.word	0x100123cc

100103d4 <_puts_r>:
100103d4:	b570      	push	{r4, r5, r6, lr}
100103d6:	0005      	movs	r5, r0
100103d8:	000e      	movs	r6, r1
100103da:	2800      	cmp	r0, #0
100103dc:	d004      	beq.n	100103e8 <_puts_r+0x14>
100103de:	6983      	ldr	r3, [r0, #24]
100103e0:	2b00      	cmp	r3, #0
100103e2:	d101      	bne.n	100103e8 <_puts_r+0x14>
100103e4:	f000 fb1a 	bl	10010a1c <__sinit>
100103e8:	69ab      	ldr	r3, [r5, #24]
100103ea:	68ac      	ldr	r4, [r5, #8]
100103ec:	2b00      	cmp	r3, #0
100103ee:	d102      	bne.n	100103f6 <_puts_r+0x22>
100103f0:	0028      	movs	r0, r5
100103f2:	f000 fb13 	bl	10010a1c <__sinit>
100103f6:	4b25      	ldr	r3, [pc, #148]	; (1001048c <_puts_r+0xb8>)
100103f8:	429c      	cmp	r4, r3
100103fa:	d101      	bne.n	10010400 <_puts_r+0x2c>
100103fc:	686c      	ldr	r4, [r5, #4]
100103fe:	e008      	b.n	10010412 <_puts_r+0x3e>
10010400:	4b23      	ldr	r3, [pc, #140]	; (10010490 <_puts_r+0xbc>)
10010402:	429c      	cmp	r4, r3
10010404:	d101      	bne.n	1001040a <_puts_r+0x36>
10010406:	68ac      	ldr	r4, [r5, #8]
10010408:	e003      	b.n	10010412 <_puts_r+0x3e>
1001040a:	4b22      	ldr	r3, [pc, #136]	; (10010494 <_puts_r+0xc0>)
1001040c:	429c      	cmp	r4, r3
1001040e:	d100      	bne.n	10010412 <_puts_r+0x3e>
10010410:	68ec      	ldr	r4, [r5, #12]
10010412:	89a3      	ldrh	r3, [r4, #12]
10010414:	071b      	lsls	r3, r3, #28
10010416:	d502      	bpl.n	1001041e <_puts_r+0x4a>
10010418:	6923      	ldr	r3, [r4, #16]
1001041a:	2b00      	cmp	r3, #0
1001041c:	d111      	bne.n	10010442 <_puts_r+0x6e>
1001041e:	0021      	movs	r1, r4
10010420:	0028      	movs	r0, r5
10010422:	f000 f991 	bl	10010748 <__swsetup_r>
10010426:	2800      	cmp	r0, #0
10010428:	d00b      	beq.n	10010442 <_puts_r+0x6e>
1001042a:	2001      	movs	r0, #1
1001042c:	4240      	negs	r0, r0
1001042e:	e02b      	b.n	10010488 <_puts_r+0xb4>
10010430:	3b01      	subs	r3, #1
10010432:	3601      	adds	r6, #1
10010434:	60a3      	str	r3, [r4, #8]
10010436:	2b00      	cmp	r3, #0
10010438:	db08      	blt.n	1001044c <_puts_r+0x78>
1001043a:	6823      	ldr	r3, [r4, #0]
1001043c:	1c5a      	adds	r2, r3, #1
1001043e:	6022      	str	r2, [r4, #0]
10010440:	7019      	strb	r1, [r3, #0]
10010442:	7831      	ldrb	r1, [r6, #0]
10010444:	68a3      	ldr	r3, [r4, #8]
10010446:	2900      	cmp	r1, #0
10010448:	d1f2      	bne.n	10010430 <_puts_r+0x5c>
1001044a:	e00b      	b.n	10010464 <_puts_r+0x90>
1001044c:	69a2      	ldr	r2, [r4, #24]
1001044e:	4293      	cmp	r3, r2
10010450:	db01      	blt.n	10010456 <_puts_r+0x82>
10010452:	290a      	cmp	r1, #10
10010454:	d1f1      	bne.n	1001043a <_puts_r+0x66>
10010456:	0022      	movs	r2, r4
10010458:	0028      	movs	r0, r5
1001045a:	f000 f91d 	bl	10010698 <__swbuf_r>
1001045e:	1c43      	adds	r3, r0, #1
10010460:	d1ef      	bne.n	10010442 <_puts_r+0x6e>
10010462:	e7e2      	b.n	1001042a <_puts_r+0x56>
10010464:	3b01      	subs	r3, #1
10010466:	60a3      	str	r3, [r4, #8]
10010468:	2b00      	cmp	r3, #0
1001046a:	da08      	bge.n	1001047e <_puts_r+0xaa>
1001046c:	0022      	movs	r2, r4
1001046e:	310a      	adds	r1, #10
10010470:	0028      	movs	r0, r5
10010472:	f000 f911 	bl	10010698 <__swbuf_r>
10010476:	1c43      	adds	r3, r0, #1
10010478:	d0d7      	beq.n	1001042a <_puts_r+0x56>
1001047a:	200a      	movs	r0, #10
1001047c:	e004      	b.n	10010488 <_puts_r+0xb4>
1001047e:	200a      	movs	r0, #10
10010480:	6823      	ldr	r3, [r4, #0]
10010482:	1c5a      	adds	r2, r3, #1
10010484:	6022      	str	r2, [r4, #0]
10010486:	7018      	strb	r0, [r3, #0]
10010488:	bd70      	pop	{r4, r5, r6, pc}
1001048a:	46c0      	nop			; (mov r8, r8)
1001048c:	100122a4 	.word	0x100122a4
10010490:	100122c4 	.word	0x100122c4
10010494:	100122e4 	.word	0x100122e4

10010498 <puts>:
10010498:	b510      	push	{r4, lr}
1001049a:	4b03      	ldr	r3, [pc, #12]	; (100104a8 <puts+0x10>)
1001049c:	0001      	movs	r1, r0
1001049e:	6818      	ldr	r0, [r3, #0]
100104a0:	f7ff ff98 	bl	100103d4 <_puts_r>
100104a4:	bd10      	pop	{r4, pc}
100104a6:	46c0      	nop			; (mov r8, r8)
100104a8:	100123cc 	.word	0x100123cc

100104ac <rand>:
100104ac:	4b15      	ldr	r3, [pc, #84]	; (10010504 <rand+0x58>)
100104ae:	b510      	push	{r4, lr}
100104b0:	681c      	ldr	r4, [r3, #0]
100104b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100104b4:	2b00      	cmp	r3, #0
100104b6:	d115      	bne.n	100104e4 <rand+0x38>
100104b8:	2018      	movs	r0, #24
100104ba:	f000 fba7 	bl	10010c0c <malloc>
100104be:	4b12      	ldr	r3, [pc, #72]	; (10010508 <rand+0x5c>)
100104c0:	63a0      	str	r0, [r4, #56]	; 0x38
100104c2:	8003      	strh	r3, [r0, #0]
100104c4:	4b11      	ldr	r3, [pc, #68]	; (1001050c <rand+0x60>)
100104c6:	2201      	movs	r2, #1
100104c8:	8043      	strh	r3, [r0, #2]
100104ca:	4b11      	ldr	r3, [pc, #68]	; (10010510 <rand+0x64>)
100104cc:	8083      	strh	r3, [r0, #4]
100104ce:	4b11      	ldr	r3, [pc, #68]	; (10010514 <rand+0x68>)
100104d0:	80c3      	strh	r3, [r0, #6]
100104d2:	4b11      	ldr	r3, [pc, #68]	; (10010518 <rand+0x6c>)
100104d4:	8103      	strh	r3, [r0, #8]
100104d6:	2305      	movs	r3, #5
100104d8:	8143      	strh	r3, [r0, #10]
100104da:	3306      	adds	r3, #6
100104dc:	8183      	strh	r3, [r0, #12]
100104de:	2300      	movs	r3, #0
100104e0:	6102      	str	r2, [r0, #16]
100104e2:	6143      	str	r3, [r0, #20]
100104e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100104e6:	4a0d      	ldr	r2, [pc, #52]	; (1001051c <rand+0x70>)
100104e8:	6920      	ldr	r0, [r4, #16]
100104ea:	6961      	ldr	r1, [r4, #20]
100104ec:	4b0c      	ldr	r3, [pc, #48]	; (10010520 <rand+0x74>)
100104ee:	f001 f819 	bl	10011524 <__aeabi_lmul>
100104f2:	2201      	movs	r2, #1
100104f4:	2300      	movs	r3, #0
100104f6:	1880      	adds	r0, r0, r2
100104f8:	4159      	adcs	r1, r3
100104fa:	6120      	str	r0, [r4, #16]
100104fc:	6161      	str	r1, [r4, #20]
100104fe:	0048      	lsls	r0, r1, #1
10010500:	0840      	lsrs	r0, r0, #1
10010502:	bd10      	pop	{r4, pc}
10010504:	100123cc 	.word	0x100123cc
10010508:	0000330e 	.word	0x0000330e
1001050c:	ffffabcd 	.word	0xffffabcd
10010510:	00001234 	.word	0x00001234
10010514:	ffffe66d 	.word	0xffffe66d
10010518:	ffffdeec 	.word	0xffffdeec
1001051c:	4c957f2d 	.word	0x4c957f2d
10010520:	5851f42d 	.word	0x5851f42d

10010524 <setbuf>:
10010524:	424a      	negs	r2, r1
10010526:	414a      	adcs	r2, r1
10010528:	2380      	movs	r3, #128	; 0x80
1001052a:	b510      	push	{r4, lr}
1001052c:	0052      	lsls	r2, r2, #1
1001052e:	00db      	lsls	r3, r3, #3
10010530:	f000 f802 	bl	10010538 <setvbuf>
10010534:	bd10      	pop	{r4, pc}
	...

10010538 <setvbuf>:
10010538:	b5f0      	push	{r4, r5, r6, r7, lr}
1001053a:	001d      	movs	r5, r3
1001053c:	4b51      	ldr	r3, [pc, #324]	; (10010684 <setvbuf+0x14c>)
1001053e:	b085      	sub	sp, #20
10010540:	681e      	ldr	r6, [r3, #0]
10010542:	0004      	movs	r4, r0
10010544:	000f      	movs	r7, r1
10010546:	9200      	str	r2, [sp, #0]
10010548:	2e00      	cmp	r6, #0
1001054a:	d005      	beq.n	10010558 <setvbuf+0x20>
1001054c:	69b3      	ldr	r3, [r6, #24]
1001054e:	2b00      	cmp	r3, #0
10010550:	d102      	bne.n	10010558 <setvbuf+0x20>
10010552:	0030      	movs	r0, r6
10010554:	f000 fa62 	bl	10010a1c <__sinit>
10010558:	4b4b      	ldr	r3, [pc, #300]	; (10010688 <setvbuf+0x150>)
1001055a:	429c      	cmp	r4, r3
1001055c:	d101      	bne.n	10010562 <setvbuf+0x2a>
1001055e:	6874      	ldr	r4, [r6, #4]
10010560:	e008      	b.n	10010574 <setvbuf+0x3c>
10010562:	4b4a      	ldr	r3, [pc, #296]	; (1001068c <setvbuf+0x154>)
10010564:	429c      	cmp	r4, r3
10010566:	d101      	bne.n	1001056c <setvbuf+0x34>
10010568:	68b4      	ldr	r4, [r6, #8]
1001056a:	e003      	b.n	10010574 <setvbuf+0x3c>
1001056c:	4b48      	ldr	r3, [pc, #288]	; (10010690 <setvbuf+0x158>)
1001056e:	429c      	cmp	r4, r3
10010570:	d100      	bne.n	10010574 <setvbuf+0x3c>
10010572:	68f4      	ldr	r4, [r6, #12]
10010574:	9b00      	ldr	r3, [sp, #0]
10010576:	2b02      	cmp	r3, #2
10010578:	d005      	beq.n	10010586 <setvbuf+0x4e>
1001057a:	2b01      	cmp	r3, #1
1001057c:	d900      	bls.n	10010580 <setvbuf+0x48>
1001057e:	e07c      	b.n	1001067a <setvbuf+0x142>
10010580:	2d00      	cmp	r5, #0
10010582:	da00      	bge.n	10010586 <setvbuf+0x4e>
10010584:	e079      	b.n	1001067a <setvbuf+0x142>
10010586:	0021      	movs	r1, r4
10010588:	0030      	movs	r0, r6
1001058a:	f000 f9d9 	bl	10010940 <_fflush_r>
1001058e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10010590:	2900      	cmp	r1, #0
10010592:	d008      	beq.n	100105a6 <setvbuf+0x6e>
10010594:	0023      	movs	r3, r4
10010596:	3344      	adds	r3, #68	; 0x44
10010598:	4299      	cmp	r1, r3
1001059a:	d002      	beq.n	100105a2 <setvbuf+0x6a>
1001059c:	0030      	movs	r0, r6
1001059e:	f000 fb3f 	bl	10010c20 <_free_r>
100105a2:	2300      	movs	r3, #0
100105a4:	6363      	str	r3, [r4, #52]	; 0x34
100105a6:	2300      	movs	r3, #0
100105a8:	61a3      	str	r3, [r4, #24]
100105aa:	6063      	str	r3, [r4, #4]
100105ac:	89a3      	ldrh	r3, [r4, #12]
100105ae:	061b      	lsls	r3, r3, #24
100105b0:	d503      	bpl.n	100105ba <setvbuf+0x82>
100105b2:	6921      	ldr	r1, [r4, #16]
100105b4:	0030      	movs	r0, r6
100105b6:	f000 fb33 	bl	10010c20 <_free_r>
100105ba:	89a2      	ldrh	r2, [r4, #12]
100105bc:	4b35      	ldr	r3, [pc, #212]	; (10010694 <setvbuf+0x15c>)
100105be:	4013      	ands	r3, r2
100105c0:	81a3      	strh	r3, [r4, #12]
100105c2:	9b00      	ldr	r3, [sp, #0]
100105c4:	2b02      	cmp	r3, #2
100105c6:	d021      	beq.n	1001060c <setvbuf+0xd4>
100105c8:	ab03      	add	r3, sp, #12
100105ca:	aa02      	add	r2, sp, #8
100105cc:	0021      	movs	r1, r4
100105ce:	0030      	movs	r0, r6
100105d0:	f000 fab8 	bl	10010b44 <__swhatbuf_r>
100105d4:	89a3      	ldrh	r3, [r4, #12]
100105d6:	4318      	orrs	r0, r3
100105d8:	81a0      	strh	r0, [r4, #12]
100105da:	2d00      	cmp	r5, #0
100105dc:	d101      	bne.n	100105e2 <setvbuf+0xaa>
100105de:	9d02      	ldr	r5, [sp, #8]
100105e0:	e001      	b.n	100105e6 <setvbuf+0xae>
100105e2:	2f00      	cmp	r7, #0
100105e4:	d125      	bne.n	10010632 <setvbuf+0xfa>
100105e6:	0028      	movs	r0, r5
100105e8:	f000 fb10 	bl	10010c0c <malloc>
100105ec:	9501      	str	r5, [sp, #4]
100105ee:	1e07      	subs	r7, r0, #0
100105f0:	d11a      	bne.n	10010628 <setvbuf+0xf0>
100105f2:	9b02      	ldr	r3, [sp, #8]
100105f4:	9301      	str	r3, [sp, #4]
100105f6:	42ab      	cmp	r3, r5
100105f8:	d102      	bne.n	10010600 <setvbuf+0xc8>
100105fa:	2001      	movs	r0, #1
100105fc:	4240      	negs	r0, r0
100105fe:	e006      	b.n	1001060e <setvbuf+0xd6>
10010600:	9801      	ldr	r0, [sp, #4]
10010602:	f000 fb03 	bl	10010c0c <malloc>
10010606:	1e07      	subs	r7, r0, #0
10010608:	d10e      	bne.n	10010628 <setvbuf+0xf0>
1001060a:	e7f6      	b.n	100105fa <setvbuf+0xc2>
1001060c:	2000      	movs	r0, #0
1001060e:	2202      	movs	r2, #2
10010610:	89a3      	ldrh	r3, [r4, #12]
10010612:	4313      	orrs	r3, r2
10010614:	81a3      	strh	r3, [r4, #12]
10010616:	2300      	movs	r3, #0
10010618:	60a3      	str	r3, [r4, #8]
1001061a:	0023      	movs	r3, r4
1001061c:	3347      	adds	r3, #71	; 0x47
1001061e:	6023      	str	r3, [r4, #0]
10010620:	6123      	str	r3, [r4, #16]
10010622:	2301      	movs	r3, #1
10010624:	6163      	str	r3, [r4, #20]
10010626:	e02a      	b.n	1001067e <setvbuf+0x146>
10010628:	2280      	movs	r2, #128	; 0x80
1001062a:	89a3      	ldrh	r3, [r4, #12]
1001062c:	9d01      	ldr	r5, [sp, #4]
1001062e:	4313      	orrs	r3, r2
10010630:	81a3      	strh	r3, [r4, #12]
10010632:	69b3      	ldr	r3, [r6, #24]
10010634:	2b00      	cmp	r3, #0
10010636:	d102      	bne.n	1001063e <setvbuf+0x106>
10010638:	0030      	movs	r0, r6
1001063a:	f000 f9ef 	bl	10010a1c <__sinit>
1001063e:	9b00      	ldr	r3, [sp, #0]
10010640:	2b01      	cmp	r3, #1
10010642:	d103      	bne.n	1001064c <setvbuf+0x114>
10010644:	89a3      	ldrh	r3, [r4, #12]
10010646:	9a00      	ldr	r2, [sp, #0]
10010648:	431a      	orrs	r2, r3
1001064a:	81a2      	strh	r2, [r4, #12]
1001064c:	2308      	movs	r3, #8
1001064e:	89a2      	ldrh	r2, [r4, #12]
10010650:	6027      	str	r7, [r4, #0]
10010652:	4013      	ands	r3, r2
10010654:	6127      	str	r7, [r4, #16]
10010656:	6165      	str	r5, [r4, #20]
10010658:	1e18      	subs	r0, r3, #0
1001065a:	d00c      	beq.n	10010676 <setvbuf+0x13e>
1001065c:	2301      	movs	r3, #1
1001065e:	401a      	ands	r2, r3
10010660:	2300      	movs	r3, #0
10010662:	1e10      	subs	r0, r2, #0
10010664:	4298      	cmp	r0, r3
10010666:	d004      	beq.n	10010672 <setvbuf+0x13a>
10010668:	426d      	negs	r5, r5
1001066a:	60a3      	str	r3, [r4, #8]
1001066c:	61a5      	str	r5, [r4, #24]
1001066e:	0018      	movs	r0, r3
10010670:	e005      	b.n	1001067e <setvbuf+0x146>
10010672:	60a5      	str	r5, [r4, #8]
10010674:	e003      	b.n	1001067e <setvbuf+0x146>
10010676:	60a3      	str	r3, [r4, #8]
10010678:	e001      	b.n	1001067e <setvbuf+0x146>
1001067a:	2001      	movs	r0, #1
1001067c:	4240      	negs	r0, r0
1001067e:	b005      	add	sp, #20
10010680:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010682:	46c0      	nop			; (mov r8, r8)
10010684:	100123cc 	.word	0x100123cc
10010688:	100122a4 	.word	0x100122a4
1001068c:	100122c4 	.word	0x100122c4
10010690:	100122e4 	.word	0x100122e4
10010694:	fffff35c 	.word	0xfffff35c

10010698 <__swbuf_r>:
10010698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001069a:	0005      	movs	r5, r0
1001069c:	000f      	movs	r7, r1
1001069e:	0014      	movs	r4, r2
100106a0:	2800      	cmp	r0, #0
100106a2:	d004      	beq.n	100106ae <__swbuf_r+0x16>
100106a4:	6983      	ldr	r3, [r0, #24]
100106a6:	2b00      	cmp	r3, #0
100106a8:	d101      	bne.n	100106ae <__swbuf_r+0x16>
100106aa:	f000 f9b7 	bl	10010a1c <__sinit>
100106ae:	4b23      	ldr	r3, [pc, #140]	; (1001073c <__swbuf_r+0xa4>)
100106b0:	429c      	cmp	r4, r3
100106b2:	d101      	bne.n	100106b8 <__swbuf_r+0x20>
100106b4:	686c      	ldr	r4, [r5, #4]
100106b6:	e008      	b.n	100106ca <__swbuf_r+0x32>
100106b8:	4b21      	ldr	r3, [pc, #132]	; (10010740 <__swbuf_r+0xa8>)
100106ba:	429c      	cmp	r4, r3
100106bc:	d101      	bne.n	100106c2 <__swbuf_r+0x2a>
100106be:	68ac      	ldr	r4, [r5, #8]
100106c0:	e003      	b.n	100106ca <__swbuf_r+0x32>
100106c2:	4b20      	ldr	r3, [pc, #128]	; (10010744 <__swbuf_r+0xac>)
100106c4:	429c      	cmp	r4, r3
100106c6:	d100      	bne.n	100106ca <__swbuf_r+0x32>
100106c8:	68ec      	ldr	r4, [r5, #12]
100106ca:	69a3      	ldr	r3, [r4, #24]
100106cc:	60a3      	str	r3, [r4, #8]
100106ce:	89a3      	ldrh	r3, [r4, #12]
100106d0:	071b      	lsls	r3, r3, #28
100106d2:	d50a      	bpl.n	100106ea <__swbuf_r+0x52>
100106d4:	6923      	ldr	r3, [r4, #16]
100106d6:	2b00      	cmp	r3, #0
100106d8:	d007      	beq.n	100106ea <__swbuf_r+0x52>
100106da:	6823      	ldr	r3, [r4, #0]
100106dc:	6922      	ldr	r2, [r4, #16]
100106de:	b2fe      	uxtb	r6, r7
100106e0:	1a98      	subs	r0, r3, r2
100106e2:	6963      	ldr	r3, [r4, #20]
100106e4:	4298      	cmp	r0, r3
100106e6:	db0f      	blt.n	10010708 <__swbuf_r+0x70>
100106e8:	e008      	b.n	100106fc <__swbuf_r+0x64>
100106ea:	0021      	movs	r1, r4
100106ec:	0028      	movs	r0, r5
100106ee:	f000 f82b 	bl	10010748 <__swsetup_r>
100106f2:	2800      	cmp	r0, #0
100106f4:	d0f1      	beq.n	100106da <__swbuf_r+0x42>
100106f6:	2001      	movs	r0, #1
100106f8:	4240      	negs	r0, r0
100106fa:	e01d      	b.n	10010738 <__swbuf_r+0xa0>
100106fc:	0021      	movs	r1, r4
100106fe:	0028      	movs	r0, r5
10010700:	f000 f91e 	bl	10010940 <_fflush_r>
10010704:	2800      	cmp	r0, #0
10010706:	d1f6      	bne.n	100106f6 <__swbuf_r+0x5e>
10010708:	68a3      	ldr	r3, [r4, #8]
1001070a:	3001      	adds	r0, #1
1001070c:	3b01      	subs	r3, #1
1001070e:	60a3      	str	r3, [r4, #8]
10010710:	6823      	ldr	r3, [r4, #0]
10010712:	1c5a      	adds	r2, r3, #1
10010714:	6022      	str	r2, [r4, #0]
10010716:	701f      	strb	r7, [r3, #0]
10010718:	6963      	ldr	r3, [r4, #20]
1001071a:	4298      	cmp	r0, r3
1001071c:	d005      	beq.n	1001072a <__swbuf_r+0x92>
1001071e:	89a3      	ldrh	r3, [r4, #12]
10010720:	0030      	movs	r0, r6
10010722:	07db      	lsls	r3, r3, #31
10010724:	d508      	bpl.n	10010738 <__swbuf_r+0xa0>
10010726:	2e0a      	cmp	r6, #10
10010728:	d106      	bne.n	10010738 <__swbuf_r+0xa0>
1001072a:	0021      	movs	r1, r4
1001072c:	0028      	movs	r0, r5
1001072e:	f000 f907 	bl	10010940 <_fflush_r>
10010732:	2800      	cmp	r0, #0
10010734:	d1df      	bne.n	100106f6 <__swbuf_r+0x5e>
10010736:	0030      	movs	r0, r6
10010738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001073a:	46c0      	nop			; (mov r8, r8)
1001073c:	100122a4 	.word	0x100122a4
10010740:	100122c4 	.word	0x100122c4
10010744:	100122e4 	.word	0x100122e4

10010748 <__swsetup_r>:
10010748:	4b36      	ldr	r3, [pc, #216]	; (10010824 <__swsetup_r+0xdc>)
1001074a:	b570      	push	{r4, r5, r6, lr}
1001074c:	681d      	ldr	r5, [r3, #0]
1001074e:	0006      	movs	r6, r0
10010750:	000c      	movs	r4, r1
10010752:	2d00      	cmp	r5, #0
10010754:	d005      	beq.n	10010762 <__swsetup_r+0x1a>
10010756:	69ab      	ldr	r3, [r5, #24]
10010758:	2b00      	cmp	r3, #0
1001075a:	d102      	bne.n	10010762 <__swsetup_r+0x1a>
1001075c:	0028      	movs	r0, r5
1001075e:	f000 f95d 	bl	10010a1c <__sinit>
10010762:	4b31      	ldr	r3, [pc, #196]	; (10010828 <__swsetup_r+0xe0>)
10010764:	429c      	cmp	r4, r3
10010766:	d101      	bne.n	1001076c <__swsetup_r+0x24>
10010768:	686c      	ldr	r4, [r5, #4]
1001076a:	e008      	b.n	1001077e <__swsetup_r+0x36>
1001076c:	4b2f      	ldr	r3, [pc, #188]	; (1001082c <__swsetup_r+0xe4>)
1001076e:	429c      	cmp	r4, r3
10010770:	d101      	bne.n	10010776 <__swsetup_r+0x2e>
10010772:	68ac      	ldr	r4, [r5, #8]
10010774:	e003      	b.n	1001077e <__swsetup_r+0x36>
10010776:	4b2e      	ldr	r3, [pc, #184]	; (10010830 <__swsetup_r+0xe8>)
10010778:	429c      	cmp	r4, r3
1001077a:	d100      	bne.n	1001077e <__swsetup_r+0x36>
1001077c:	68ec      	ldr	r4, [r5, #12]
1001077e:	220c      	movs	r2, #12
10010780:	5ea3      	ldrsh	r3, [r4, r2]
10010782:	b29a      	uxth	r2, r3
10010784:	0711      	lsls	r1, r2, #28
10010786:	d423      	bmi.n	100107d0 <__swsetup_r+0x88>
10010788:	06d1      	lsls	r1, r2, #27
1001078a:	d407      	bmi.n	1001079c <__swsetup_r+0x54>
1001078c:	2209      	movs	r2, #9
1001078e:	2001      	movs	r0, #1
10010790:	6032      	str	r2, [r6, #0]
10010792:	3237      	adds	r2, #55	; 0x37
10010794:	4313      	orrs	r3, r2
10010796:	81a3      	strh	r3, [r4, #12]
10010798:	4240      	negs	r0, r0
1001079a:	e042      	b.n	10010822 <__swsetup_r+0xda>
1001079c:	0753      	lsls	r3, r2, #29
1001079e:	d513      	bpl.n	100107c8 <__swsetup_r+0x80>
100107a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
100107a2:	2900      	cmp	r1, #0
100107a4:	d008      	beq.n	100107b8 <__swsetup_r+0x70>
100107a6:	0023      	movs	r3, r4
100107a8:	3344      	adds	r3, #68	; 0x44
100107aa:	4299      	cmp	r1, r3
100107ac:	d002      	beq.n	100107b4 <__swsetup_r+0x6c>
100107ae:	0030      	movs	r0, r6
100107b0:	f000 fa36 	bl	10010c20 <_free_r>
100107b4:	2300      	movs	r3, #0
100107b6:	6363      	str	r3, [r4, #52]	; 0x34
100107b8:	2224      	movs	r2, #36	; 0x24
100107ba:	89a3      	ldrh	r3, [r4, #12]
100107bc:	4393      	bics	r3, r2
100107be:	81a3      	strh	r3, [r4, #12]
100107c0:	2300      	movs	r3, #0
100107c2:	6063      	str	r3, [r4, #4]
100107c4:	6923      	ldr	r3, [r4, #16]
100107c6:	6023      	str	r3, [r4, #0]
100107c8:	2208      	movs	r2, #8
100107ca:	89a3      	ldrh	r3, [r4, #12]
100107cc:	4313      	orrs	r3, r2
100107ce:	81a3      	strh	r3, [r4, #12]
100107d0:	6923      	ldr	r3, [r4, #16]
100107d2:	2b00      	cmp	r3, #0
100107d4:	d10b      	bne.n	100107ee <__swsetup_r+0xa6>
100107d6:	23a0      	movs	r3, #160	; 0xa0
100107d8:	89a2      	ldrh	r2, [r4, #12]
100107da:	009b      	lsls	r3, r3, #2
100107dc:	4013      	ands	r3, r2
100107de:	2280      	movs	r2, #128	; 0x80
100107e0:	0092      	lsls	r2, r2, #2
100107e2:	4293      	cmp	r3, r2
100107e4:	d003      	beq.n	100107ee <__swsetup_r+0xa6>
100107e6:	0021      	movs	r1, r4
100107e8:	0030      	movs	r0, r6
100107ea:	f000 f9d1 	bl	10010b90 <__smakebuf_r>
100107ee:	2301      	movs	r3, #1
100107f0:	89a2      	ldrh	r2, [r4, #12]
100107f2:	4013      	ands	r3, r2
100107f4:	d005      	beq.n	10010802 <__swsetup_r+0xba>
100107f6:	2300      	movs	r3, #0
100107f8:	60a3      	str	r3, [r4, #8]
100107fa:	6963      	ldr	r3, [r4, #20]
100107fc:	425b      	negs	r3, r3
100107fe:	61a3      	str	r3, [r4, #24]
10010800:	e003      	b.n	1001080a <__swsetup_r+0xc2>
10010802:	0792      	lsls	r2, r2, #30
10010804:	d400      	bmi.n	10010808 <__swsetup_r+0xc0>
10010806:	6963      	ldr	r3, [r4, #20]
10010808:	60a3      	str	r3, [r4, #8]
1001080a:	2000      	movs	r0, #0
1001080c:	6923      	ldr	r3, [r4, #16]
1001080e:	4283      	cmp	r3, r0
10010810:	d107      	bne.n	10010822 <__swsetup_r+0xda>
10010812:	220c      	movs	r2, #12
10010814:	5ea3      	ldrsh	r3, [r4, r2]
10010816:	061a      	lsls	r2, r3, #24
10010818:	d503      	bpl.n	10010822 <__swsetup_r+0xda>
1001081a:	2240      	movs	r2, #64	; 0x40
1001081c:	4313      	orrs	r3, r2
1001081e:	81a3      	strh	r3, [r4, #12]
10010820:	3801      	subs	r0, #1
10010822:	bd70      	pop	{r4, r5, r6, pc}
10010824:	100123cc 	.word	0x100123cc
10010828:	100122a4 	.word	0x100122a4
1001082c:	100122c4 	.word	0x100122c4
10010830:	100122e4 	.word	0x100122e4

10010834 <__sflush_r>:
10010834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010836:	898a      	ldrh	r2, [r1, #12]
10010838:	0005      	movs	r5, r0
1001083a:	000c      	movs	r4, r1
1001083c:	0713      	lsls	r3, r2, #28
1001083e:	d45a      	bmi.n	100108f6 <__sflush_r+0xc2>
10010840:	684b      	ldr	r3, [r1, #4]
10010842:	2b00      	cmp	r3, #0
10010844:	dc02      	bgt.n	1001084c <__sflush_r+0x18>
10010846:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10010848:	2b00      	cmp	r3, #0
1001084a:	dd19      	ble.n	10010880 <__sflush_r+0x4c>
1001084c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001084e:	2f00      	cmp	r7, #0
10010850:	d016      	beq.n	10010880 <__sflush_r+0x4c>
10010852:	2300      	movs	r3, #0
10010854:	682e      	ldr	r6, [r5, #0]
10010856:	602b      	str	r3, [r5, #0]
10010858:	2380      	movs	r3, #128	; 0x80
1001085a:	015b      	lsls	r3, r3, #5
1001085c:	401a      	ands	r2, r3
1001085e:	d001      	beq.n	10010864 <__sflush_r+0x30>
10010860:	6d60      	ldr	r0, [r4, #84]	; 0x54
10010862:	e014      	b.n	1001088e <__sflush_r+0x5a>
10010864:	2301      	movs	r3, #1
10010866:	6a21      	ldr	r1, [r4, #32]
10010868:	0028      	movs	r0, r5
1001086a:	47b8      	blx	r7
1001086c:	1c43      	adds	r3, r0, #1
1001086e:	d10e      	bne.n	1001088e <__sflush_r+0x5a>
10010870:	682b      	ldr	r3, [r5, #0]
10010872:	2b00      	cmp	r3, #0
10010874:	d00b      	beq.n	1001088e <__sflush_r+0x5a>
10010876:	2b1d      	cmp	r3, #29
10010878:	d001      	beq.n	1001087e <__sflush_r+0x4a>
1001087a:	2b16      	cmp	r3, #22
1001087c:	d102      	bne.n	10010884 <__sflush_r+0x50>
1001087e:	602e      	str	r6, [r5, #0]
10010880:	2000      	movs	r0, #0
10010882:	e05a      	b.n	1001093a <__sflush_r+0x106>
10010884:	2240      	movs	r2, #64	; 0x40
10010886:	89a3      	ldrh	r3, [r4, #12]
10010888:	4313      	orrs	r3, r2
1001088a:	81a3      	strh	r3, [r4, #12]
1001088c:	e055      	b.n	1001093a <__sflush_r+0x106>
1001088e:	89a3      	ldrh	r3, [r4, #12]
10010890:	075b      	lsls	r3, r3, #29
10010892:	d506      	bpl.n	100108a2 <__sflush_r+0x6e>
10010894:	6863      	ldr	r3, [r4, #4]
10010896:	1ac0      	subs	r0, r0, r3
10010898:	6b63      	ldr	r3, [r4, #52]	; 0x34
1001089a:	2b00      	cmp	r3, #0
1001089c:	d001      	beq.n	100108a2 <__sflush_r+0x6e>
1001089e:	6c23      	ldr	r3, [r4, #64]	; 0x40
100108a0:	1ac0      	subs	r0, r0, r3
100108a2:	2300      	movs	r3, #0
100108a4:	0002      	movs	r2, r0
100108a6:	6a21      	ldr	r1, [r4, #32]
100108a8:	0028      	movs	r0, r5
100108aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100108ac:	47b8      	blx	r7
100108ae:	89a3      	ldrh	r3, [r4, #12]
100108b0:	1c42      	adds	r2, r0, #1
100108b2:	d106      	bne.n	100108c2 <__sflush_r+0x8e>
100108b4:	6829      	ldr	r1, [r5, #0]
100108b6:	291d      	cmp	r1, #29
100108b8:	d83a      	bhi.n	10010930 <__sflush_r+0xfc>
100108ba:	4a20      	ldr	r2, [pc, #128]	; (1001093c <__sflush_r+0x108>)
100108bc:	40ca      	lsrs	r2, r1
100108be:	07d2      	lsls	r2, r2, #31
100108c0:	d536      	bpl.n	10010930 <__sflush_r+0xfc>
100108c2:	2200      	movs	r2, #0
100108c4:	6062      	str	r2, [r4, #4]
100108c6:	6922      	ldr	r2, [r4, #16]
100108c8:	6022      	str	r2, [r4, #0]
100108ca:	04db      	lsls	r3, r3, #19
100108cc:	d505      	bpl.n	100108da <__sflush_r+0xa6>
100108ce:	1c43      	adds	r3, r0, #1
100108d0:	d102      	bne.n	100108d8 <__sflush_r+0xa4>
100108d2:	682b      	ldr	r3, [r5, #0]
100108d4:	2b00      	cmp	r3, #0
100108d6:	d100      	bne.n	100108da <__sflush_r+0xa6>
100108d8:	6560      	str	r0, [r4, #84]	; 0x54
100108da:	6b61      	ldr	r1, [r4, #52]	; 0x34
100108dc:	602e      	str	r6, [r5, #0]
100108de:	2900      	cmp	r1, #0
100108e0:	d0ce      	beq.n	10010880 <__sflush_r+0x4c>
100108e2:	0023      	movs	r3, r4
100108e4:	3344      	adds	r3, #68	; 0x44
100108e6:	4299      	cmp	r1, r3
100108e8:	d002      	beq.n	100108f0 <__sflush_r+0xbc>
100108ea:	0028      	movs	r0, r5
100108ec:	f000 f998 	bl	10010c20 <_free_r>
100108f0:	2000      	movs	r0, #0
100108f2:	6360      	str	r0, [r4, #52]	; 0x34
100108f4:	e021      	b.n	1001093a <__sflush_r+0x106>
100108f6:	690f      	ldr	r7, [r1, #16]
100108f8:	2f00      	cmp	r7, #0
100108fa:	d0c1      	beq.n	10010880 <__sflush_r+0x4c>
100108fc:	680b      	ldr	r3, [r1, #0]
100108fe:	600f      	str	r7, [r1, #0]
10010900:	1bdb      	subs	r3, r3, r7
10010902:	9301      	str	r3, [sp, #4]
10010904:	2300      	movs	r3, #0
10010906:	0792      	lsls	r2, r2, #30
10010908:	d100      	bne.n	1001090c <__sflush_r+0xd8>
1001090a:	694b      	ldr	r3, [r1, #20]
1001090c:	60a3      	str	r3, [r4, #8]
1001090e:	e003      	b.n	10010918 <__sflush_r+0xe4>
10010910:	9b01      	ldr	r3, [sp, #4]
10010912:	183f      	adds	r7, r7, r0
10010914:	1a1b      	subs	r3, r3, r0
10010916:	9301      	str	r3, [sp, #4]
10010918:	9b01      	ldr	r3, [sp, #4]
1001091a:	2b00      	cmp	r3, #0
1001091c:	ddb0      	ble.n	10010880 <__sflush_r+0x4c>
1001091e:	9b01      	ldr	r3, [sp, #4]
10010920:	003a      	movs	r2, r7
10010922:	6a21      	ldr	r1, [r4, #32]
10010924:	0028      	movs	r0, r5
10010926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10010928:	47b0      	blx	r6
1001092a:	2800      	cmp	r0, #0
1001092c:	dcf0      	bgt.n	10010910 <__sflush_r+0xdc>
1001092e:	89a3      	ldrh	r3, [r4, #12]
10010930:	2240      	movs	r2, #64	; 0x40
10010932:	2001      	movs	r0, #1
10010934:	4313      	orrs	r3, r2
10010936:	81a3      	strh	r3, [r4, #12]
10010938:	4240      	negs	r0, r0
1001093a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001093c:	20400001 	.word	0x20400001

10010940 <_fflush_r>:
10010940:	690b      	ldr	r3, [r1, #16]
10010942:	b570      	push	{r4, r5, r6, lr}
10010944:	0005      	movs	r5, r0
10010946:	000c      	movs	r4, r1
10010948:	2b00      	cmp	r3, #0
1001094a:	d101      	bne.n	10010950 <_fflush_r+0x10>
1001094c:	2000      	movs	r0, #0
1001094e:	e01c      	b.n	1001098a <_fflush_r+0x4a>
10010950:	2800      	cmp	r0, #0
10010952:	d004      	beq.n	1001095e <_fflush_r+0x1e>
10010954:	6983      	ldr	r3, [r0, #24]
10010956:	2b00      	cmp	r3, #0
10010958:	d101      	bne.n	1001095e <_fflush_r+0x1e>
1001095a:	f000 f85f 	bl	10010a1c <__sinit>
1001095e:	4b0b      	ldr	r3, [pc, #44]	; (1001098c <_fflush_r+0x4c>)
10010960:	429c      	cmp	r4, r3
10010962:	d101      	bne.n	10010968 <_fflush_r+0x28>
10010964:	686c      	ldr	r4, [r5, #4]
10010966:	e008      	b.n	1001097a <_fflush_r+0x3a>
10010968:	4b09      	ldr	r3, [pc, #36]	; (10010990 <_fflush_r+0x50>)
1001096a:	429c      	cmp	r4, r3
1001096c:	d101      	bne.n	10010972 <_fflush_r+0x32>
1001096e:	68ac      	ldr	r4, [r5, #8]
10010970:	e003      	b.n	1001097a <_fflush_r+0x3a>
10010972:	4b08      	ldr	r3, [pc, #32]	; (10010994 <_fflush_r+0x54>)
10010974:	429c      	cmp	r4, r3
10010976:	d100      	bne.n	1001097a <_fflush_r+0x3a>
10010978:	68ec      	ldr	r4, [r5, #12]
1001097a:	220c      	movs	r2, #12
1001097c:	5ea3      	ldrsh	r3, [r4, r2]
1001097e:	2b00      	cmp	r3, #0
10010980:	d0e4      	beq.n	1001094c <_fflush_r+0xc>
10010982:	0021      	movs	r1, r4
10010984:	0028      	movs	r0, r5
10010986:	f7ff ff55 	bl	10010834 <__sflush_r>
1001098a:	bd70      	pop	{r4, r5, r6, pc}
1001098c:	100122a4 	.word	0x100122a4
10010990:	100122c4 	.word	0x100122c4
10010994:	100122e4 	.word	0x100122e4

10010998 <_cleanup_r>:
10010998:	b510      	push	{r4, lr}
1001099a:	4902      	ldr	r1, [pc, #8]	; (100109a4 <_cleanup_r+0xc>)
1001099c:	f000 f8b0 	bl	10010b00 <_fwalk_reent>
100109a0:	bd10      	pop	{r4, pc}
100109a2:	46c0      	nop			; (mov r8, r8)
100109a4:	10010941 	.word	0x10010941

100109a8 <std.isra.0>:
100109a8:	2300      	movs	r3, #0
100109aa:	b510      	push	{r4, lr}
100109ac:	0004      	movs	r4, r0
100109ae:	6003      	str	r3, [r0, #0]
100109b0:	6043      	str	r3, [r0, #4]
100109b2:	6083      	str	r3, [r0, #8]
100109b4:	8181      	strh	r1, [r0, #12]
100109b6:	6643      	str	r3, [r0, #100]	; 0x64
100109b8:	81c2      	strh	r2, [r0, #14]
100109ba:	6103      	str	r3, [r0, #16]
100109bc:	6143      	str	r3, [r0, #20]
100109be:	6183      	str	r3, [r0, #24]
100109c0:	0019      	movs	r1, r3
100109c2:	2208      	movs	r2, #8
100109c4:	305c      	adds	r0, #92	; 0x5c
100109c6:	f7ff fccf 	bl	10010368 <memset>
100109ca:	4b05      	ldr	r3, [pc, #20]	; (100109e0 <std.isra.0+0x38>)
100109cc:	6224      	str	r4, [r4, #32]
100109ce:	6263      	str	r3, [r4, #36]	; 0x24
100109d0:	4b04      	ldr	r3, [pc, #16]	; (100109e4 <std.isra.0+0x3c>)
100109d2:	62a3      	str	r3, [r4, #40]	; 0x28
100109d4:	4b04      	ldr	r3, [pc, #16]	; (100109e8 <std.isra.0+0x40>)
100109d6:	62e3      	str	r3, [r4, #44]	; 0x2c
100109d8:	4b04      	ldr	r3, [pc, #16]	; (100109ec <std.isra.0+0x44>)
100109da:	6323      	str	r3, [r4, #48]	; 0x30
100109dc:	bd10      	pop	{r4, pc}
100109de:	46c0      	nop			; (mov r8, r8)
100109e0:	10011391 	.word	0x10011391
100109e4:	100113b9 	.word	0x100113b9
100109e8:	100113f1 	.word	0x100113f1
100109ec:	1001141d 	.word	0x1001141d

100109f0 <__sfmoreglue>:
100109f0:	b570      	push	{r4, r5, r6, lr}
100109f2:	2568      	movs	r5, #104	; 0x68
100109f4:	1e4b      	subs	r3, r1, #1
100109f6:	435d      	muls	r5, r3
100109f8:	000e      	movs	r6, r1
100109fa:	0029      	movs	r1, r5
100109fc:	3174      	adds	r1, #116	; 0x74
100109fe:	f000 f955 	bl	10010cac <_malloc_r>
10010a02:	1e04      	subs	r4, r0, #0
10010a04:	d008      	beq.n	10010a18 <__sfmoreglue+0x28>
10010a06:	2100      	movs	r1, #0
10010a08:	002a      	movs	r2, r5
10010a0a:	6001      	str	r1, [r0, #0]
10010a0c:	6046      	str	r6, [r0, #4]
10010a0e:	300c      	adds	r0, #12
10010a10:	60a0      	str	r0, [r4, #8]
10010a12:	3268      	adds	r2, #104	; 0x68
10010a14:	f7ff fca8 	bl	10010368 <memset>
10010a18:	0020      	movs	r0, r4
10010a1a:	bd70      	pop	{r4, r5, r6, pc}

10010a1c <__sinit>:
10010a1c:	6983      	ldr	r3, [r0, #24]
10010a1e:	b513      	push	{r0, r1, r4, lr}
10010a20:	0004      	movs	r4, r0
10010a22:	2b00      	cmp	r3, #0
10010a24:	d128      	bne.n	10010a78 <__sinit+0x5c>
10010a26:	6483      	str	r3, [r0, #72]	; 0x48
10010a28:	64c3      	str	r3, [r0, #76]	; 0x4c
10010a2a:	6503      	str	r3, [r0, #80]	; 0x50
10010a2c:	4b13      	ldr	r3, [pc, #76]	; (10010a7c <__sinit+0x60>)
10010a2e:	4a14      	ldr	r2, [pc, #80]	; (10010a80 <__sinit+0x64>)
10010a30:	681b      	ldr	r3, [r3, #0]
10010a32:	6282      	str	r2, [r0, #40]	; 0x28
10010a34:	9301      	str	r3, [sp, #4]
10010a36:	4298      	cmp	r0, r3
10010a38:	d101      	bne.n	10010a3e <__sinit+0x22>
10010a3a:	2301      	movs	r3, #1
10010a3c:	6183      	str	r3, [r0, #24]
10010a3e:	0020      	movs	r0, r4
10010a40:	f000 f820 	bl	10010a84 <__sfp>
10010a44:	6060      	str	r0, [r4, #4]
10010a46:	0020      	movs	r0, r4
10010a48:	f000 f81c 	bl	10010a84 <__sfp>
10010a4c:	60a0      	str	r0, [r4, #8]
10010a4e:	0020      	movs	r0, r4
10010a50:	f000 f818 	bl	10010a84 <__sfp>
10010a54:	2200      	movs	r2, #0
10010a56:	60e0      	str	r0, [r4, #12]
10010a58:	2104      	movs	r1, #4
10010a5a:	6860      	ldr	r0, [r4, #4]
10010a5c:	f7ff ffa4 	bl	100109a8 <std.isra.0>
10010a60:	2201      	movs	r2, #1
10010a62:	2109      	movs	r1, #9
10010a64:	68a0      	ldr	r0, [r4, #8]
10010a66:	f7ff ff9f 	bl	100109a8 <std.isra.0>
10010a6a:	2202      	movs	r2, #2
10010a6c:	2112      	movs	r1, #18
10010a6e:	68e0      	ldr	r0, [r4, #12]
10010a70:	f7ff ff9a 	bl	100109a8 <std.isra.0>
10010a74:	2301      	movs	r3, #1
10010a76:	61a3      	str	r3, [r4, #24]
10010a78:	bd13      	pop	{r0, r1, r4, pc}
10010a7a:	46c0      	nop			; (mov r8, r8)
10010a7c:	100122a0 	.word	0x100122a0
10010a80:	10010999 	.word	0x10010999

10010a84 <__sfp>:
10010a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010a86:	4b1d      	ldr	r3, [pc, #116]	; (10010afc <__sfp+0x78>)
10010a88:	0006      	movs	r6, r0
10010a8a:	681d      	ldr	r5, [r3, #0]
10010a8c:	69ab      	ldr	r3, [r5, #24]
10010a8e:	2b00      	cmp	r3, #0
10010a90:	d102      	bne.n	10010a98 <__sfp+0x14>
10010a92:	0028      	movs	r0, r5
10010a94:	f7ff ffc2 	bl	10010a1c <__sinit>
10010a98:	3548      	adds	r5, #72	; 0x48
10010a9a:	68ac      	ldr	r4, [r5, #8]
10010a9c:	686b      	ldr	r3, [r5, #4]
10010a9e:	3b01      	subs	r3, #1
10010aa0:	d405      	bmi.n	10010aae <__sfp+0x2a>
10010aa2:	220c      	movs	r2, #12
10010aa4:	5ea7      	ldrsh	r7, [r4, r2]
10010aa6:	2f00      	cmp	r7, #0
10010aa8:	d010      	beq.n	10010acc <__sfp+0x48>
10010aaa:	3468      	adds	r4, #104	; 0x68
10010aac:	e7f7      	b.n	10010a9e <__sfp+0x1a>
10010aae:	682b      	ldr	r3, [r5, #0]
10010ab0:	2b00      	cmp	r3, #0
10010ab2:	d001      	beq.n	10010ab8 <__sfp+0x34>
10010ab4:	682d      	ldr	r5, [r5, #0]
10010ab6:	e7f0      	b.n	10010a9a <__sfp+0x16>
10010ab8:	2104      	movs	r1, #4
10010aba:	0030      	movs	r0, r6
10010abc:	f7ff ff98 	bl	100109f0 <__sfmoreglue>
10010ac0:	6028      	str	r0, [r5, #0]
10010ac2:	2800      	cmp	r0, #0
10010ac4:	d1f6      	bne.n	10010ab4 <__sfp+0x30>
10010ac6:	230c      	movs	r3, #12
10010ac8:	6033      	str	r3, [r6, #0]
10010aca:	e016      	b.n	10010afa <__sfp+0x76>
10010acc:	2301      	movs	r3, #1
10010ace:	0020      	movs	r0, r4
10010ad0:	425b      	negs	r3, r3
10010ad2:	81e3      	strh	r3, [r4, #14]
10010ad4:	3302      	adds	r3, #2
10010ad6:	81a3      	strh	r3, [r4, #12]
10010ad8:	6667      	str	r7, [r4, #100]	; 0x64
10010ada:	6027      	str	r7, [r4, #0]
10010adc:	60a7      	str	r7, [r4, #8]
10010ade:	6067      	str	r7, [r4, #4]
10010ae0:	6127      	str	r7, [r4, #16]
10010ae2:	6167      	str	r7, [r4, #20]
10010ae4:	61a7      	str	r7, [r4, #24]
10010ae6:	305c      	adds	r0, #92	; 0x5c
10010ae8:	2208      	movs	r2, #8
10010aea:	0039      	movs	r1, r7
10010aec:	f7ff fc3c 	bl	10010368 <memset>
10010af0:	0020      	movs	r0, r4
10010af2:	6367      	str	r7, [r4, #52]	; 0x34
10010af4:	63a7      	str	r7, [r4, #56]	; 0x38
10010af6:	64a7      	str	r7, [r4, #72]	; 0x48
10010af8:	64e7      	str	r7, [r4, #76]	; 0x4c
10010afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010afc:	100122a0 	.word	0x100122a0

10010b00 <_fwalk_reent>:
10010b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010b02:	0004      	movs	r4, r0
10010b04:	0007      	movs	r7, r0
10010b06:	2600      	movs	r6, #0
10010b08:	9101      	str	r1, [sp, #4]
10010b0a:	3448      	adds	r4, #72	; 0x48
10010b0c:	2c00      	cmp	r4, #0
10010b0e:	d016      	beq.n	10010b3e <_fwalk_reent+0x3e>
10010b10:	6863      	ldr	r3, [r4, #4]
10010b12:	68a5      	ldr	r5, [r4, #8]
10010b14:	9300      	str	r3, [sp, #0]
10010b16:	9b00      	ldr	r3, [sp, #0]
10010b18:	3b01      	subs	r3, #1
10010b1a:	9300      	str	r3, [sp, #0]
10010b1c:	d40d      	bmi.n	10010b3a <_fwalk_reent+0x3a>
10010b1e:	89ab      	ldrh	r3, [r5, #12]
10010b20:	2b01      	cmp	r3, #1
10010b22:	d908      	bls.n	10010b36 <_fwalk_reent+0x36>
10010b24:	220e      	movs	r2, #14
10010b26:	5eab      	ldrsh	r3, [r5, r2]
10010b28:	3301      	adds	r3, #1
10010b2a:	d004      	beq.n	10010b36 <_fwalk_reent+0x36>
10010b2c:	0029      	movs	r1, r5
10010b2e:	0038      	movs	r0, r7
10010b30:	9b01      	ldr	r3, [sp, #4]
10010b32:	4798      	blx	r3
10010b34:	4306      	orrs	r6, r0
10010b36:	3568      	adds	r5, #104	; 0x68
10010b38:	e7ed      	b.n	10010b16 <_fwalk_reent+0x16>
10010b3a:	6824      	ldr	r4, [r4, #0]
10010b3c:	e7e6      	b.n	10010b0c <_fwalk_reent+0xc>
10010b3e:	0030      	movs	r0, r6
10010b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10010b44 <__swhatbuf_r>:
10010b44:	b570      	push	{r4, r5, r6, lr}
10010b46:	000e      	movs	r6, r1
10010b48:	001d      	movs	r5, r3
10010b4a:	230e      	movs	r3, #14
10010b4c:	5ec9      	ldrsh	r1, [r1, r3]
10010b4e:	b090      	sub	sp, #64	; 0x40
10010b50:	0014      	movs	r4, r2
10010b52:	2900      	cmp	r1, #0
10010b54:	da06      	bge.n	10010b64 <__swhatbuf_r+0x20>
10010b56:	2300      	movs	r3, #0
10010b58:	602b      	str	r3, [r5, #0]
10010b5a:	89b3      	ldrh	r3, [r6, #12]
10010b5c:	061b      	lsls	r3, r3, #24
10010b5e:	d50f      	bpl.n	10010b80 <__swhatbuf_r+0x3c>
10010b60:	2340      	movs	r3, #64	; 0x40
10010b62:	e00f      	b.n	10010b84 <__swhatbuf_r+0x40>
10010b64:	aa01      	add	r2, sp, #4
10010b66:	f000 fc85 	bl	10011474 <_fstat_r>
10010b6a:	2800      	cmp	r0, #0
10010b6c:	dbf3      	blt.n	10010b56 <__swhatbuf_r+0x12>
10010b6e:	23f0      	movs	r3, #240	; 0xf0
10010b70:	9a02      	ldr	r2, [sp, #8]
10010b72:	021b      	lsls	r3, r3, #8
10010b74:	4013      	ands	r3, r2
10010b76:	4a05      	ldr	r2, [pc, #20]	; (10010b8c <__swhatbuf_r+0x48>)
10010b78:	189b      	adds	r3, r3, r2
10010b7a:	425a      	negs	r2, r3
10010b7c:	4153      	adcs	r3, r2
10010b7e:	602b      	str	r3, [r5, #0]
10010b80:	2380      	movs	r3, #128	; 0x80
10010b82:	00db      	lsls	r3, r3, #3
10010b84:	2000      	movs	r0, #0
10010b86:	6023      	str	r3, [r4, #0]
10010b88:	b010      	add	sp, #64	; 0x40
10010b8a:	bd70      	pop	{r4, r5, r6, pc}
10010b8c:	ffffe000 	.word	0xffffe000

10010b90 <__smakebuf_r>:
10010b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010b92:	2602      	movs	r6, #2
10010b94:	898b      	ldrh	r3, [r1, #12]
10010b96:	0005      	movs	r5, r0
10010b98:	000c      	movs	r4, r1
10010b9a:	4233      	tst	r3, r6
10010b9c:	d110      	bne.n	10010bc0 <__smakebuf_r+0x30>
10010b9e:	ab01      	add	r3, sp, #4
10010ba0:	466a      	mov	r2, sp
10010ba2:	f7ff ffcf 	bl	10010b44 <__swhatbuf_r>
10010ba6:	9900      	ldr	r1, [sp, #0]
10010ba8:	0007      	movs	r7, r0
10010baa:	0028      	movs	r0, r5
10010bac:	f000 f87e 	bl	10010cac <_malloc_r>
10010bb0:	2800      	cmp	r0, #0
10010bb2:	d10c      	bne.n	10010bce <__smakebuf_r+0x3e>
10010bb4:	220c      	movs	r2, #12
10010bb6:	5ea3      	ldrsh	r3, [r4, r2]
10010bb8:	059a      	lsls	r2, r3, #22
10010bba:	d423      	bmi.n	10010c04 <__smakebuf_r+0x74>
10010bbc:	4333      	orrs	r3, r6
10010bbe:	81a3      	strh	r3, [r4, #12]
10010bc0:	0023      	movs	r3, r4
10010bc2:	3347      	adds	r3, #71	; 0x47
10010bc4:	6023      	str	r3, [r4, #0]
10010bc6:	6123      	str	r3, [r4, #16]
10010bc8:	2301      	movs	r3, #1
10010bca:	6163      	str	r3, [r4, #20]
10010bcc:	e01a      	b.n	10010c04 <__smakebuf_r+0x74>
10010bce:	2280      	movs	r2, #128	; 0x80
10010bd0:	4b0d      	ldr	r3, [pc, #52]	; (10010c08 <__smakebuf_r+0x78>)
10010bd2:	62ab      	str	r3, [r5, #40]	; 0x28
10010bd4:	89a3      	ldrh	r3, [r4, #12]
10010bd6:	6020      	str	r0, [r4, #0]
10010bd8:	4313      	orrs	r3, r2
10010bda:	81a3      	strh	r3, [r4, #12]
10010bdc:	9b00      	ldr	r3, [sp, #0]
10010bde:	6120      	str	r0, [r4, #16]
10010be0:	6163      	str	r3, [r4, #20]
10010be2:	9b01      	ldr	r3, [sp, #4]
10010be4:	2b00      	cmp	r3, #0
10010be6:	d00a      	beq.n	10010bfe <__smakebuf_r+0x6e>
10010be8:	230e      	movs	r3, #14
10010bea:	5ee1      	ldrsh	r1, [r4, r3]
10010bec:	0028      	movs	r0, r5
10010bee:	f000 fc53 	bl	10011498 <_isatty_r>
10010bf2:	2800      	cmp	r0, #0
10010bf4:	d003      	beq.n	10010bfe <__smakebuf_r+0x6e>
10010bf6:	2201      	movs	r2, #1
10010bf8:	89a3      	ldrh	r3, [r4, #12]
10010bfa:	4313      	orrs	r3, r2
10010bfc:	81a3      	strh	r3, [r4, #12]
10010bfe:	89a3      	ldrh	r3, [r4, #12]
10010c00:	431f      	orrs	r7, r3
10010c02:	81a7      	strh	r7, [r4, #12]
10010c04:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010c06:	46c0      	nop			; (mov r8, r8)
10010c08:	10010999 	.word	0x10010999

10010c0c <malloc>:
10010c0c:	b510      	push	{r4, lr}
10010c0e:	4b03      	ldr	r3, [pc, #12]	; (10010c1c <malloc+0x10>)
10010c10:	0001      	movs	r1, r0
10010c12:	6818      	ldr	r0, [r3, #0]
10010c14:	f000 f84a 	bl	10010cac <_malloc_r>
10010c18:	bd10      	pop	{r4, pc}
10010c1a:	46c0      	nop			; (mov r8, r8)
10010c1c:	100123cc 	.word	0x100123cc

10010c20 <_free_r>:
10010c20:	b530      	push	{r4, r5, lr}
10010c22:	2900      	cmp	r1, #0
10010c24:	d03e      	beq.n	10010ca4 <_free_r+0x84>
10010c26:	3904      	subs	r1, #4
10010c28:	680b      	ldr	r3, [r1, #0]
10010c2a:	2b00      	cmp	r3, #0
10010c2c:	da00      	bge.n	10010c30 <_free_r+0x10>
10010c2e:	18c9      	adds	r1, r1, r3
10010c30:	4a1d      	ldr	r2, [pc, #116]	; (10010ca8 <_free_r+0x88>)
10010c32:	6813      	ldr	r3, [r2, #0]
10010c34:	0014      	movs	r4, r2
10010c36:	2b00      	cmp	r3, #0
10010c38:	d102      	bne.n	10010c40 <_free_r+0x20>
10010c3a:	604b      	str	r3, [r1, #4]
10010c3c:	6011      	str	r1, [r2, #0]
10010c3e:	e031      	b.n	10010ca4 <_free_r+0x84>
10010c40:	428b      	cmp	r3, r1
10010c42:	d90d      	bls.n	10010c60 <_free_r+0x40>
10010c44:	680a      	ldr	r2, [r1, #0]
10010c46:	1888      	adds	r0, r1, r2
10010c48:	4283      	cmp	r3, r0
10010c4a:	d103      	bne.n	10010c54 <_free_r+0x34>
10010c4c:	6818      	ldr	r0, [r3, #0]
10010c4e:	685b      	ldr	r3, [r3, #4]
10010c50:	1882      	adds	r2, r0, r2
10010c52:	600a      	str	r2, [r1, #0]
10010c54:	604b      	str	r3, [r1, #4]
10010c56:	6021      	str	r1, [r4, #0]
10010c58:	e024      	b.n	10010ca4 <_free_r+0x84>
10010c5a:	428a      	cmp	r2, r1
10010c5c:	d803      	bhi.n	10010c66 <_free_r+0x46>
10010c5e:	0013      	movs	r3, r2
10010c60:	685a      	ldr	r2, [r3, #4]
10010c62:	2a00      	cmp	r2, #0
10010c64:	d1f9      	bne.n	10010c5a <_free_r+0x3a>
10010c66:	681d      	ldr	r5, [r3, #0]
10010c68:	195c      	adds	r4, r3, r5
10010c6a:	428c      	cmp	r4, r1
10010c6c:	d10b      	bne.n	10010c86 <_free_r+0x66>
10010c6e:	6809      	ldr	r1, [r1, #0]
10010c70:	1869      	adds	r1, r5, r1
10010c72:	1858      	adds	r0, r3, r1
10010c74:	6019      	str	r1, [r3, #0]
10010c76:	4282      	cmp	r2, r0
10010c78:	d114      	bne.n	10010ca4 <_free_r+0x84>
10010c7a:	6810      	ldr	r0, [r2, #0]
10010c7c:	6852      	ldr	r2, [r2, #4]
10010c7e:	1841      	adds	r1, r0, r1
10010c80:	6019      	str	r1, [r3, #0]
10010c82:	605a      	str	r2, [r3, #4]
10010c84:	e00e      	b.n	10010ca4 <_free_r+0x84>
10010c86:	428c      	cmp	r4, r1
10010c88:	d902      	bls.n	10010c90 <_free_r+0x70>
10010c8a:	230c      	movs	r3, #12
10010c8c:	6003      	str	r3, [r0, #0]
10010c8e:	e009      	b.n	10010ca4 <_free_r+0x84>
10010c90:	6808      	ldr	r0, [r1, #0]
10010c92:	180c      	adds	r4, r1, r0
10010c94:	42a2      	cmp	r2, r4
10010c96:	d103      	bne.n	10010ca0 <_free_r+0x80>
10010c98:	6814      	ldr	r4, [r2, #0]
10010c9a:	6852      	ldr	r2, [r2, #4]
10010c9c:	1820      	adds	r0, r4, r0
10010c9e:	6008      	str	r0, [r1, #0]
10010ca0:	604a      	str	r2, [r1, #4]
10010ca2:	6059      	str	r1, [r3, #4]
10010ca4:	bd30      	pop	{r4, r5, pc}
10010ca6:	46c0      	nop			; (mov r8, r8)
10010ca8:	10013eac 	.word	0x10013eac

10010cac <_malloc_r>:
10010cac:	2303      	movs	r3, #3
10010cae:	b570      	push	{r4, r5, r6, lr}
10010cb0:	1ccd      	adds	r5, r1, #3
10010cb2:	439d      	bics	r5, r3
10010cb4:	3508      	adds	r5, #8
10010cb6:	0006      	movs	r6, r0
10010cb8:	2d0c      	cmp	r5, #12
10010cba:	d201      	bcs.n	10010cc0 <_malloc_r+0x14>
10010cbc:	250c      	movs	r5, #12
10010cbe:	e005      	b.n	10010ccc <_malloc_r+0x20>
10010cc0:	2d00      	cmp	r5, #0
10010cc2:	da03      	bge.n	10010ccc <_malloc_r+0x20>
10010cc4:	230c      	movs	r3, #12
10010cc6:	2000      	movs	r0, #0
10010cc8:	6033      	str	r3, [r6, #0]
10010cca:	e040      	b.n	10010d4e <_malloc_r+0xa2>
10010ccc:	42a9      	cmp	r1, r5
10010cce:	d8f9      	bhi.n	10010cc4 <_malloc_r+0x18>
10010cd0:	4b1f      	ldr	r3, [pc, #124]	; (10010d50 <_malloc_r+0xa4>)
10010cd2:	681c      	ldr	r4, [r3, #0]
10010cd4:	001a      	movs	r2, r3
10010cd6:	0021      	movs	r1, r4
10010cd8:	2900      	cmp	r1, #0
10010cda:	d013      	beq.n	10010d04 <_malloc_r+0x58>
10010cdc:	680b      	ldr	r3, [r1, #0]
10010cde:	1b5b      	subs	r3, r3, r5
10010ce0:	d40d      	bmi.n	10010cfe <_malloc_r+0x52>
10010ce2:	2b0b      	cmp	r3, #11
10010ce4:	d902      	bls.n	10010cec <_malloc_r+0x40>
10010ce6:	600b      	str	r3, [r1, #0]
10010ce8:	18cc      	adds	r4, r1, r3
10010cea:	e01e      	b.n	10010d2a <_malloc_r+0x7e>
10010cec:	428c      	cmp	r4, r1
10010cee:	d102      	bne.n	10010cf6 <_malloc_r+0x4a>
10010cf0:	6863      	ldr	r3, [r4, #4]
10010cf2:	6013      	str	r3, [r2, #0]
10010cf4:	e01a      	b.n	10010d2c <_malloc_r+0x80>
10010cf6:	684b      	ldr	r3, [r1, #4]
10010cf8:	6063      	str	r3, [r4, #4]
10010cfa:	000c      	movs	r4, r1
10010cfc:	e016      	b.n	10010d2c <_malloc_r+0x80>
10010cfe:	000c      	movs	r4, r1
10010d00:	6849      	ldr	r1, [r1, #4]
10010d02:	e7e9      	b.n	10010cd8 <_malloc_r+0x2c>
10010d04:	4c13      	ldr	r4, [pc, #76]	; (10010d54 <_malloc_r+0xa8>)
10010d06:	6823      	ldr	r3, [r4, #0]
10010d08:	2b00      	cmp	r3, #0
10010d0a:	d103      	bne.n	10010d14 <_malloc_r+0x68>
10010d0c:	0030      	movs	r0, r6
10010d0e:	f000 fb2d 	bl	1001136c <_sbrk_r>
10010d12:	6020      	str	r0, [r4, #0]
10010d14:	0029      	movs	r1, r5
10010d16:	0030      	movs	r0, r6
10010d18:	f000 fb28 	bl	1001136c <_sbrk_r>
10010d1c:	1c43      	adds	r3, r0, #1
10010d1e:	d0d1      	beq.n	10010cc4 <_malloc_r+0x18>
10010d20:	2303      	movs	r3, #3
10010d22:	1cc4      	adds	r4, r0, #3
10010d24:	439c      	bics	r4, r3
10010d26:	42a0      	cmp	r0, r4
10010d28:	d10a      	bne.n	10010d40 <_malloc_r+0x94>
10010d2a:	6025      	str	r5, [r4, #0]
10010d2c:	0020      	movs	r0, r4
10010d2e:	2207      	movs	r2, #7
10010d30:	300b      	adds	r0, #11
10010d32:	1d23      	adds	r3, r4, #4
10010d34:	4390      	bics	r0, r2
10010d36:	1ac3      	subs	r3, r0, r3
10010d38:	d009      	beq.n	10010d4e <_malloc_r+0xa2>
10010d3a:	425a      	negs	r2, r3
10010d3c:	50e2      	str	r2, [r4, r3]
10010d3e:	e006      	b.n	10010d4e <_malloc_r+0xa2>
10010d40:	1a21      	subs	r1, r4, r0
10010d42:	0030      	movs	r0, r6
10010d44:	f000 fb12 	bl	1001136c <_sbrk_r>
10010d48:	1c43      	adds	r3, r0, #1
10010d4a:	d1ee      	bne.n	10010d2a <_malloc_r+0x7e>
10010d4c:	e7ba      	b.n	10010cc4 <_malloc_r+0x18>
10010d4e:	bd70      	pop	{r4, r5, r6, pc}
10010d50:	10013eac 	.word	0x10013eac
10010d54:	10013ea8 	.word	0x10013ea8

10010d58 <__sfputc_r>:
10010d58:	6893      	ldr	r3, [r2, #8]
10010d5a:	b510      	push	{r4, lr}
10010d5c:	3b01      	subs	r3, #1
10010d5e:	6093      	str	r3, [r2, #8]
10010d60:	2b00      	cmp	r3, #0
10010d62:	da05      	bge.n	10010d70 <__sfputc_r+0x18>
10010d64:	6994      	ldr	r4, [r2, #24]
10010d66:	42a3      	cmp	r3, r4
10010d68:	db08      	blt.n	10010d7c <__sfputc_r+0x24>
10010d6a:	b2cb      	uxtb	r3, r1
10010d6c:	2b0a      	cmp	r3, #10
10010d6e:	d005      	beq.n	10010d7c <__sfputc_r+0x24>
10010d70:	6813      	ldr	r3, [r2, #0]
10010d72:	1c58      	adds	r0, r3, #1
10010d74:	6010      	str	r0, [r2, #0]
10010d76:	7019      	strb	r1, [r3, #0]
10010d78:	b2c8      	uxtb	r0, r1
10010d7a:	e001      	b.n	10010d80 <__sfputc_r+0x28>
10010d7c:	f7ff fc8c 	bl	10010698 <__swbuf_r>
10010d80:	bd10      	pop	{r4, pc}

10010d82 <__sfputs_r>:
10010d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010d84:	0006      	movs	r6, r0
10010d86:	000f      	movs	r7, r1
10010d88:	0014      	movs	r4, r2
10010d8a:	18d5      	adds	r5, r2, r3
10010d8c:	42ac      	cmp	r4, r5
10010d8e:	d008      	beq.n	10010da2 <__sfputs_r+0x20>
10010d90:	7821      	ldrb	r1, [r4, #0]
10010d92:	003a      	movs	r2, r7
10010d94:	0030      	movs	r0, r6
10010d96:	f7ff ffdf 	bl	10010d58 <__sfputc_r>
10010d9a:	3401      	adds	r4, #1
10010d9c:	1c43      	adds	r3, r0, #1
10010d9e:	d1f5      	bne.n	10010d8c <__sfputs_r+0xa>
10010da0:	e000      	b.n	10010da4 <__sfputs_r+0x22>
10010da2:	2000      	movs	r0, #0
10010da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10010da8 <_vfiprintf_r>:
10010da8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010daa:	b09f      	sub	sp, #124	; 0x7c
10010dac:	0006      	movs	r6, r0
10010dae:	000f      	movs	r7, r1
10010db0:	9202      	str	r2, [sp, #8]
10010db2:	9305      	str	r3, [sp, #20]
10010db4:	2800      	cmp	r0, #0
10010db6:	d004      	beq.n	10010dc2 <_vfiprintf_r+0x1a>
10010db8:	6983      	ldr	r3, [r0, #24]
10010dba:	2b00      	cmp	r3, #0
10010dbc:	d101      	bne.n	10010dc2 <_vfiprintf_r+0x1a>
10010dbe:	f7ff fe2d 	bl	10010a1c <__sinit>
10010dc2:	4b7f      	ldr	r3, [pc, #508]	; (10010fc0 <_vfiprintf_r+0x218>)
10010dc4:	429f      	cmp	r7, r3
10010dc6:	d101      	bne.n	10010dcc <_vfiprintf_r+0x24>
10010dc8:	6877      	ldr	r7, [r6, #4]
10010dca:	e008      	b.n	10010dde <_vfiprintf_r+0x36>
10010dcc:	4b7d      	ldr	r3, [pc, #500]	; (10010fc4 <_vfiprintf_r+0x21c>)
10010dce:	429f      	cmp	r7, r3
10010dd0:	d101      	bne.n	10010dd6 <_vfiprintf_r+0x2e>
10010dd2:	68b7      	ldr	r7, [r6, #8]
10010dd4:	e003      	b.n	10010dde <_vfiprintf_r+0x36>
10010dd6:	4b7c      	ldr	r3, [pc, #496]	; (10010fc8 <_vfiprintf_r+0x220>)
10010dd8:	429f      	cmp	r7, r3
10010dda:	d100      	bne.n	10010dde <_vfiprintf_r+0x36>
10010ddc:	68f7      	ldr	r7, [r6, #12]
10010dde:	89bb      	ldrh	r3, [r7, #12]
10010de0:	071b      	lsls	r3, r3, #28
10010de2:	d50a      	bpl.n	10010dfa <_vfiprintf_r+0x52>
10010de4:	693b      	ldr	r3, [r7, #16]
10010de6:	2b00      	cmp	r3, #0
10010de8:	d007      	beq.n	10010dfa <_vfiprintf_r+0x52>
10010dea:	2300      	movs	r3, #0
10010dec:	ad06      	add	r5, sp, #24
10010dee:	616b      	str	r3, [r5, #20]
10010df0:	3320      	adds	r3, #32
10010df2:	766b      	strb	r3, [r5, #25]
10010df4:	3310      	adds	r3, #16
10010df6:	76ab      	strb	r3, [r5, #26]
10010df8:	e03d      	b.n	10010e76 <_vfiprintf_r+0xce>
10010dfa:	0039      	movs	r1, r7
10010dfc:	0030      	movs	r0, r6
10010dfe:	f7ff fca3 	bl	10010748 <__swsetup_r>
10010e02:	2800      	cmp	r0, #0
10010e04:	d0f1      	beq.n	10010dea <_vfiprintf_r+0x42>
10010e06:	2001      	movs	r0, #1
10010e08:	4240      	negs	r0, r0
10010e0a:	e0d6      	b.n	10010fba <_vfiprintf_r+0x212>
10010e0c:	9a05      	ldr	r2, [sp, #20]
10010e0e:	1d11      	adds	r1, r2, #4
10010e10:	6812      	ldr	r2, [r2, #0]
10010e12:	9105      	str	r1, [sp, #20]
10010e14:	2a00      	cmp	r2, #0
10010e16:	da00      	bge.n	10010e1a <_vfiprintf_r+0x72>
10010e18:	e07f      	b.n	10010f1a <_vfiprintf_r+0x172>
10010e1a:	9209      	str	r2, [sp, #36]	; 0x24
10010e1c:	3401      	adds	r4, #1
10010e1e:	7823      	ldrb	r3, [r4, #0]
10010e20:	2b2e      	cmp	r3, #46	; 0x2e
10010e22:	d100      	bne.n	10010e26 <_vfiprintf_r+0x7e>
10010e24:	e08d      	b.n	10010f42 <_vfiprintf_r+0x19a>
10010e26:	7821      	ldrb	r1, [r4, #0]
10010e28:	2203      	movs	r2, #3
10010e2a:	4868      	ldr	r0, [pc, #416]	; (10010fcc <_vfiprintf_r+0x224>)
10010e2c:	f000 fb5a 	bl	100114e4 <memchr>
10010e30:	2800      	cmp	r0, #0
10010e32:	d007      	beq.n	10010e44 <_vfiprintf_r+0x9c>
10010e34:	4b65      	ldr	r3, [pc, #404]	; (10010fcc <_vfiprintf_r+0x224>)
10010e36:	682a      	ldr	r2, [r5, #0]
10010e38:	1ac0      	subs	r0, r0, r3
10010e3a:	2340      	movs	r3, #64	; 0x40
10010e3c:	4083      	lsls	r3, r0
10010e3e:	4313      	orrs	r3, r2
10010e40:	602b      	str	r3, [r5, #0]
10010e42:	3401      	adds	r4, #1
10010e44:	7821      	ldrb	r1, [r4, #0]
10010e46:	1c63      	adds	r3, r4, #1
10010e48:	2206      	movs	r2, #6
10010e4a:	4861      	ldr	r0, [pc, #388]	; (10010fd0 <_vfiprintf_r+0x228>)
10010e4c:	9302      	str	r3, [sp, #8]
10010e4e:	7629      	strb	r1, [r5, #24]
10010e50:	f000 fb48 	bl	100114e4 <memchr>
10010e54:	2800      	cmp	r0, #0
10010e56:	d100      	bne.n	10010e5a <_vfiprintf_r+0xb2>
10010e58:	e09d      	b.n	10010f96 <_vfiprintf_r+0x1ee>
10010e5a:	4b5e      	ldr	r3, [pc, #376]	; (10010fd4 <_vfiprintf_r+0x22c>)
10010e5c:	2b00      	cmp	r3, #0
10010e5e:	d000      	beq.n	10010e62 <_vfiprintf_r+0xba>
10010e60:	e090      	b.n	10010f84 <_vfiprintf_r+0x1dc>
10010e62:	2207      	movs	r2, #7
10010e64:	9b05      	ldr	r3, [sp, #20]
10010e66:	3307      	adds	r3, #7
10010e68:	4393      	bics	r3, r2
10010e6a:	3308      	adds	r3, #8
10010e6c:	9305      	str	r3, [sp, #20]
10010e6e:	696b      	ldr	r3, [r5, #20]
10010e70:	9a03      	ldr	r2, [sp, #12]
10010e72:	189b      	adds	r3, r3, r2
10010e74:	616b      	str	r3, [r5, #20]
10010e76:	9c02      	ldr	r4, [sp, #8]
10010e78:	7823      	ldrb	r3, [r4, #0]
10010e7a:	2b00      	cmp	r3, #0
10010e7c:	d104      	bne.n	10010e88 <_vfiprintf_r+0xe0>
10010e7e:	9b02      	ldr	r3, [sp, #8]
10010e80:	1ae3      	subs	r3, r4, r3
10010e82:	9304      	str	r3, [sp, #16]
10010e84:	d012      	beq.n	10010eac <_vfiprintf_r+0x104>
10010e86:	e003      	b.n	10010e90 <_vfiprintf_r+0xe8>
10010e88:	2b25      	cmp	r3, #37	; 0x25
10010e8a:	d0f8      	beq.n	10010e7e <_vfiprintf_r+0xd6>
10010e8c:	3401      	adds	r4, #1
10010e8e:	e7f3      	b.n	10010e78 <_vfiprintf_r+0xd0>
10010e90:	9b04      	ldr	r3, [sp, #16]
10010e92:	9a02      	ldr	r2, [sp, #8]
10010e94:	0039      	movs	r1, r7
10010e96:	0030      	movs	r0, r6
10010e98:	f7ff ff73 	bl	10010d82 <__sfputs_r>
10010e9c:	1c43      	adds	r3, r0, #1
10010e9e:	d100      	bne.n	10010ea2 <_vfiprintf_r+0xfa>
10010ea0:	e086      	b.n	10010fb0 <_vfiprintf_r+0x208>
10010ea2:	696a      	ldr	r2, [r5, #20]
10010ea4:	9b04      	ldr	r3, [sp, #16]
10010ea6:	4694      	mov	ip, r2
10010ea8:	4463      	add	r3, ip
10010eaa:	616b      	str	r3, [r5, #20]
10010eac:	7823      	ldrb	r3, [r4, #0]
10010eae:	2b00      	cmp	r3, #0
10010eb0:	d07e      	beq.n	10010fb0 <_vfiprintf_r+0x208>
10010eb2:	2201      	movs	r2, #1
10010eb4:	2300      	movs	r3, #0
10010eb6:	4252      	negs	r2, r2
10010eb8:	606a      	str	r2, [r5, #4]
10010eba:	a902      	add	r1, sp, #8
10010ebc:	3254      	adds	r2, #84	; 0x54
10010ebe:	1852      	adds	r2, r2, r1
10010ec0:	3401      	adds	r4, #1
10010ec2:	602b      	str	r3, [r5, #0]
10010ec4:	60eb      	str	r3, [r5, #12]
10010ec6:	60ab      	str	r3, [r5, #8]
10010ec8:	7013      	strb	r3, [r2, #0]
10010eca:	65ab      	str	r3, [r5, #88]	; 0x58
10010ecc:	7821      	ldrb	r1, [r4, #0]
10010ece:	2205      	movs	r2, #5
10010ed0:	4841      	ldr	r0, [pc, #260]	; (10010fd8 <_vfiprintf_r+0x230>)
10010ed2:	f000 fb07 	bl	100114e4 <memchr>
10010ed6:	2800      	cmp	r0, #0
10010ed8:	d008      	beq.n	10010eec <_vfiprintf_r+0x144>
10010eda:	4b3f      	ldr	r3, [pc, #252]	; (10010fd8 <_vfiprintf_r+0x230>)
10010edc:	682a      	ldr	r2, [r5, #0]
10010ede:	1ac0      	subs	r0, r0, r3
10010ee0:	2301      	movs	r3, #1
10010ee2:	4083      	lsls	r3, r0
10010ee4:	4313      	orrs	r3, r2
10010ee6:	602b      	str	r3, [r5, #0]
10010ee8:	3401      	adds	r4, #1
10010eea:	e7ef      	b.n	10010ecc <_vfiprintf_r+0x124>
10010eec:	682b      	ldr	r3, [r5, #0]
10010eee:	06da      	lsls	r2, r3, #27
10010ef0:	d504      	bpl.n	10010efc <_vfiprintf_r+0x154>
10010ef2:	2253      	movs	r2, #83	; 0x53
10010ef4:	2120      	movs	r1, #32
10010ef6:	a802      	add	r0, sp, #8
10010ef8:	1812      	adds	r2, r2, r0
10010efa:	7011      	strb	r1, [r2, #0]
10010efc:	071a      	lsls	r2, r3, #28
10010efe:	d504      	bpl.n	10010f0a <_vfiprintf_r+0x162>
10010f00:	2253      	movs	r2, #83	; 0x53
10010f02:	212b      	movs	r1, #43	; 0x2b
10010f04:	a802      	add	r0, sp, #8
10010f06:	1812      	adds	r2, r2, r0
10010f08:	7011      	strb	r1, [r2, #0]
10010f0a:	7822      	ldrb	r2, [r4, #0]
10010f0c:	2a2a      	cmp	r2, #42	; 0x2a
10010f0e:	d100      	bne.n	10010f12 <_vfiprintf_r+0x16a>
10010f10:	e77c      	b.n	10010e0c <_vfiprintf_r+0x64>
10010f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
10010f14:	2000      	movs	r0, #0
10010f16:	210a      	movs	r1, #10
10010f18:	e005      	b.n	10010f26 <_vfiprintf_r+0x17e>
10010f1a:	4252      	negs	r2, r2
10010f1c:	60ea      	str	r2, [r5, #12]
10010f1e:	2202      	movs	r2, #2
10010f20:	4313      	orrs	r3, r2
10010f22:	602b      	str	r3, [r5, #0]
10010f24:	e77a      	b.n	10010e1c <_vfiprintf_r+0x74>
10010f26:	7822      	ldrb	r2, [r4, #0]
10010f28:	3a30      	subs	r2, #48	; 0x30
10010f2a:	2a09      	cmp	r2, #9
10010f2c:	d804      	bhi.n	10010f38 <_vfiprintf_r+0x190>
10010f2e:	434b      	muls	r3, r1
10010f30:	3401      	adds	r4, #1
10010f32:	189b      	adds	r3, r3, r2
10010f34:	2001      	movs	r0, #1
10010f36:	e7f6      	b.n	10010f26 <_vfiprintf_r+0x17e>
10010f38:	2800      	cmp	r0, #0
10010f3a:	d100      	bne.n	10010f3e <_vfiprintf_r+0x196>
10010f3c:	e76f      	b.n	10010e1e <_vfiprintf_r+0x76>
10010f3e:	9309      	str	r3, [sp, #36]	; 0x24
10010f40:	e76d      	b.n	10010e1e <_vfiprintf_r+0x76>
10010f42:	7863      	ldrb	r3, [r4, #1]
10010f44:	2b2a      	cmp	r3, #42	; 0x2a
10010f46:	d10a      	bne.n	10010f5e <_vfiprintf_r+0x1b6>
10010f48:	9b05      	ldr	r3, [sp, #20]
10010f4a:	3402      	adds	r4, #2
10010f4c:	1d1a      	adds	r2, r3, #4
10010f4e:	681b      	ldr	r3, [r3, #0]
10010f50:	9205      	str	r2, [sp, #20]
10010f52:	2b00      	cmp	r3, #0
10010f54:	da01      	bge.n	10010f5a <_vfiprintf_r+0x1b2>
10010f56:	2301      	movs	r3, #1
10010f58:	425b      	negs	r3, r3
10010f5a:	9307      	str	r3, [sp, #28]
10010f5c:	e763      	b.n	10010e26 <_vfiprintf_r+0x7e>
10010f5e:	2300      	movs	r3, #0
10010f60:	200a      	movs	r0, #10
10010f62:	001a      	movs	r2, r3
10010f64:	3401      	adds	r4, #1
10010f66:	606b      	str	r3, [r5, #4]
10010f68:	7821      	ldrb	r1, [r4, #0]
10010f6a:	3930      	subs	r1, #48	; 0x30
10010f6c:	2909      	cmp	r1, #9
10010f6e:	d804      	bhi.n	10010f7a <_vfiprintf_r+0x1d2>
10010f70:	4342      	muls	r2, r0
10010f72:	3401      	adds	r4, #1
10010f74:	1852      	adds	r2, r2, r1
10010f76:	2301      	movs	r3, #1
10010f78:	e7f6      	b.n	10010f68 <_vfiprintf_r+0x1c0>
10010f7a:	2b00      	cmp	r3, #0
10010f7c:	d100      	bne.n	10010f80 <_vfiprintf_r+0x1d8>
10010f7e:	e752      	b.n	10010e26 <_vfiprintf_r+0x7e>
10010f80:	9207      	str	r2, [sp, #28]
10010f82:	e750      	b.n	10010e26 <_vfiprintf_r+0x7e>
10010f84:	ab05      	add	r3, sp, #20
10010f86:	9300      	str	r3, [sp, #0]
10010f88:	003a      	movs	r2, r7
10010f8a:	4b14      	ldr	r3, [pc, #80]	; (10010fdc <_vfiprintf_r+0x234>)
10010f8c:	0029      	movs	r1, r5
10010f8e:	0030      	movs	r0, r6
10010f90:	e000      	b.n	10010f94 <_vfiprintf_r+0x1ec>
10010f92:	bf00      	nop
10010f94:	e007      	b.n	10010fa6 <_vfiprintf_r+0x1fe>
10010f96:	ab05      	add	r3, sp, #20
10010f98:	9300      	str	r3, [sp, #0]
10010f9a:	003a      	movs	r2, r7
10010f9c:	4b0f      	ldr	r3, [pc, #60]	; (10010fdc <_vfiprintf_r+0x234>)
10010f9e:	0029      	movs	r1, r5
10010fa0:	0030      	movs	r0, r6
10010fa2:	f000 f88b 	bl	100110bc <_printf_i>
10010fa6:	9003      	str	r0, [sp, #12]
10010fa8:	9b03      	ldr	r3, [sp, #12]
10010faa:	3301      	adds	r3, #1
10010fac:	d000      	beq.n	10010fb0 <_vfiprintf_r+0x208>
10010fae:	e75e      	b.n	10010e6e <_vfiprintf_r+0xc6>
10010fb0:	89bb      	ldrh	r3, [r7, #12]
10010fb2:	065b      	lsls	r3, r3, #25
10010fb4:	d500      	bpl.n	10010fb8 <_vfiprintf_r+0x210>
10010fb6:	e726      	b.n	10010e06 <_vfiprintf_r+0x5e>
10010fb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
10010fba:	b01f      	add	sp, #124	; 0x7c
10010fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010fbe:	46c0      	nop			; (mov r8, r8)
10010fc0:	100122a4 	.word	0x100122a4
10010fc4:	100122c4 	.word	0x100122c4
10010fc8:	100122e4 	.word	0x100122e4
10010fcc:	1001230a 	.word	0x1001230a
10010fd0:	1001230e 	.word	0x1001230e
10010fd4:	00000000 	.word	0x00000000
10010fd8:	10012304 	.word	0x10012304
10010fdc:	10010d83 	.word	0x10010d83

10010fe0 <_printf_common>:
10010fe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010fe2:	0017      	movs	r7, r2
10010fe4:	9301      	str	r3, [sp, #4]
10010fe6:	688a      	ldr	r2, [r1, #8]
10010fe8:	690b      	ldr	r3, [r1, #16]
10010fea:	9000      	str	r0, [sp, #0]
10010fec:	000c      	movs	r4, r1
10010fee:	4293      	cmp	r3, r2
10010ff0:	da00      	bge.n	10010ff4 <_printf_common+0x14>
10010ff2:	0013      	movs	r3, r2
10010ff4:	0022      	movs	r2, r4
10010ff6:	603b      	str	r3, [r7, #0]
10010ff8:	3243      	adds	r2, #67	; 0x43
10010ffa:	7812      	ldrb	r2, [r2, #0]
10010ffc:	2a00      	cmp	r2, #0
10010ffe:	d001      	beq.n	10011004 <_printf_common+0x24>
10011000:	3301      	adds	r3, #1
10011002:	603b      	str	r3, [r7, #0]
10011004:	6823      	ldr	r3, [r4, #0]
10011006:	069b      	lsls	r3, r3, #26
10011008:	d502      	bpl.n	10011010 <_printf_common+0x30>
1001100a:	683b      	ldr	r3, [r7, #0]
1001100c:	3302      	adds	r3, #2
1001100e:	603b      	str	r3, [r7, #0]
10011010:	2506      	movs	r5, #6
10011012:	6823      	ldr	r3, [r4, #0]
10011014:	401d      	ands	r5, r3
10011016:	d01e      	beq.n	10011056 <_printf_common+0x76>
10011018:	0023      	movs	r3, r4
1001101a:	3343      	adds	r3, #67	; 0x43
1001101c:	781b      	ldrb	r3, [r3, #0]
1001101e:	1e5a      	subs	r2, r3, #1
10011020:	4193      	sbcs	r3, r2
10011022:	6822      	ldr	r2, [r4, #0]
10011024:	0692      	lsls	r2, r2, #26
10011026:	d51c      	bpl.n	10011062 <_printf_common+0x82>
10011028:	2030      	movs	r0, #48	; 0x30
1001102a:	18e1      	adds	r1, r4, r3
1001102c:	3143      	adds	r1, #67	; 0x43
1001102e:	7008      	strb	r0, [r1, #0]
10011030:	0021      	movs	r1, r4
10011032:	1c5a      	adds	r2, r3, #1
10011034:	3145      	adds	r1, #69	; 0x45
10011036:	7809      	ldrb	r1, [r1, #0]
10011038:	18a2      	adds	r2, r4, r2
1001103a:	3243      	adds	r2, #67	; 0x43
1001103c:	3302      	adds	r3, #2
1001103e:	7011      	strb	r1, [r2, #0]
10011040:	e00f      	b.n	10011062 <_printf_common+0x82>
10011042:	0022      	movs	r2, r4
10011044:	2301      	movs	r3, #1
10011046:	3219      	adds	r2, #25
10011048:	9901      	ldr	r1, [sp, #4]
1001104a:	9800      	ldr	r0, [sp, #0]
1001104c:	9e08      	ldr	r6, [sp, #32]
1001104e:	47b0      	blx	r6
10011050:	1c43      	adds	r3, r0, #1
10011052:	d00e      	beq.n	10011072 <_printf_common+0x92>
10011054:	3501      	adds	r5, #1
10011056:	68e3      	ldr	r3, [r4, #12]
10011058:	683a      	ldr	r2, [r7, #0]
1001105a:	1a9b      	subs	r3, r3, r2
1001105c:	429d      	cmp	r5, r3
1001105e:	dbf0      	blt.n	10011042 <_printf_common+0x62>
10011060:	e7da      	b.n	10011018 <_printf_common+0x38>
10011062:	0022      	movs	r2, r4
10011064:	9901      	ldr	r1, [sp, #4]
10011066:	3243      	adds	r2, #67	; 0x43
10011068:	9800      	ldr	r0, [sp, #0]
1001106a:	9d08      	ldr	r5, [sp, #32]
1001106c:	47a8      	blx	r5
1001106e:	1c43      	adds	r3, r0, #1
10011070:	d102      	bne.n	10011078 <_printf_common+0x98>
10011072:	2001      	movs	r0, #1
10011074:	4240      	negs	r0, r0
10011076:	e020      	b.n	100110ba <_printf_common+0xda>
10011078:	2306      	movs	r3, #6
1001107a:	6820      	ldr	r0, [r4, #0]
1001107c:	68e1      	ldr	r1, [r4, #12]
1001107e:	683a      	ldr	r2, [r7, #0]
10011080:	4003      	ands	r3, r0
10011082:	2500      	movs	r5, #0
10011084:	2b04      	cmp	r3, #4
10011086:	d103      	bne.n	10011090 <_printf_common+0xb0>
10011088:	1a8d      	subs	r5, r1, r2
1001108a:	43eb      	mvns	r3, r5
1001108c:	17db      	asrs	r3, r3, #31
1001108e:	401d      	ands	r5, r3
10011090:	68a3      	ldr	r3, [r4, #8]
10011092:	6922      	ldr	r2, [r4, #16]
10011094:	4293      	cmp	r3, r2
10011096:	dd01      	ble.n	1001109c <_printf_common+0xbc>
10011098:	1a9b      	subs	r3, r3, r2
1001109a:	18ed      	adds	r5, r5, r3
1001109c:	2700      	movs	r7, #0
1001109e:	42bd      	cmp	r5, r7
100110a0:	d00a      	beq.n	100110b8 <_printf_common+0xd8>
100110a2:	0022      	movs	r2, r4
100110a4:	2301      	movs	r3, #1
100110a6:	321a      	adds	r2, #26
100110a8:	9901      	ldr	r1, [sp, #4]
100110aa:	9800      	ldr	r0, [sp, #0]
100110ac:	9e08      	ldr	r6, [sp, #32]
100110ae:	47b0      	blx	r6
100110b0:	1c43      	adds	r3, r0, #1
100110b2:	d0de      	beq.n	10011072 <_printf_common+0x92>
100110b4:	3701      	adds	r7, #1
100110b6:	e7f2      	b.n	1001109e <_printf_common+0xbe>
100110b8:	2000      	movs	r0, #0
100110ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100110bc <_printf_i>:
100110bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100110be:	b08b      	sub	sp, #44	; 0x2c
100110c0:	9206      	str	r2, [sp, #24]
100110c2:	000a      	movs	r2, r1
100110c4:	3243      	adds	r2, #67	; 0x43
100110c6:	9307      	str	r3, [sp, #28]
100110c8:	9005      	str	r0, [sp, #20]
100110ca:	9204      	str	r2, [sp, #16]
100110cc:	7e0a      	ldrb	r2, [r1, #24]
100110ce:	000c      	movs	r4, r1
100110d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
100110d2:	2a6e      	cmp	r2, #110	; 0x6e
100110d4:	d100      	bne.n	100110d8 <_printf_i+0x1c>
100110d6:	e0ab      	b.n	10011230 <_printf_i+0x174>
100110d8:	d811      	bhi.n	100110fe <_printf_i+0x42>
100110da:	2a63      	cmp	r2, #99	; 0x63
100110dc:	d022      	beq.n	10011124 <_printf_i+0x68>
100110de:	d809      	bhi.n	100110f4 <_printf_i+0x38>
100110e0:	2a00      	cmp	r2, #0
100110e2:	d100      	bne.n	100110e6 <_printf_i+0x2a>
100110e4:	e0b5      	b.n	10011252 <_printf_i+0x196>
100110e6:	2a58      	cmp	r2, #88	; 0x58
100110e8:	d000      	beq.n	100110ec <_printf_i+0x30>
100110ea:	e0c5      	b.n	10011278 <_printf_i+0x1bc>
100110ec:	3145      	adds	r1, #69	; 0x45
100110ee:	700a      	strb	r2, [r1, #0]
100110f0:	4a81      	ldr	r2, [pc, #516]	; (100112f8 <_printf_i+0x23c>)
100110f2:	e04f      	b.n	10011194 <_printf_i+0xd8>
100110f4:	2a64      	cmp	r2, #100	; 0x64
100110f6:	d01d      	beq.n	10011134 <_printf_i+0x78>
100110f8:	2a69      	cmp	r2, #105	; 0x69
100110fa:	d01b      	beq.n	10011134 <_printf_i+0x78>
100110fc:	e0bc      	b.n	10011278 <_printf_i+0x1bc>
100110fe:	2a73      	cmp	r2, #115	; 0x73
10011100:	d100      	bne.n	10011104 <_printf_i+0x48>
10011102:	e0aa      	b.n	1001125a <_printf_i+0x19e>
10011104:	d809      	bhi.n	1001111a <_printf_i+0x5e>
10011106:	2a6f      	cmp	r2, #111	; 0x6f
10011108:	d029      	beq.n	1001115e <_printf_i+0xa2>
1001110a:	2a70      	cmp	r2, #112	; 0x70
1001110c:	d000      	beq.n	10011110 <_printf_i+0x54>
1001110e:	e0b3      	b.n	10011278 <_printf_i+0x1bc>
10011110:	2220      	movs	r2, #32
10011112:	6809      	ldr	r1, [r1, #0]
10011114:	430a      	orrs	r2, r1
10011116:	6022      	str	r2, [r4, #0]
10011118:	e037      	b.n	1001118a <_printf_i+0xce>
1001111a:	2a75      	cmp	r2, #117	; 0x75
1001111c:	d01f      	beq.n	1001115e <_printf_i+0xa2>
1001111e:	2a78      	cmp	r2, #120	; 0x78
10011120:	d033      	beq.n	1001118a <_printf_i+0xce>
10011122:	e0a9      	b.n	10011278 <_printf_i+0x1bc>
10011124:	000e      	movs	r6, r1
10011126:	681a      	ldr	r2, [r3, #0]
10011128:	3642      	adds	r6, #66	; 0x42
1001112a:	1d11      	adds	r1, r2, #4
1001112c:	6019      	str	r1, [r3, #0]
1001112e:	6813      	ldr	r3, [r2, #0]
10011130:	7033      	strb	r3, [r6, #0]
10011132:	e0a4      	b.n	1001127e <_printf_i+0x1c2>
10011134:	6821      	ldr	r1, [r4, #0]
10011136:	681a      	ldr	r2, [r3, #0]
10011138:	0608      	lsls	r0, r1, #24
1001113a:	d406      	bmi.n	1001114a <_printf_i+0x8e>
1001113c:	0649      	lsls	r1, r1, #25
1001113e:	d504      	bpl.n	1001114a <_printf_i+0x8e>
10011140:	1d11      	adds	r1, r2, #4
10011142:	6019      	str	r1, [r3, #0]
10011144:	2300      	movs	r3, #0
10011146:	5ed5      	ldrsh	r5, [r2, r3]
10011148:	e002      	b.n	10011150 <_printf_i+0x94>
1001114a:	1d11      	adds	r1, r2, #4
1001114c:	6019      	str	r1, [r3, #0]
1001114e:	6815      	ldr	r5, [r2, #0]
10011150:	2d00      	cmp	r5, #0
10011152:	da3b      	bge.n	100111cc <_printf_i+0x110>
10011154:	232d      	movs	r3, #45	; 0x2d
10011156:	9a04      	ldr	r2, [sp, #16]
10011158:	426d      	negs	r5, r5
1001115a:	7013      	strb	r3, [r2, #0]
1001115c:	e036      	b.n	100111cc <_printf_i+0x110>
1001115e:	6821      	ldr	r1, [r4, #0]
10011160:	681a      	ldr	r2, [r3, #0]
10011162:	0608      	lsls	r0, r1, #24
10011164:	d406      	bmi.n	10011174 <_printf_i+0xb8>
10011166:	0649      	lsls	r1, r1, #25
10011168:	d504      	bpl.n	10011174 <_printf_i+0xb8>
1001116a:	6815      	ldr	r5, [r2, #0]
1001116c:	1d11      	adds	r1, r2, #4
1001116e:	6019      	str	r1, [r3, #0]
10011170:	b2ad      	uxth	r5, r5
10011172:	e002      	b.n	1001117a <_printf_i+0xbe>
10011174:	1d11      	adds	r1, r2, #4
10011176:	6019      	str	r1, [r3, #0]
10011178:	6815      	ldr	r5, [r2, #0]
1001117a:	4b5f      	ldr	r3, [pc, #380]	; (100112f8 <_printf_i+0x23c>)
1001117c:	7e22      	ldrb	r2, [r4, #24]
1001117e:	9303      	str	r3, [sp, #12]
10011180:	2708      	movs	r7, #8
10011182:	2a6f      	cmp	r2, #111	; 0x6f
10011184:	d01d      	beq.n	100111c2 <_printf_i+0x106>
10011186:	270a      	movs	r7, #10
10011188:	e01b      	b.n	100111c2 <_printf_i+0x106>
1001118a:	0022      	movs	r2, r4
1001118c:	2178      	movs	r1, #120	; 0x78
1001118e:	3245      	adds	r2, #69	; 0x45
10011190:	7011      	strb	r1, [r2, #0]
10011192:	4a5a      	ldr	r2, [pc, #360]	; (100112fc <_printf_i+0x240>)
10011194:	6819      	ldr	r1, [r3, #0]
10011196:	9203      	str	r2, [sp, #12]
10011198:	1d08      	adds	r0, r1, #4
1001119a:	6822      	ldr	r2, [r4, #0]
1001119c:	6018      	str	r0, [r3, #0]
1001119e:	680d      	ldr	r5, [r1, #0]
100111a0:	0610      	lsls	r0, r2, #24
100111a2:	d402      	bmi.n	100111aa <_printf_i+0xee>
100111a4:	0650      	lsls	r0, r2, #25
100111a6:	d500      	bpl.n	100111aa <_printf_i+0xee>
100111a8:	b2ad      	uxth	r5, r5
100111aa:	07d3      	lsls	r3, r2, #31
100111ac:	d502      	bpl.n	100111b4 <_printf_i+0xf8>
100111ae:	2320      	movs	r3, #32
100111b0:	431a      	orrs	r2, r3
100111b2:	6022      	str	r2, [r4, #0]
100111b4:	2710      	movs	r7, #16
100111b6:	2d00      	cmp	r5, #0
100111b8:	d103      	bne.n	100111c2 <_printf_i+0x106>
100111ba:	2320      	movs	r3, #32
100111bc:	6822      	ldr	r2, [r4, #0]
100111be:	439a      	bics	r2, r3
100111c0:	6022      	str	r2, [r4, #0]
100111c2:	0023      	movs	r3, r4
100111c4:	2200      	movs	r2, #0
100111c6:	3343      	adds	r3, #67	; 0x43
100111c8:	701a      	strb	r2, [r3, #0]
100111ca:	e002      	b.n	100111d2 <_printf_i+0x116>
100111cc:	270a      	movs	r7, #10
100111ce:	4b4a      	ldr	r3, [pc, #296]	; (100112f8 <_printf_i+0x23c>)
100111d0:	9303      	str	r3, [sp, #12]
100111d2:	6863      	ldr	r3, [r4, #4]
100111d4:	60a3      	str	r3, [r4, #8]
100111d6:	2b00      	cmp	r3, #0
100111d8:	db09      	blt.n	100111ee <_printf_i+0x132>
100111da:	2204      	movs	r2, #4
100111dc:	6821      	ldr	r1, [r4, #0]
100111de:	4391      	bics	r1, r2
100111e0:	6021      	str	r1, [r4, #0]
100111e2:	2d00      	cmp	r5, #0
100111e4:	d105      	bne.n	100111f2 <_printf_i+0x136>
100111e6:	9e04      	ldr	r6, [sp, #16]
100111e8:	2b00      	cmp	r3, #0
100111ea:	d011      	beq.n	10011210 <_printf_i+0x154>
100111ec:	e07b      	b.n	100112e6 <_printf_i+0x22a>
100111ee:	2d00      	cmp	r5, #0
100111f0:	d079      	beq.n	100112e6 <_printf_i+0x22a>
100111f2:	9e04      	ldr	r6, [sp, #16]
100111f4:	0028      	movs	r0, r5
100111f6:	0039      	movs	r1, r7
100111f8:	f7fd fcf0 	bl	1000ebdc <__aeabi_uidivmod>
100111fc:	9b03      	ldr	r3, [sp, #12]
100111fe:	3e01      	subs	r6, #1
10011200:	5c5b      	ldrb	r3, [r3, r1]
10011202:	0028      	movs	r0, r5
10011204:	7033      	strb	r3, [r6, #0]
10011206:	0039      	movs	r1, r7
10011208:	f7fd fc62 	bl	1000ead0 <__aeabi_uidiv>
1001120c:	1e05      	subs	r5, r0, #0
1001120e:	d1f1      	bne.n	100111f4 <_printf_i+0x138>
10011210:	2f08      	cmp	r7, #8
10011212:	d109      	bne.n	10011228 <_printf_i+0x16c>
10011214:	6823      	ldr	r3, [r4, #0]
10011216:	07db      	lsls	r3, r3, #31
10011218:	d506      	bpl.n	10011228 <_printf_i+0x16c>
1001121a:	6863      	ldr	r3, [r4, #4]
1001121c:	6922      	ldr	r2, [r4, #16]
1001121e:	4293      	cmp	r3, r2
10011220:	dc02      	bgt.n	10011228 <_printf_i+0x16c>
10011222:	2330      	movs	r3, #48	; 0x30
10011224:	3e01      	subs	r6, #1
10011226:	7033      	strb	r3, [r6, #0]
10011228:	9b04      	ldr	r3, [sp, #16]
1001122a:	1b9b      	subs	r3, r3, r6
1001122c:	6123      	str	r3, [r4, #16]
1001122e:	e02b      	b.n	10011288 <_printf_i+0x1cc>
10011230:	6809      	ldr	r1, [r1, #0]
10011232:	681a      	ldr	r2, [r3, #0]
10011234:	0608      	lsls	r0, r1, #24
10011236:	d407      	bmi.n	10011248 <_printf_i+0x18c>
10011238:	0649      	lsls	r1, r1, #25
1001123a:	d505      	bpl.n	10011248 <_printf_i+0x18c>
1001123c:	1d11      	adds	r1, r2, #4
1001123e:	6019      	str	r1, [r3, #0]
10011240:	6813      	ldr	r3, [r2, #0]
10011242:	8aa2      	ldrh	r2, [r4, #20]
10011244:	801a      	strh	r2, [r3, #0]
10011246:	e004      	b.n	10011252 <_printf_i+0x196>
10011248:	1d11      	adds	r1, r2, #4
1001124a:	6019      	str	r1, [r3, #0]
1001124c:	6813      	ldr	r3, [r2, #0]
1001124e:	6962      	ldr	r2, [r4, #20]
10011250:	601a      	str	r2, [r3, #0]
10011252:	2300      	movs	r3, #0
10011254:	9e04      	ldr	r6, [sp, #16]
10011256:	6123      	str	r3, [r4, #16]
10011258:	e016      	b.n	10011288 <_printf_i+0x1cc>
1001125a:	681a      	ldr	r2, [r3, #0]
1001125c:	1d11      	adds	r1, r2, #4
1001125e:	6019      	str	r1, [r3, #0]
10011260:	6816      	ldr	r6, [r2, #0]
10011262:	2100      	movs	r1, #0
10011264:	6862      	ldr	r2, [r4, #4]
10011266:	0030      	movs	r0, r6
10011268:	f000 f93c 	bl	100114e4 <memchr>
1001126c:	2800      	cmp	r0, #0
1001126e:	d001      	beq.n	10011274 <_printf_i+0x1b8>
10011270:	1b80      	subs	r0, r0, r6
10011272:	6060      	str	r0, [r4, #4]
10011274:	6863      	ldr	r3, [r4, #4]
10011276:	e003      	b.n	10011280 <_printf_i+0x1c4>
10011278:	0026      	movs	r6, r4
1001127a:	3642      	adds	r6, #66	; 0x42
1001127c:	7032      	strb	r2, [r6, #0]
1001127e:	2301      	movs	r3, #1
10011280:	6123      	str	r3, [r4, #16]
10011282:	2300      	movs	r3, #0
10011284:	9a04      	ldr	r2, [sp, #16]
10011286:	7013      	strb	r3, [r2, #0]
10011288:	9b07      	ldr	r3, [sp, #28]
1001128a:	aa09      	add	r2, sp, #36	; 0x24
1001128c:	9300      	str	r3, [sp, #0]
1001128e:	0021      	movs	r1, r4
10011290:	9b06      	ldr	r3, [sp, #24]
10011292:	9805      	ldr	r0, [sp, #20]
10011294:	f7ff fea4 	bl	10010fe0 <_printf_common>
10011298:	1c43      	adds	r3, r0, #1
1001129a:	d102      	bne.n	100112a2 <_printf_i+0x1e6>
1001129c:	2001      	movs	r0, #1
1001129e:	4240      	negs	r0, r0
100112a0:	e027      	b.n	100112f2 <_printf_i+0x236>
100112a2:	6923      	ldr	r3, [r4, #16]
100112a4:	0032      	movs	r2, r6
100112a6:	9906      	ldr	r1, [sp, #24]
100112a8:	9805      	ldr	r0, [sp, #20]
100112aa:	9d07      	ldr	r5, [sp, #28]
100112ac:	47a8      	blx	r5
100112ae:	1c43      	adds	r3, r0, #1
100112b0:	d0f4      	beq.n	1001129c <_printf_i+0x1e0>
100112b2:	6823      	ldr	r3, [r4, #0]
100112b4:	2500      	movs	r5, #0
100112b6:	079b      	lsls	r3, r3, #30
100112b8:	d40f      	bmi.n	100112da <_printf_i+0x21e>
100112ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
100112bc:	68e0      	ldr	r0, [r4, #12]
100112be:	4298      	cmp	r0, r3
100112c0:	da17      	bge.n	100112f2 <_printf_i+0x236>
100112c2:	0018      	movs	r0, r3
100112c4:	e015      	b.n	100112f2 <_printf_i+0x236>
100112c6:	0022      	movs	r2, r4
100112c8:	2301      	movs	r3, #1
100112ca:	3219      	adds	r2, #25
100112cc:	9906      	ldr	r1, [sp, #24]
100112ce:	9805      	ldr	r0, [sp, #20]
100112d0:	9e07      	ldr	r6, [sp, #28]
100112d2:	47b0      	blx	r6
100112d4:	1c43      	adds	r3, r0, #1
100112d6:	d0e1      	beq.n	1001129c <_printf_i+0x1e0>
100112d8:	3501      	adds	r5, #1
100112da:	68e3      	ldr	r3, [r4, #12]
100112dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
100112de:	1a9b      	subs	r3, r3, r2
100112e0:	429d      	cmp	r5, r3
100112e2:	dbf0      	blt.n	100112c6 <_printf_i+0x20a>
100112e4:	e7e9      	b.n	100112ba <_printf_i+0x1fe>
100112e6:	0026      	movs	r6, r4
100112e8:	9b03      	ldr	r3, [sp, #12]
100112ea:	3642      	adds	r6, #66	; 0x42
100112ec:	781b      	ldrb	r3, [r3, #0]
100112ee:	7033      	strb	r3, [r6, #0]
100112f0:	e78e      	b.n	10011210 <_printf_i+0x154>
100112f2:	b00b      	add	sp, #44	; 0x2c
100112f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112f6:	46c0      	nop			; (mov r8, r8)
100112f8:	10012315 	.word	0x10012315
100112fc:	10012326 	.word	0x10012326

10011300 <_putc_r>:
10011300:	b570      	push	{r4, r5, r6, lr}
10011302:	0006      	movs	r6, r0
10011304:	000d      	movs	r5, r1
10011306:	0014      	movs	r4, r2
10011308:	2800      	cmp	r0, #0
1001130a:	d004      	beq.n	10011316 <_putc_r+0x16>
1001130c:	6983      	ldr	r3, [r0, #24]
1001130e:	2b00      	cmp	r3, #0
10011310:	d101      	bne.n	10011316 <_putc_r+0x16>
10011312:	f7ff fb83 	bl	10010a1c <__sinit>
10011316:	4b12      	ldr	r3, [pc, #72]	; (10011360 <_putc_r+0x60>)
10011318:	429c      	cmp	r4, r3
1001131a:	d101      	bne.n	10011320 <_putc_r+0x20>
1001131c:	6874      	ldr	r4, [r6, #4]
1001131e:	e008      	b.n	10011332 <_putc_r+0x32>
10011320:	4b10      	ldr	r3, [pc, #64]	; (10011364 <_putc_r+0x64>)
10011322:	429c      	cmp	r4, r3
10011324:	d101      	bne.n	1001132a <_putc_r+0x2a>
10011326:	68b4      	ldr	r4, [r6, #8]
10011328:	e003      	b.n	10011332 <_putc_r+0x32>
1001132a:	4b0f      	ldr	r3, [pc, #60]	; (10011368 <_putc_r+0x68>)
1001132c:	429c      	cmp	r4, r3
1001132e:	d100      	bne.n	10011332 <_putc_r+0x32>
10011330:	68f4      	ldr	r4, [r6, #12]
10011332:	68a3      	ldr	r3, [r4, #8]
10011334:	3b01      	subs	r3, #1
10011336:	60a3      	str	r3, [r4, #8]
10011338:	2b00      	cmp	r3, #0
1001133a:	da05      	bge.n	10011348 <_putc_r+0x48>
1001133c:	69a2      	ldr	r2, [r4, #24]
1001133e:	4293      	cmp	r3, r2
10011340:	db08      	blt.n	10011354 <_putc_r+0x54>
10011342:	b2eb      	uxtb	r3, r5
10011344:	2b0a      	cmp	r3, #10
10011346:	d005      	beq.n	10011354 <_putc_r+0x54>
10011348:	6823      	ldr	r3, [r4, #0]
1001134a:	b2e8      	uxtb	r0, r5
1001134c:	1c5a      	adds	r2, r3, #1
1001134e:	6022      	str	r2, [r4, #0]
10011350:	701d      	strb	r5, [r3, #0]
10011352:	e004      	b.n	1001135e <_putc_r+0x5e>
10011354:	0022      	movs	r2, r4
10011356:	0029      	movs	r1, r5
10011358:	0030      	movs	r0, r6
1001135a:	f7ff f99d 	bl	10010698 <__swbuf_r>
1001135e:	bd70      	pop	{r4, r5, r6, pc}
10011360:	100122a4 	.word	0x100122a4
10011364:	100122c4 	.word	0x100122c4
10011368:	100122e4 	.word	0x100122e4

1001136c <_sbrk_r>:
1001136c:	2300      	movs	r3, #0
1001136e:	b570      	push	{r4, r5, r6, lr}
10011370:	4c06      	ldr	r4, [pc, #24]	; (1001138c <_sbrk_r+0x20>)
10011372:	0005      	movs	r5, r0
10011374:	0008      	movs	r0, r1
10011376:	6023      	str	r3, [r4, #0]
10011378:	f7f8 fc16 	bl	10009ba8 <_sbrk>
1001137c:	1c43      	adds	r3, r0, #1
1001137e:	d103      	bne.n	10011388 <_sbrk_r+0x1c>
10011380:	6823      	ldr	r3, [r4, #0]
10011382:	2b00      	cmp	r3, #0
10011384:	d000      	beq.n	10011388 <_sbrk_r+0x1c>
10011386:	602b      	str	r3, [r5, #0]
10011388:	bd70      	pop	{r4, r5, r6, pc}
1001138a:	46c0      	nop			; (mov r8, r8)
1001138c:	10015074 	.word	0x10015074

10011390 <__sread>:
10011390:	b570      	push	{r4, r5, r6, lr}
10011392:	000c      	movs	r4, r1
10011394:	250e      	movs	r5, #14
10011396:	5f49      	ldrsh	r1, [r1, r5]
10011398:	f000 f8b0 	bl	100114fc <_read_r>
1001139c:	2800      	cmp	r0, #0
1001139e:	db03      	blt.n	100113a8 <__sread+0x18>
100113a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
100113a2:	181b      	adds	r3, r3, r0
100113a4:	6563      	str	r3, [r4, #84]	; 0x54
100113a6:	e003      	b.n	100113b0 <__sread+0x20>
100113a8:	89a2      	ldrh	r2, [r4, #12]
100113aa:	4b02      	ldr	r3, [pc, #8]	; (100113b4 <__sread+0x24>)
100113ac:	4013      	ands	r3, r2
100113ae:	81a3      	strh	r3, [r4, #12]
100113b0:	bd70      	pop	{r4, r5, r6, pc}
100113b2:	46c0      	nop			; (mov r8, r8)
100113b4:	ffffefff 	.word	0xffffefff

100113b8 <__swrite>:
100113b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100113ba:	001f      	movs	r7, r3
100113bc:	898b      	ldrh	r3, [r1, #12]
100113be:	0005      	movs	r5, r0
100113c0:	000c      	movs	r4, r1
100113c2:	0016      	movs	r6, r2
100113c4:	05db      	lsls	r3, r3, #23
100113c6:	d505      	bpl.n	100113d4 <__swrite+0x1c>
100113c8:	230e      	movs	r3, #14
100113ca:	5ec9      	ldrsh	r1, [r1, r3]
100113cc:	2200      	movs	r2, #0
100113ce:	2302      	movs	r3, #2
100113d0:	f000 f874 	bl	100114bc <_lseek_r>
100113d4:	89a2      	ldrh	r2, [r4, #12]
100113d6:	4b05      	ldr	r3, [pc, #20]	; (100113ec <__swrite+0x34>)
100113d8:	0028      	movs	r0, r5
100113da:	4013      	ands	r3, r2
100113dc:	81a3      	strh	r3, [r4, #12]
100113de:	0032      	movs	r2, r6
100113e0:	230e      	movs	r3, #14
100113e2:	5ee1      	ldrsh	r1, [r4, r3]
100113e4:	003b      	movs	r3, r7
100113e6:	f000 f81f 	bl	10011428 <_write_r>
100113ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100113ec:	ffffefff 	.word	0xffffefff

100113f0 <__sseek>:
100113f0:	b570      	push	{r4, r5, r6, lr}
100113f2:	000c      	movs	r4, r1
100113f4:	250e      	movs	r5, #14
100113f6:	5f49      	ldrsh	r1, [r1, r5]
100113f8:	f000 f860 	bl	100114bc <_lseek_r>
100113fc:	89a3      	ldrh	r3, [r4, #12]
100113fe:	1c42      	adds	r2, r0, #1
10011400:	d103      	bne.n	1001140a <__sseek+0x1a>
10011402:	4a05      	ldr	r2, [pc, #20]	; (10011418 <__sseek+0x28>)
10011404:	4013      	ands	r3, r2
10011406:	81a3      	strh	r3, [r4, #12]
10011408:	e004      	b.n	10011414 <__sseek+0x24>
1001140a:	2280      	movs	r2, #128	; 0x80
1001140c:	0152      	lsls	r2, r2, #5
1001140e:	4313      	orrs	r3, r2
10011410:	81a3      	strh	r3, [r4, #12]
10011412:	6560      	str	r0, [r4, #84]	; 0x54
10011414:	bd70      	pop	{r4, r5, r6, pc}
10011416:	46c0      	nop			; (mov r8, r8)
10011418:	ffffefff 	.word	0xffffefff

1001141c <__sclose>:
1001141c:	b510      	push	{r4, lr}
1001141e:	230e      	movs	r3, #14
10011420:	5ec9      	ldrsh	r1, [r1, r3]
10011422:	f000 f815 	bl	10011450 <_close_r>
10011426:	bd10      	pop	{r4, pc}

10011428 <_write_r>:
10011428:	b570      	push	{r4, r5, r6, lr}
1001142a:	0005      	movs	r5, r0
1001142c:	0008      	movs	r0, r1
1001142e:	0011      	movs	r1, r2
10011430:	2200      	movs	r2, #0
10011432:	4c06      	ldr	r4, [pc, #24]	; (1001144c <_write_r+0x24>)
10011434:	6022      	str	r2, [r4, #0]
10011436:	001a      	movs	r2, r3
10011438:	f7f8 fb8e 	bl	10009b58 <_write>
1001143c:	1c43      	adds	r3, r0, #1
1001143e:	d103      	bne.n	10011448 <_write_r+0x20>
10011440:	6823      	ldr	r3, [r4, #0]
10011442:	2b00      	cmp	r3, #0
10011444:	d000      	beq.n	10011448 <_write_r+0x20>
10011446:	602b      	str	r3, [r5, #0]
10011448:	bd70      	pop	{r4, r5, r6, pc}
1001144a:	46c0      	nop			; (mov r8, r8)
1001144c:	10015074 	.word	0x10015074

10011450 <_close_r>:
10011450:	2300      	movs	r3, #0
10011452:	b570      	push	{r4, r5, r6, lr}
10011454:	4c06      	ldr	r4, [pc, #24]	; (10011470 <_close_r+0x20>)
10011456:	0005      	movs	r5, r0
10011458:	0008      	movs	r0, r1
1001145a:	6023      	str	r3, [r4, #0]
1001145c:	f7f8 fbb6 	bl	10009bcc <_close>
10011460:	1c43      	adds	r3, r0, #1
10011462:	d103      	bne.n	1001146c <_close_r+0x1c>
10011464:	6823      	ldr	r3, [r4, #0]
10011466:	2b00      	cmp	r3, #0
10011468:	d000      	beq.n	1001146c <_close_r+0x1c>
1001146a:	602b      	str	r3, [r5, #0]
1001146c:	bd70      	pop	{r4, r5, r6, pc}
1001146e:	46c0      	nop			; (mov r8, r8)
10011470:	10015074 	.word	0x10015074

10011474 <_fstat_r>:
10011474:	2300      	movs	r3, #0
10011476:	b570      	push	{r4, r5, r6, lr}
10011478:	4c06      	ldr	r4, [pc, #24]	; (10011494 <_fstat_r+0x20>)
1001147a:	0005      	movs	r5, r0
1001147c:	0008      	movs	r0, r1
1001147e:	0011      	movs	r1, r2
10011480:	6023      	str	r3, [r4, #0]
10011482:	f7f8 fba7 	bl	10009bd4 <_fstat>
10011486:	1c43      	adds	r3, r0, #1
10011488:	d103      	bne.n	10011492 <_fstat_r+0x1e>
1001148a:	6823      	ldr	r3, [r4, #0]
1001148c:	2b00      	cmp	r3, #0
1001148e:	d000      	beq.n	10011492 <_fstat_r+0x1e>
10011490:	602b      	str	r3, [r5, #0]
10011492:	bd70      	pop	{r4, r5, r6, pc}
10011494:	10015074 	.word	0x10015074

10011498 <_isatty_r>:
10011498:	2300      	movs	r3, #0
1001149a:	b570      	push	{r4, r5, r6, lr}
1001149c:	4c06      	ldr	r4, [pc, #24]	; (100114b8 <_isatty_r+0x20>)
1001149e:	0005      	movs	r5, r0
100114a0:	0008      	movs	r0, r1
100114a2:	6023      	str	r3, [r4, #0]
100114a4:	f7f8 fb9c 	bl	10009be0 <_isatty>
100114a8:	1c43      	adds	r3, r0, #1
100114aa:	d103      	bne.n	100114b4 <_isatty_r+0x1c>
100114ac:	6823      	ldr	r3, [r4, #0]
100114ae:	2b00      	cmp	r3, #0
100114b0:	d000      	beq.n	100114b4 <_isatty_r+0x1c>
100114b2:	602b      	str	r3, [r5, #0]
100114b4:	bd70      	pop	{r4, r5, r6, pc}
100114b6:	46c0      	nop			; (mov r8, r8)
100114b8:	10015074 	.word	0x10015074

100114bc <_lseek_r>:
100114bc:	b570      	push	{r4, r5, r6, lr}
100114be:	0005      	movs	r5, r0
100114c0:	0008      	movs	r0, r1
100114c2:	0011      	movs	r1, r2
100114c4:	2200      	movs	r2, #0
100114c6:	4c06      	ldr	r4, [pc, #24]	; (100114e0 <_lseek_r+0x24>)
100114c8:	6022      	str	r2, [r4, #0]
100114ca:	001a      	movs	r2, r3
100114cc:	f7f8 fb8a 	bl	10009be4 <_lseek>
100114d0:	1c43      	adds	r3, r0, #1
100114d2:	d103      	bne.n	100114dc <_lseek_r+0x20>
100114d4:	6823      	ldr	r3, [r4, #0]
100114d6:	2b00      	cmp	r3, #0
100114d8:	d000      	beq.n	100114dc <_lseek_r+0x20>
100114da:	602b      	str	r3, [r5, #0]
100114dc:	bd70      	pop	{r4, r5, r6, pc}
100114de:	46c0      	nop			; (mov r8, r8)
100114e0:	10015074 	.word	0x10015074

100114e4 <memchr>:
100114e4:	b2c9      	uxtb	r1, r1
100114e6:	1882      	adds	r2, r0, r2
100114e8:	4290      	cmp	r0, r2
100114ea:	d004      	beq.n	100114f6 <memchr+0x12>
100114ec:	7803      	ldrb	r3, [r0, #0]
100114ee:	428b      	cmp	r3, r1
100114f0:	d002      	beq.n	100114f8 <memchr+0x14>
100114f2:	3001      	adds	r0, #1
100114f4:	e7f8      	b.n	100114e8 <memchr+0x4>
100114f6:	2000      	movs	r0, #0
100114f8:	4770      	bx	lr
	...

100114fc <_read_r>:
100114fc:	b570      	push	{r4, r5, r6, lr}
100114fe:	0005      	movs	r5, r0
10011500:	0008      	movs	r0, r1
10011502:	0011      	movs	r1, r2
10011504:	2200      	movs	r2, #0
10011506:	4c06      	ldr	r4, [pc, #24]	; (10011520 <_read_r+0x24>)
10011508:	6022      	str	r2, [r4, #0]
1001150a:	001a      	movs	r2, r3
1001150c:	f7f8 fb04 	bl	10009b18 <_read>
10011510:	1c43      	adds	r3, r0, #1
10011512:	d103      	bne.n	1001151c <_read_r+0x20>
10011514:	6823      	ldr	r3, [r4, #0]
10011516:	2b00      	cmp	r3, #0
10011518:	d000      	beq.n	1001151c <_read_r+0x20>
1001151a:	602b      	str	r3, [r5, #0]
1001151c:	bd70      	pop	{r4, r5, r6, pc}
1001151e:	46c0      	nop			; (mov r8, r8)
10011520:	10015074 	.word	0x10015074

10011524 <__aeabi_lmul>:
10011524:	b5f0      	push	{r4, r5, r6, r7, lr}
10011526:	464f      	mov	r7, r9
10011528:	4646      	mov	r6, r8
1001152a:	b4c0      	push	{r6, r7}
1001152c:	0416      	lsls	r6, r2, #16
1001152e:	0c36      	lsrs	r6, r6, #16
10011530:	4699      	mov	r9, r3
10011532:	0033      	movs	r3, r6
10011534:	0405      	lsls	r5, r0, #16
10011536:	0c2c      	lsrs	r4, r5, #16
10011538:	0c07      	lsrs	r7, r0, #16
1001153a:	0c15      	lsrs	r5, r2, #16
1001153c:	4363      	muls	r3, r4
1001153e:	437e      	muls	r6, r7
10011540:	436f      	muls	r7, r5
10011542:	4365      	muls	r5, r4
10011544:	0c1c      	lsrs	r4, r3, #16
10011546:	19ad      	adds	r5, r5, r6
10011548:	1964      	adds	r4, r4, r5
1001154a:	469c      	mov	ip, r3
1001154c:	42a6      	cmp	r6, r4
1001154e:	d903      	bls.n	10011558 <__aeabi_lmul+0x34>
10011550:	2380      	movs	r3, #128	; 0x80
10011552:	025b      	lsls	r3, r3, #9
10011554:	4698      	mov	r8, r3
10011556:	4447      	add	r7, r8
10011558:	4663      	mov	r3, ip
1001155a:	0c25      	lsrs	r5, r4, #16
1001155c:	19ef      	adds	r7, r5, r7
1001155e:	041d      	lsls	r5, r3, #16
10011560:	464b      	mov	r3, r9
10011562:	434a      	muls	r2, r1
10011564:	4343      	muls	r3, r0
10011566:	0c2d      	lsrs	r5, r5, #16
10011568:	0424      	lsls	r4, r4, #16
1001156a:	1964      	adds	r4, r4, r5
1001156c:	1899      	adds	r1, r3, r2
1001156e:	19c9      	adds	r1, r1, r7
10011570:	0020      	movs	r0, r4
10011572:	bc0c      	pop	{r2, r3}
10011574:	4690      	mov	r8, r2
10011576:	4699      	mov	r9, r3
10011578:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001157a:	46c0      	nop			; (mov r8, r8)
1001157c:	10008e34 	.word	0x10008e34
10011580:	10008e42 	.word	0x10008e42
10011584:	10008e50 	.word	0x10008e50
10011588:	10008e5e 	.word	0x10008e5e
1001158c:	10008e6c 	.word	0x10008e6c
10011590:	10008e7a 	.word	0x10008e7a
10011594:	10008e88 	.word	0x10008e88
10011598:	10008e98 	.word	0x10008e98
1001159c:	10008ea8 	.word	0x10008ea8
100115a0:	10008eb8 	.word	0x10008eb8
100115a4:	10008ec8 	.word	0x10008ec8
100115a8:	10008ed8 	.word	0x10008ed8
100115ac:	10008ee8 	.word	0x10008ee8
100115b0:	10008ef8 	.word	0x10008ef8
100115b4:	10008f08 	.word	0x10008f08
100115b8:	10008f18 	.word	0x10008f18
100115bc:	10008f28 	.word	0x10008f28
100115c0:	10008f38 	.word	0x10008f38
100115c4:	10008f48 	.word	0x10008f48
100115c8:	10008f58 	.word	0x10008f58
100115cc:	10008f68 	.word	0x10008f68
100115d0:	10008f78 	.word	0x10008f78
100115d4:	10008f88 	.word	0x10008f88
100115d8:	10008f98 	.word	0x10008f98
100115dc:	10008fa8 	.word	0x10008fa8
100115e0:	10008fb8 	.word	0x10008fb8
100115e4:	10008fc8 	.word	0x10008fc8
100115e8:	10008fd8 	.word	0x10008fd8
100115ec:	10008fe6 	.word	0x10008fe6
100115f0:	10008ff4 	.word	0x10008ff4
100115f4:	10009002 	.word	0x10009002
100115f8:	10009010 	.word	0x10009010
100115fc:	1000901e 	.word	0x1000901e
10011600:	1000902c 	.word	0x1000902c
10011604:	1000903a 	.word	0x1000903a
10011608:	10009048 	.word	0x10009048
1001160c:	10009058 	.word	0x10009058
10011610:	10009068 	.word	0x10009068
10011614:	10009078 	.word	0x10009078
10011618:	10009088 	.word	0x10009088
1001161c:	10009098 	.word	0x10009098
10011620:	100090a8 	.word	0x100090a8
10011624:	100090b8 	.word	0x100090b8
10011628:	100090c8 	.word	0x100090c8
1001162c:	100090d8 	.word	0x100090d8
10011630:	100090e8 	.word	0x100090e8
10011634:	100090f8 	.word	0x100090f8
10011638:	10009108 	.word	0x10009108
1001163c:	10009118 	.word	0x10009118
10011640:	10009128 	.word	0x10009128
10011644:	10009138 	.word	0x10009138
10011648:	10009148 	.word	0x10009148
1001164c:	10009156 	.word	0x10009156
10011650:	10009164 	.word	0x10009164
10011654:	100091a4 	.word	0x100091a4
10011658:	100091cc 	.word	0x100091cc
1001165c:	100091f4 	.word	0x100091f4
10011660:	1000921c 	.word	0x1000921c
10011664:	1000945c 	.word	0x1000945c
10011668:	1000924c 	.word	0x1000924c
1001166c:	10009264 	.word	0x10009264
10011670:	100092dc 	.word	0x100092dc
10011674:	100092f4 	.word	0x100092f4
10011678:	1000927c 	.word	0x1000927c
1001167c:	10009294 	.word	0x10009294
10011680:	100092ac 	.word	0x100092ac
10011684:	100092c4 	.word	0x100092c4
10011688:	1000930c 	.word	0x1000930c
1001168c:	100095d0 	.word	0x100095d0
10011690:	100095d0 	.word	0x100095d0
10011694:	100095d0 	.word	0x100095d0
10011698:	100095d0 	.word	0x100095d0
1001169c:	100095d0 	.word	0x100095d0
100116a0:	100095d0 	.word	0x100095d0
100116a4:	100095d0 	.word	0x100095d0
100116a8:	100095d0 	.word	0x100095d0
100116ac:	100093b4 	.word	0x100093b4
100116b0:	100093cc 	.word	0x100093cc
100116b4:	100093e4 	.word	0x100093e4
100116b8:	10009472 	.word	0x10009472
100116bc:	1000933c 	.word	0x1000933c
100116c0:	100095d0 	.word	0x100095d0
100116c4:	100095d0 	.word	0x100095d0
100116c8:	100095d0 	.word	0x100095d0
100116cc:	100095d0 	.word	0x100095d0
100116d0:	100095d0 	.word	0x100095d0
100116d4:	100095d0 	.word	0x100095d0
100116d8:	100093fc 	.word	0x100093fc
100116dc:	10009414 	.word	0x10009414
100116e0:	1000942c 	.word	0x1000942c
100116e4:	10009444 	.word	0x10009444
100116e8:	100095d0 	.word	0x100095d0
100116ec:	10009588 	.word	0x10009588
100116f0:	100095a0 	.word	0x100095a0
100116f4:	100095d0 	.word	0x100095d0
100116f8:	100095d0 	.word	0x100095d0
100116fc:	1000949e 	.word	0x1000949e
10011700:	100094b4 	.word	0x100094b4
10011704:	100094ca 	.word	0x100094ca
10011708:	100094e0 	.word	0x100094e0
1001170c:	100095d0 	.word	0x100095d0
10011710:	100095d0 	.word	0x100095d0
10011714:	100095d0 	.word	0x100095d0
10011718:	100095d0 	.word	0x100095d0
1001171c:	100095d0 	.word	0x100095d0
10011720:	100095d0 	.word	0x100095d0
10011724:	100095d0 	.word	0x100095d0
10011728:	100095d0 	.word	0x100095d0
1001172c:	10009190 	.word	0x10009190
10011730:	100091b8 	.word	0x100091b8
10011734:	100091e0 	.word	0x100091e0
10011738:	10009208 	.word	0x10009208
1001173c:	10009234 	.word	0x10009234
10011740:	10009324 	.word	0x10009324
10011744:	10009354 	.word	0x10009354
10011748:	1000936c 	.word	0x1000936c
1001174c:	10009384 	.word	0x10009384
10011750:	1000939c 	.word	0x1000939c
10011754:	10009488 	.word	0x10009488
10011758:	100094f6 	.word	0x100094f6
1001175c:	10009570 	.word	0x10009570
10011760:	100095b8 	.word	0x100095b8
10011764:	10009ca8 	.word	0x10009ca8
10011768:	10009caa 	.word	0x10009caa
1001176c:	10009c90 	.word	0x10009c90
10011770:	10009c90 	.word	0x10009c90
10011774:	10009c90 	.word	0x10009c90
10011778:	10009ca8 	.word	0x10009ca8
1001177c:	10009c90 	.word	0x10009c90
10011780:	10009c90 	.word	0x10009c90
10011784:	1000a4f6 	.word	0x1000a4f6
10011788:	1000a56a 	.word	0x1000a56a
1001178c:	1000a4de 	.word	0x1000a4de
10011790:	1000a570 	.word	0x1000a570
10011794:	1000a4e4 	.word	0x1000a4e4
10011798:	1000a4ea 	.word	0x1000a4ea
1001179c:	1000a4f0 	.word	0x1000a4f0
100117a0:	1000abc8 	.word	0x1000abc8
100117a4:	1000abc8 	.word	0x1000abc8
100117a8:	1000abc8 	.word	0x1000abc8
100117ac:	1000abc8 	.word	0x1000abc8
100117b0:	1000abc8 	.word	0x1000abc8
100117b4:	1000abc8 	.word	0x1000abc8
100117b8:	1000abc8 	.word	0x1000abc8
100117bc:	1000abc8 	.word	0x1000abc8
100117c0:	1000abc8 	.word	0x1000abc8
100117c4:	1000abc8 	.word	0x1000abc8
100117c8:	1000abc8 	.word	0x1000abc8
100117cc:	1000abc8 	.word	0x1000abc8
100117d0:	1000abc8 	.word	0x1000abc8
100117d4:	1000abc8 	.word	0x1000abc8
100117d8:	1000abc8 	.word	0x1000abc8
100117dc:	1000abc8 	.word	0x1000abc8
100117e0:	1000abc8 	.word	0x1000abc8
100117e4:	1000abc8 	.word	0x1000abc8
100117e8:	1000abc8 	.word	0x1000abc8
100117ec:	1000abe6 	.word	0x1000abe6
100117f0:	1000abe6 	.word	0x1000abe6
100117f4:	1000abe6 	.word	0x1000abe6
100117f8:	1000abe6 	.word	0x1000abe6
100117fc:	1000abe6 	.word	0x1000abe6
10011800:	1000abe6 	.word	0x1000abe6
10011804:	1000abe6 	.word	0x1000abe6
10011808:	1000abe6 	.word	0x1000abe6
1001180c:	1000abe6 	.word	0x1000abe6
10011810:	1000abe6 	.word	0x1000abe6
10011814:	1000ac08 	.word	0x1000ac08
10011818:	1000ac08 	.word	0x1000ac08
1001181c:	1000ac08 	.word	0x1000ac08
10011820:	1000ac08 	.word	0x1000ac08
10011824:	1000ac08 	.word	0x1000ac08
10011828:	1000ac08 	.word	0x1000ac08
1001182c:	1000ac08 	.word	0x1000ac08
10011830:	1000ac08 	.word	0x1000ac08
10011834:	1000ac08 	.word	0x1000ac08
10011838:	1000ac08 	.word	0x1000ac08
1001183c:	1000ac2a 	.word	0x1000ac2a
10011840:	1000ac2a 	.word	0x1000ac2a
10011844:	1000ac2a 	.word	0x1000ac2a
10011848:	1000ac2a 	.word	0x1000ac2a
1001184c:	1000ac2a 	.word	0x1000ac2a
10011850:	1000ac2a 	.word	0x1000ac2a
10011854:	1000ac44 	.word	0x1000ac44
10011858:	1000ac44 	.word	0x1000ac44
1001185c:	1000ac44 	.word	0x1000ac44
10011860:	1000ac44 	.word	0x1000ac44
10011864:	1000ac44 	.word	0x1000ac44
10011868:	1000ac44 	.word	0x1000ac44
1001186c:	1000ac44 	.word	0x1000ac44
10011870:	1000ac44 	.word	0x1000ac44
10011874:	1000ac44 	.word	0x1000ac44
10011878:	1000ac5e 	.word	0x1000ac5e
1001187c:	1000ac5e 	.word	0x1000ac5e
10011880:	1000ac80 	.word	0x1000ac80
10011884:	1000ac80 	.word	0x1000ac80
10011888:	1000ac9a 	.word	0x1000ac9a
1001188c:	1000ac80 	.word	0x1000ac80
10011890:	34333231 	.word	0x34333231
10011894:	00003635 	.word	0x00003635
10011898:	efcdab00 	.word	0xefcdab00
1001189c:	00efcdab 	.word	0x00efcdab
100118a0:	b2d60600 	.word	0xb2d60600
100118a4:	f8f005f0 	.word	0xf8f005f0
100118a8:	00000000 	.word	0x00000000

100118ac <ble_mgr_gatt_server_handle>:
	...
100118c4:	10009bed 10009c29 10009bf1 00000000     ....)...........
100118d4:	0000000d 6e616353 676e696e 61662020     ....Scanning  fa
100118e4:	64656c69 00000000 2055544d 6e616843     iled....MTU Chan
100118f4:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10011904:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10011914:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10011924:	69766544 64206563 6f637369 63656e6e     Device disconnec
10011934:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10011944:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10011954:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10011964:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10011974:	6c706d6f 64657465 63757320 73736563     ompleted success
10011984:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10011994:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100119a4:	74707972 206e6f69 6f666e69 00000000     ryption info....
100119b4:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
100119c4:	7320666f 206e6163 69766564 72206563     of scan device r
100119d4:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
100119e4:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
100119f4:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10011a04:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10011a14:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10011a24:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10011a34:	46207473 656c6961 00000064 72696150     st Failed...Pair
10011a44:	20676e69 636f7270 72756465 6f632065     ing procedure co
10011a54:	656c706d 20646574 63637573 66737365     mpleted successf
10011a64:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10011a74:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10011a84:	726f7473 68742065 61702065 6e697269     store the pairin
10011a94:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10011aa4:	4e206e6f 7320746f 74726174 00006465     on Not started..
10011ab4:	76616c53 65532065 69727563 52207974     Slave Security R
10011ac4:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10011ad4:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10011ae4:	71655220 74736575 41202d20 65687475      Request - Authe
10011af4:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10011b04:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10011b14:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10011b24:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10011b34:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10011b44:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10011b54:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10011b64:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10011b74:	206e6f28 6568746f 65442072 65636976     (on other Device
10011b84:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10011b94:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10011ba4:	74616546 20657275 20746f4e 70707573     Feature Not supp
10011bb4:	6574726f 00000064 65746e45 20646572     orted...Entered 
10011bc4:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10011bd4:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10011be4:	7020666f 20726565 69766564 69206563     of peer device i
10011bf4:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10011c04:	00000000 61656c50 75206573 6961706e     ....Please unpai
10011c14:	68742072 65642065 65636976 6f726620     r the device fro
10011c24:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10011c34:	656c6962 65732029 6e697474 6d207367     bile) settings m
10011c44:	20756e65 20646e61 72617473 61702074     enu and start pa
10011c54:	6e697269 67612067 006e6961 72636e45     iring again.Encr
10011c64:	69747079 52206e6f 65757165 52207473     yption Request R
10011c74:	796c7065 69614620 0064656c 74696e49     eply Failed.Init
10011c84:	696c6169 676e697a 4d415320 00313142     ializing SAMB11.
10011c94:	424d4153 49203131 6974696e 7a696c61     SAMB11 Initializ
10011ca4:	6f697461 6166206e 64656c69 00000000     ation failed....
10011cb4:	61656c50 63206573 6b636568 65687420     Please check the
10011cc4:	776f7020 61207265 6320646e 656e6e6f      power and conne
10011cd4:	6f697463 202f206e 64726168 65726177     ction / hardware
10011ce4:	6e6f6320 7463656e 0000726f 454d5441      connector..ATME
10011cf4:	4c422d4c 00000045 69766544 6e206563     L-BLE...Device n
10011d04:	20656d61 20746573 6c696166 00006465     ame set failed..
10011d14:	61204442 65726464 67207373 66207465     BD address get f
10011d24:	656c6961 00000064 41204442 65726464     ailed...BD Addre
10011d34:	303a7373 32302578 32302558 32302558     ss:0x%02X%02X%02
10011d44:	32302558 32302558 32302558 41202c58     X%02X%02X%02X, A
10011d54:	65726464 54207373 3a657079 00006425     ddress Type:%d..
10011d64:	20746553 20454c42 69766544 63206563     Set BLE Device c
10011d74:	69666e6f 61727567 6e6f6974 69616620     onfiguration fai
10011d84:	0064656c 20746553 20454c42 69766544     led.Set BLE Devi
10011d94:	41206563 65726464 66207373 656c6961     ce Address faile
10011da4:	00000064 6e616353 676e696e 502e2e2e     d...Scanning...P
10011db4:	7361656c 61772065 2e2e7469 0000002e     lease wait......
10011dc4:	76616c53 65732065 69727563 72207974     Slave security r
10011dd4:	65757165 66207473 656c6961 00000064     equest failed...
10011de4:	6e6e6f43 65746365 6f742064 65657020     Connected to pee
10011df4:	65642072 65636976 74697720 64612068     r device with ad
10011e04:	73657264 78302073 78323025 78323025     dress 0x%02x%02x
10011e14:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
10011e24:	00000000 6e6e6f43 69746365 48206e6f     ....Connection H
10011e34:	6c646e61 64252065 00000000 6f736552     andle %d....Reso
10011e44:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10011e54:	73736572 69616620 2a64656c 0000002a     ress failed**...
10011e64:	2078614d 626d756e 6f207265 6f632066     Max number of co
10011e74:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10011e84:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10011e94:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10011ea4:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10011eb4:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10011ec4:	00000064 20454c42 65766441 73697472     d...BLE Advertis
10011ed4:	6e656d65 61642074 73206174 66207465     ement data set f
10011ee4:	656c6961 00000064                       ailed...

10011eec <ble_mgr_gap_handle>:
10011eec:	10009be9 10009da5 10009c01 00000000     ................
10011efc:	00000000 1000a891 10009c59 10009bfd     ........Y.......
10011f0c:	10009f45 10009e25 1000a149 10009f5d     E...%...I...]...
10011f1c:	1000a29d 1000a3e1 10009ce1 1000aacd     ................
	...

10011f38 <app_gap_cb>:
	...
10011f50:	1000b9a5 00000000 00000000 1000b9c1     ................
	...
10011f84:	72617453 20646574 20505448 706d6554     Started HTP Temp
10011f94:	74617265 20657275 69746f4e 61636966     erature Notifica
10011fa4:	6e6f6974 00000000 20505448 706d6554     tion....HTP Temp
10011fb4:	74617265 20657275 69746f4e 61636966     erature Notifica
10011fc4:	6e6f6974 6f745320 64657070 00000000     tion Stopped....
10011fd4:	7373410a 6d6e6769 20746e65 20312e32     .Assignment 2.1 
10011fe4:	7453203a 20747261 65766441 73697472     : Start Advertis
10011ff4:	00676e69 23230d0a 76644120 69747265     ing...## Adverti
10012004:	656d6573 6420746e 20617461 20746573     sement data set 
10012014:	6c696166 3a206465 72726520 2520726f     failed : error %
10012024:	00000078 7373410a 6d6e6769 20746e65     x....Assignment 
10012034:	3a322e33 70704120 6163696c 6e6f6974     3.2: Application
10012044:	73696420 6e6e6f63 65746365 00002064      disconnected ..
10012054:	7373410a 6d6e6769 20746e65 3a322e33     .Assignment 3.2:
10012064:	70704120 6163696c 6e6f6974 69617020      Application pai
10012074:	20646572 00000000 7373410a 6d6e6769     red .....Assignm
10012084:	20746e65 3a312e34 616e6520 20656c62     ent 4.1: enable 
10012094:	6c616568 74206874 65706d65 75746172     health temperatu
100120a4:	73206572 69767265 00206563 202a2a2a     re service .*** 
100120b4:	6c696146 20657275 48206e69 50205054     Failure in HTP P
100120c4:	69666f72 4520656c 6c62616e 00000065     rofile Enable...
100120d4:	41530d0a 3131424d 454c4220 70704120     ..SAMB11 BLE App
100120e4:	6163696c 6e6f6974 00000000 7373410a     lication.....Ass
100120f4:	6d6e6769 20746e65 3a312e34 696e4920     ignment 4.1: Ini
10012104:	65482074 68746c61 6d657420 61726570     t Health tempera
10012114:	65727574 72657320 65636976 00000020     ture service ...
10012124:	20505448 61746144 73614220 72632065     HTP Data Base cr
10012134:	69746165 66206e6f 656c6961 00000064     eation failed...
10012144:	7373410a 6d6e6769 20746e65 3a322e33     .Assignment 3.2:
10012154:	67655220 65747369 6c622072 6f746575      Register blueto
10012164:	2068746f 6e657665 63207374 626c6c61     oth events callb
10012174:	736b6361 00000000 4523230a 726f7272     acks.....##Error
10012184:	65687720 6552206e 74736967 6e697265      when Registerin
10012194:	41532067 3131424d 70616720 6c616320     g SAMB11 gap cal
100121a4:	6361626c 0000736b 4523230a 726f7272     lbacks...##Error
100121b4:	65687720 6552206e 74736967 6e697265      when Registerin
100121c4:	41532067 3131424d 70746820 61632074     g SAMB11 htpt ca
100121d4:	61626c6c 00736b63                       llbacks.

100121dc <app_htpt_handle>:
	...
100121f0:	1000b889 00000000 00000000 00000000     ................
10012200:	656d7441 6f43206c 002e7072                       Atmel Corp.

1001220b <CSWTCH.47>:
1001220b:	03010300 03030303 03030303 00020303     ................
1001221b:	00ed7000 00ecce10 00ecce10 00eccc10     .p..............
1001222b:	00ed6210 00ed6210 00ed5810 00eccc10     .b...b...X......
1001223b:	00ed6210 00ed5810 00ed6210 00eccc10     .b...X...b......
1001224b:	00ed6810 00ed6810 00ed6810 00edf210     .h...h...h......
1001225b:	00f3bc10 00f27c10 00f27c10 00f27a10     .....|...|...z..
1001226b:	00f39410 00f39410 00f38610 00f27a10     .............z..
1001227b:	00f39410 00f38610 00f39410 00f27a10     .............z..
1001228b:	00f39c10 00f39c10 00f39c10 00f59c10     ................
1001229b:	00004310 01236c00                                .C...

100122a0 <_global_impure_ptr>:
100122a0:	1001236c                                l#..

100122a4 <__sf_fake_stdin>:
	...

100122c4 <__sf_fake_stdout>:
	...

100122e4 <__sf_fake_stderr>:
	...
10012304:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10012314:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10012324:	31300046 35343332 39383736 64636261     F.0123456789abcd
10012334:	00006665                                ef..

10012338 <_init>:
10012338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001233a:	46c0      	nop			; (mov r8, r8)
1001233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001233e:	bc08      	pop	{r3}
10012340:	469e      	mov	lr, r3
10012342:	4770      	bx	lr

10012344 <__init_array_start>:
10012344:	100080b1 	.word	0x100080b1

10012348 <_fini>:
10012348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001234a:	46c0      	nop			; (mov r8, r8)
1001234c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1001234e:	bc08      	pop	{r3}
10012350:	469e      	mov	lr, r3
10012352:	4770      	bx	lr

10012354 <__fini_array_start>:
10012354:	10008089 	.word	0x10008089
